/* This file was generated by SableCC (http://www.sablecc.org/). */

package Syntax.analysis;

import java.util.*;
import Syntax.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAStrExpr(AStrExpr node)
    {
        defaultCase(node);
    }

    public void caseAIntExpr(AIntExpr node)
    {
        defaultCase(node);
    }

    public void caseANilExpr(ANilExpr node)
    {
        defaultCase(node);
    }

    public void caseALvalueExpr(ALvalueExpr node)
    {
        defaultCase(node);
    }

    public void caseANegitiveExpr(ANegitiveExpr node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpr(APlusExpr node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpr(AMinusExpr node)
    {
        defaultCase(node);
    }

    public void caseAMultiplyExpr(AMultiplyExpr node)
    {
        defaultCase(node);
    }

    public void caseADivideExpr(ADivideExpr node)
    {
        defaultCase(node);
    }

    public void caseAEqualsExpr(AEqualsExpr node)
    {
        defaultCase(node);
    }

    public void caseANotEqualsExpr(ANotEqualsExpr node)
    {
        defaultCase(node);
    }

    public void caseALessExpr(ALessExpr node)
    {
        defaultCase(node);
    }

    public void caseALessOrEqualExpr(ALessOrEqualExpr node)
    {
        defaultCase(node);
    }

    public void caseAGreaterExpr(AGreaterExpr node)
    {
        defaultCase(node);
    }

    public void caseAGreaterOrEqualExpr(AGreaterOrEqualExpr node)
    {
        defaultCase(node);
    }

    public void caseAAndExpr(AAndExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    public void caseAAssignExpr(AAssignExpr node)
    {
        defaultCase(node);
    }

    public void caseAMethodExpr(AMethodExpr node)
    {
        defaultCase(node);
    }

    public void caseASeqExpr(ASeqExpr node)
    {
        defaultCase(node);
    }

    public void caseARecordExpr(ARecordExpr node)
    {
        defaultCase(node);
    }

    public void caseAArrayExpr(AArrayExpr node)
    {
        defaultCase(node);
    }

    public void caseAIfExpr(AIfExpr node)
    {
        defaultCase(node);
    }

    public void caseAWhileExpr(AWhileExpr node)
    {
        defaultCase(node);
    }

    public void caseAForExpr(AForExpr node)
    {
        defaultCase(node);
    }

    public void caseABreakExpr(ABreakExpr node)
    {
        defaultCase(node);
    }

    public void caseALetExpr(ALetExpr node)
    {
        defaultCase(node);
    }

    public void caseASingleLvalue(ASingleLvalue node)
    {
        defaultCase(node);
    }

    public void caseAListLvalue(AListLvalue node)
    {
        defaultCase(node);
    }

    public void caseAArrayLvalue(AArrayLvalue node)
    {
        defaultCase(node);
    }

    public void caseAField(AField node)
    {
        defaultCase(node);
    }

    public void caseATypeDeclaration(ATypeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAVariableDeclaration(AVariableDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAMethodDeclaration(AMethodDeclaration node)
    {
        defaultCase(node);
    }

    public void caseASingleTypeCombination(ASingleTypeCombination node)
    {
        defaultCase(node);
    }

    public void caseAArrayTypeCombination(AArrayTypeCombination node)
    {
        defaultCase(node);
    }

    public void caseARecordTypeCombination(ARecordTypeCombination node)
    {
        defaultCase(node);
    }

    public void caseATypeField(ATypeField node)
    {
        defaultCase(node);
    }

    public void caseTArray(TArray node)
    {
        defaultCase(node);
    }

    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTLet(TLet node)
    {
        defaultCase(node);
    }

    public void caseTNil(TNil node)
    {
        defaultCase(node);
    }

    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    public void caseTLBrack(TLBrack node)
    {
        defaultCase(node);
    }

    public void caseTRBrack(TRBrack node)
    {
        defaultCase(node);
    }

    public void caseTLCurly(TLCurly node)
    {
        defaultCase(node);
    }

    public void caseTRCurly(TRCurly node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMultiply(TMultiply node)
    {
        defaultCase(node);
    }

    public void caseTDivide(TDivide node)
    {
        defaultCase(node);
    }

    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    public void caseTNotEquals(TNotEquals node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTLessOrEqual(TLessOrEqual node)
    {
        defaultCase(node);
    }

    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    public void caseTGreaterOrEqual(TGreaterOrEqual node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTCommentBody(TCommentBody node)
    {
        defaultCase(node);
    }

    public void caseTCommentEnd(TCommentEnd node)
    {
        defaultCase(node);
    }

    public void caseTStr(TStr node)
    {
        defaultCase(node);
    }

    public void caseTEscapeChar(TEscapeChar node)
    {
        defaultCase(node);
    }

    public void caseTControlChar(TControlChar node)
    {
        defaultCase(node);
    }

    public void caseTGraphChar(TGraphChar node)
    {
        defaultCase(node);
    }

    public void caseTSimpleChar(TSimpleChar node)
    {
        defaultCase(node);
    }

    public void caseTLineContinuer(TLineContinuer node)
    {
        defaultCase(node);
    }

    public void caseTStrEnd(TStrEnd node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
