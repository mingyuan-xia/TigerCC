/* This file was generated by SableCC (http://www.sablecc.org/). */

package Syntax.node;

import java.util.*;
import Syntax.analysis.*;

@SuppressWarnings("nls")
public final class ALetExpr extends PExpr
{
    private final LinkedList<PDeclaration> _declaration_ = new LinkedList<PDeclaration>();
    private PExpr _expr_;

    public ALetExpr()
    {
        // Constructor
    }

    public ALetExpr(
        @SuppressWarnings("hiding") List<PDeclaration> _declaration_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setDeclaration(_declaration_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new ALetExpr(
            cloneList(this._declaration_),
            cloneNode(this._expr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetExpr(this);
    }

    public LinkedList<PDeclaration> getDeclaration()
    {
        return this._declaration_;
    }

    public void setDeclaration(List<PDeclaration> list)
    {
        this._declaration_.clear();
        this._declaration_.addAll(list);
        for(PDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._declaration_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._declaration_.remove(child))
        {
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PDeclaration> i = this._declaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
