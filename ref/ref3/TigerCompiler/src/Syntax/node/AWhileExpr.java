/* This file was generated by SableCC (http://www.sablecc.org/). */

package Syntax.node;

import Syntax.analysis.*;

@SuppressWarnings("nls")
public final class AWhileExpr extends PExpr
{
    private PExpr _c_;
    private PExpr _t_;

    public AWhileExpr()
    {
        // Constructor
    }

    public AWhileExpr(
        @SuppressWarnings("hiding") PExpr _c_,
        @SuppressWarnings("hiding") PExpr _t_)
    {
        // Constructor
        setC(_c_);

        setT(_t_);

    }

    @Override
    public Object clone()
    {
        return new AWhileExpr(
            cloneNode(this._c_),
            cloneNode(this._t_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileExpr(this);
    }

    public PExpr getC()
    {
        return this._c_;
    }

    public void setC(PExpr node)
    {
        if(this._c_ != null)
        {
            this._c_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c_ = node;
    }

    public PExpr getT()
    {
        return this._t_;
    }

    public void setT(PExpr node)
    {
        if(this._t_ != null)
        {
            this._t_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._t_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._c_)
            + toString(this._t_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._c_ == child)
        {
            this._c_ = null;
            return;
        }

        if(this._t_ == child)
        {
            this._t_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._c_ == oldChild)
        {
            setC((PExpr) newChild);
            return;
        }

        if(this._t_ == oldChild)
        {
            setT((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
