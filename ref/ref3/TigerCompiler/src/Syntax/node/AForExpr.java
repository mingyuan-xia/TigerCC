/* This file was generated by SableCC (http://www.sablecc.org/). */

package Syntax.node;

import Syntax.analysis.*;

@SuppressWarnings("nls")
public final class AForExpr extends PExpr
{
    private TId _id_;
    private PExpr _low_;
    private PExpr _upper_;
    private PExpr _t_;

    public AForExpr()
    {
        // Constructor
    }

    public AForExpr(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PExpr _low_,
        @SuppressWarnings("hiding") PExpr _upper_,
        @SuppressWarnings("hiding") PExpr _t_)
    {
        // Constructor
        setId(_id_);

        setLow(_low_);

        setUpper(_upper_);

        setT(_t_);

    }

    @Override
    public Object clone()
    {
        return new AForExpr(
            cloneNode(this._id_),
            cloneNode(this._low_),
            cloneNode(this._upper_),
            cloneNode(this._t_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForExpr(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PExpr getLow()
    {
        return this._low_;
    }

    public void setLow(PExpr node)
    {
        if(this._low_ != null)
        {
            this._low_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._low_ = node;
    }

    public PExpr getUpper()
    {
        return this._upper_;
    }

    public void setUpper(PExpr node)
    {
        if(this._upper_ != null)
        {
            this._upper_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._upper_ = node;
    }

    public PExpr getT()
    {
        return this._t_;
    }

    public void setT(PExpr node)
    {
        if(this._t_ != null)
        {
            this._t_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._t_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._low_)
            + toString(this._upper_)
            + toString(this._t_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._low_ == child)
        {
            this._low_ = null;
            return;
        }

        if(this._upper_ == child)
        {
            this._upper_ = null;
            return;
        }

        if(this._t_ == child)
        {
            this._t_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._low_ == oldChild)
        {
            setLow((PExpr) newChild);
            return;
        }

        if(this._upper_ == oldChild)
        {
            setUpper((PExpr) newChild);
            return;
        }

        if(this._t_ == oldChild)
        {
            setT((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
