/* This file was generated by SableCC (http://www.sablecc.org/). */

package Syntax.node;

import java.util.*;
import Syntax.analysis.*;

@SuppressWarnings("nls")
public final class ARecordTypeCombination extends PTypeCombination
{
    private final LinkedList<PTypeField> _typeField_ = new LinkedList<PTypeField>();

    public ARecordTypeCombination()
    {
        // Constructor
    }

    public ARecordTypeCombination(
        @SuppressWarnings("hiding") List<PTypeField> _typeField_)
    {
        // Constructor
        setTypeField(_typeField_);

    }

    @Override
    public Object clone()
    {
        return new ARecordTypeCombination(
            cloneList(this._typeField_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARecordTypeCombination(this);
    }

    public LinkedList<PTypeField> getTypeField()
    {
        return this._typeField_;
    }

    public void setTypeField(List<PTypeField> list)
    {
        this._typeField_.clear();
        this._typeField_.addAll(list);
        for(PTypeField e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._typeField_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._typeField_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PTypeField> i = this._typeField_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeField) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
