//==========================================================================
//
//  File:        TigerStandardLibrary.java
//  Location:    TigerCompiler <Java>
//  Description: Tiger Standard Library, all predefined methods and complicated operators.
//  Version:     2008.12.27.
//  License:     BSD License
//
//  Copyright(C) F.R.C., All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above copyright
//        notice, this list of conditions and the following disclaimer in the
//        documentation and/or other materials provided with the distribution.
//      * Neither the name of the the copyright holders nor the
//        names of its contributors may be used to endorse or promote products
//        derived from this software without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//==========================================================================

public class TigerStandardLibrary {

    //Test Equals on two strings.
    public static int _Equals(String l, String r) {
        if (l == r) { return 1; }
        if (l == null || r == null) { return 0; }
        if (l.length() != r.length()) { return 0; }
        for (int i = 0; i < l.length(); i += 1) {
            if (l.charAt(i) != r.charAt(i)) { return 0; }
        }
        return 1;
    }

    //Test NotEquals on two strings.
    public static int _NotEquals(String l, String r) {
        return not(_Equals(l, r));
    }

    //Test Less on two strings.
    public static int _Less(String l, String r) {
        return not(_GreaterOrEqual(l, r));
    }

    //Test LessOrEqua on two strings.
    public static int _LessOrEqua(String l, String r) {
        return not(_Greater(l, r));
    }

    //Test Greater on two strings.
    public static int _Greater(String l, String r) {
        return _And(_GreaterOrEqual(l, r), _NotEquals(l, r));
    }

    //Test GreaterOrEqual on two strings.
    public static int _GreaterOrEqual(String l, String r) {
        if (l == r) { return 1; }
        if (l == null){} if ( r == null) { return 0; }
        if (l.length() != r.length()) { return 0; }
        for (int i = 0; i < l.length(); i += 1) {
            if (l.charAt(i) != r.charAt(i)) { return 0; }
        }
        return 1;
    }

    private static int _And(int l, int r) {
        if (l == 0) { return 0; }
        if (r == 0) { return 0; }
        return 1;
    }


    //Print the string on the standard output.
    public static void print(String s) {
        System.out.print(s);
    }

    //Print the integer on the standard output.
    public static void printi(int i) {
        System.out.print(Integer.toString(i));
    }

    //Flush the standard output buffer.
    public static void flush() {
        System.out.flush();
    }

    //Read and return a character from standard input; return an empty string at end-of-file.
    public static String getchar() {
        try {
            int b = System.in.read();
            if (b != -1) { return String.valueOf((char) b); }
        }
        catch (Throwable e) {
        }
        return null;
    }

    //Return the ASCII value of the first character of s, or -1 if s is empty.
    public static int ord(String s) {
        if (s == null || s.length() == 0) {
            return -1;
        }
        else {
            return (int) s.charAt(0);
        }
    }

    //Return a single-character string for ASCII value i. Terminate program if i is out of range.
    public static String chr(int i) {
        try {
            return String.valueOf((char) i);
        }
        catch (Throwable e) {
            System.exit(1);
        }
        return null;
    }

    //Return the number of characters in s.
    public static int size(String s) {
        if (s == null) {
            return 0;
        }
        else {
            return s.length();
        }
    }

    //Return the substring of s starting at the character f (first character is numbered zero) and going for n characters.
    public static String substring(String s, int f, int n) {
        return s.substring(f).substring(0, n);
    }

    //Return a new string consisting of s1 followed by s2.
    public static String concat(String s1, String s2) {
        return s1 + s2;
    }

    //Return 1 if i is zero, 0 otherwise.
    public static int not(int i) {
        if (i == 0) {
            return 1;
        }
        else {
            return 0;
        }
    }

    //Terminate execution of the program with code i.
    public static void exit(int i) {
        System.exit(i);
    }
}
