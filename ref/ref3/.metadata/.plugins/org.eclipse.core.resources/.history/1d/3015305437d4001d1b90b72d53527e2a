//==========================================================================
//
//  File:        RecordGenerator.java
//  Location:    TigerCompiler <Java>
//  Description: Generate Record types
//  Version:     2008.12.27.
//  License:     BSD License
//
//  Copyright(C) F.R.C., All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above copyright
//        notice, this list of conditions and the following disclaimer in the
//        documentation and/or other materials provided with the distribution.
//      * Neither the name of the the copyright holders nor the
//        names of its contributors may be used to endorse or promote products
//        derived from this software without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//==========================================================================

package Semantics.generator;

import org.objectweb.asm.*;

import static org.objectweb.asm.Opcodes.*;

import Semantics.verifier.VerifierBase.*;

public class RecordGenerator {
    public final String Name;
    protected Generator cg;
    protected ClassWriter cw;

    protected final int THIS = 0;

    public RecordGenerator(String name, Generator cg, CombinedType ct) {
        RecordType rt = (RecordType) ct.Type;

        this.Name = name;
        this.cg = cg;

        cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
        cw.visit(V1_1, ACC_PUBLIC, cg.ClassName, null, "java/lang/Object", null);

        for (Field f : rt.Fields) {
            FieldVisitor fv = cw.visitField(ACC_PUBLIC, f.Name, cg.GetTypeJvmName(f.Type), null, null);
            fv.visitEnd();
        }

        //constructor
        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, "<init>", cg.GetRecordConstructorSignature(ct), null, null);
        //invokes super.<init>
        mv.visitVarInsn(ALOAD, THIS);
        mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");

        mv.visitVarInsn(ALOAD, THIS);
        for (Field f : rt.Fields) {
            mv.visitInsn(DUP);
            mv.visitFieldInsn(PUTFIELD, Name, f.Name, cg.GetTypeJvmName(f.Type));
        }

        mv.visitInsn(RETURN);
        mv.visitMaxs(0, 0); //max stack and max locals automatically computed
        mv.visitEnd();

        cw.visitEnd();
    }

    public byte[] Generate() {
        return cw.toByteArray();
    }
}
