//==========================================================================
//
//  File:        ParserDump.java
//  Location:    TigerCompiler <Java>
//  Description: Parser dump
//  Version:     2008.12.27.
//  License:     BSD License
//
//  Copyright(C) F.R.C., All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above copyright
//        notice, this list of conditions and the following disclaimer in the
//        documentation and/or other materials provided with the distribution.
//      * Neither the name of the the copyright holders nor the
//        names of its contributors may be used to endorse or promote products
//        derived from this software without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//==========================================================================

package Dumps;

import java.io.*;
import Syntax.node.*;
import Syntax.lexer.*;
import Syntax.parser.*;
import Syntax.analysis.*;
import Semantics.lexer.*;

public class ParserDump {
    public static void PrintSyntaxTree(Reader i) throws Throwable {
        Lexer lexer = new TigerLexer(new PushbackReader(i, 1024));
        Parser parser = new Parser(lexer);
        Start ast = parser.parse();

        DepthFirstAdapter df = new DepthFirstAdapter() {
            public int level = 0;

            public void print(String info) {
                StringBuffer sb = new StringBuffer();
                for (int i = 0; i < level; i += 1) {
                    sb.append("    ");
                }
                sb.append(info);
                System.out.println(sb.toString());
            }

            public void printWithPositionInfo(Node node, String info) {
                print("[" + Integer.toString(node.getLine()) + ", " + Integer.toString(node.getPos()) + "]");
                print(info);
                System.out.println();
            }

            public void printlnNamePositionInfo(Node node) {
                printWithPositionInfo(node, node.getClass().getSimpleName());
            }

            @Override
            public void defaultIn(Node node) {
                printlnNamePositionInfo(node);
                level += 1;
            }

            @Override
            public void defaultOut(Node node) {
                level -= 1;
            }

            @Override
            public void inStart(Start node) {
            }

            @Override
            public void outStart(Start node) {
            }

            @Override
            public void caseTStr(TStr node) {
                printWithPositionInfo(node, "str ( \"" + node.getText() + "\" )");
            }

            @Override
            public void caseTId(TId node) {
                printWithPositionInfo(node, "id ( " + node.getText() + " )");
            };

            @Override
            public void caseTInt(TInt node) {
                printWithPositionInfo(node, "int ( " + node.getText() + " )");
            }
        };

        ast.apply(df);
    }
}
