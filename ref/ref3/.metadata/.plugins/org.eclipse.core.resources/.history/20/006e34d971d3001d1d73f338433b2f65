//==========================================================================
//
//  File:        GeneratorDump.java
//  Location:    TigerCompiler <Java>
//  Description: Generator dump
//  Version:     2008.12.27.
//  License:     BSD License
//
//  Copyright(C) F.R.C., All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above copyright
//        notice, this list of conditions and the following disclaimer in the
//        documentation and/or other materials provided with the distribution.
//      * Neither the name of the the copyright holders nor the
//        names of its contributors may be used to endorse or promote products
//        derived from this software without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//==========================================================================

package Dumps;

import java.io.*;

import Syntax.node.*;
import Syntax.lexer.*;
import Syntax.parser.*;
import Syntax.analysis.*;
import Semantics.lexer.*;
import Semantics.verifier.*;
import Semantics.verifier.VerifierBase.*;

public class GeneratorDump {
    public static void PrintGeneratorDump(Reader i) throws Throwable {
        System.out.println("GeneratorDump stub.");
        System.out.println();

        Lexer lexer = new TigerLexer(new PushbackReader(i, 1024));
        Parser parser = new Parser(lexer);
        Start ast = parser.parse();
        final Verifier vf = new Verifier();

        Type TInt = IntType.GetInstance();
        Type TStr = StrType.GetInstance();
        Type TUnit = UnitType.GetInstance();
        @SuppressWarnings("unused")
        Type TAnyRecord = AnyRecordType.GetInstance();
        vf.GlobalNamespace.AddIdentifier(new Identifier("print", new MethodType(new Identifier[] { new Identifier("s", TStr) }, TUnit)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("printi", new MethodType(new Identifier[] { new Identifier("i", TInt) }, TUnit)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("flush", new MethodType(new Identifier[] {}, TUnit)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("getchar", new MethodType(new Identifier[] {}, TStr)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("ord", new MethodType(new Identifier[] { new Identifier("s", TStr) }, TInt)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("chr", new MethodType(new Identifier[] { new Identifier("i", TInt) }, TStr)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("size", new MethodType(new Identifier[] { new Identifier("s", TStr) }, TInt)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("substring", new MethodType(new Identifier[] { new Identifier("s", TStr), new Identifier("f", TInt), new Identifier("n", TInt) }, TStr)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("concat", new MethodType(new Identifier[] { new Identifier("s1", TStr), new Identifier("s2", TStr) }, TStr)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("not", new MethodType(new Identifier[] { new Identifier("i", TInt) }, TInt)));
        vf.GlobalNamespace.AddIdentifier(new Identifier("exit", new MethodType(new Identifier[] { new Identifier("i", TInt) }, TUnit)));

        while (vf.HasNextPass()) {
            ast.apply(vf);
            vf.NextPass();
        }

        if (ErrorReporter.getErrorCount() > 0) {
            System.out.println();
            return;
        }

        DepthFirstAdapter df = new DepthFirstAdapter() {

        };

        ast.apply(df);

        System.out.println();
    }
}
