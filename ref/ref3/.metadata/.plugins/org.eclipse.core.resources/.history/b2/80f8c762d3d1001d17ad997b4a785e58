/* This file was generated by SableCC (http://www.sablecc.org/). */

package Syntax.parser;

import Syntax.lexer.*;
import Syntax.node.*;
import Syntax.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AGrammar */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AIfThenExpr */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AIfThenElseExpr */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AArrayExpr */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AWhileExpr */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AForExpr */
		    {
			ArrayList list = new5();
			push(goTo(1), list);
		    }
		    break;
                    case 6: /* reduce AExprExpr */
		    {
			ArrayList list = new6();
			push(goTo(1), list);
		    }
		    break;
                    case 7: /* reduce AIfThenElseExpr6 */
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;
                    case 8: /* reduce AArrayExpr6 */
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce AWhileExpr6 */
		    {
			ArrayList list = new9();
			push(goTo(2), list);
		    }
		    break;
                    case 10: /* reduce AForExpr6 */
		    {
			ArrayList list = new10();
			push(goTo(2), list);
		    }
		    break;
                    case 11: /* reduce AExprExpr6 */
		    {
			ArrayList list = new11();
			push(goTo(2), list);
		    }
		    break;
                    case 12: /* reduce AAssignExpr5 */
		    {
			ArrayList list = new12();
			push(goTo(3), list);
		    }
		    break;
                    case 13: /* reduce AExprExpr5 */
		    {
			ArrayList list = new13();
			push(goTo(3), list);
		    }
		    break;
                    case 14: /* reduce AAndExpr4 */
		    {
			ArrayList list = new14();
			push(goTo(4), list);
		    }
		    break;
                    case 15: /* reduce AOrExpr4 */
		    {
			ArrayList list = new15();
			push(goTo(4), list);
		    }
		    break;
                    case 16: /* reduce AExprExpr4 */
		    {
			ArrayList list = new16();
			push(goTo(4), list);
		    }
		    break;
                    case 17: /* reduce AEqualsExpr3 */
		    {
			ArrayList list = new17();
			push(goTo(5), list);
		    }
		    break;
                    case 18: /* reduce ANotEqualsExpr3 */
		    {
			ArrayList list = new18();
			push(goTo(5), list);
		    }
		    break;
                    case 19: /* reduce ALessExpr3 */
		    {
			ArrayList list = new19();
			push(goTo(5), list);
		    }
		    break;
                    case 20: /* reduce ALessOrEqualExpr3 */
		    {
			ArrayList list = new20();
			push(goTo(5), list);
		    }
		    break;
                    case 21: /* reduce AGreaterExpr3 */
		    {
			ArrayList list = new21();
			push(goTo(5), list);
		    }
		    break;
                    case 22: /* reduce AGreaterOrEqualExpr3 */
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;
                    case 23: /* reduce AExprExpr3 */
		    {
			ArrayList list = new23();
			push(goTo(5), list);
		    }
		    break;
                    case 24: /* reduce APlusExpr2 */
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;
                    case 25: /* reduce AMinusExpr2 */
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;
                    case 26: /* reduce AExprExpr2 */
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;
                    case 27: /* reduce AMultiplyExpr1 */
		    {
			ArrayList list = new27();
			push(goTo(7), list);
		    }
		    break;
                    case 28: /* reduce ADivideExpr1 */
		    {
			ArrayList list = new28();
			push(goTo(7), list);
		    }
		    break;
                    case 29: /* reduce AExprExpr1 */
		    {
			ArrayList list = new29();
			push(goTo(7), list);
		    }
		    break;
                    case 30: /* reduce AStrExpr0 */
		    {
			ArrayList list = new30();
			push(goTo(8), list);
		    }
		    break;
                    case 31: /* reduce AIntExpr0 */
		    {
			ArrayList list = new31();
			push(goTo(8), list);
		    }
		    break;
                    case 32: /* reduce ANilExpr0 */
		    {
			ArrayList list = new32();
			push(goTo(8), list);
		    }
		    break;
                    case 33: /* reduce ALvalueExpr0 */
		    {
			ArrayList list = new33();
			push(goTo(8), list);
		    }
		    break;
                    case 34: /* reduce ANegitiveExpr0 */
		    {
			ArrayList list = new34();
			push(goTo(8), list);
		    }
		    break;
                    case 35: /* reduce AAmethodexpr01Expr0 */
		    {
			ArrayList list = new35();
			push(goTo(8), list);
		    }
		    break;
                    case 36: /* reduce AAmethodexpr02Expr0 */
		    {
			ArrayList list = new36();
			push(goTo(8), list);
		    }
		    break;
                    case 37: /* reduce AAseqexpr01Expr0 */
		    {
			ArrayList list = new37();
			push(goTo(8), list);
		    }
		    break;
                    case 38: /* reduce AAseqexpr02Expr0 */
		    {
			ArrayList list = new38();
			push(goTo(8), list);
		    }
		    break;
                    case 39: /* reduce AArecordexpr01Expr0 */
		    {
			ArrayList list = new39();
			push(goTo(8), list);
		    }
		    break;
                    case 40: /* reduce AArecordexpr02Expr0 */
		    {
			ArrayList list = new40();
			push(goTo(8), list);
		    }
		    break;
                    case 41: /* reduce ABreakExpr0 */
		    {
			ArrayList list = new41();
			push(goTo(8), list);
		    }
		    break;
                    case 42: /* reduce AAletexpr01Expr0 */
		    {
			ArrayList list = new42();
			push(goTo(8), list);
		    }
		    break;
                    case 43: /* reduce AAletexpr02Expr0 */
		    {
			ArrayList list = new43();
			push(goTo(8), list);
		    }
		    break;
                    case 44: /* reduce ASingleExprSeq */
		    {
			ArrayList list = new44();
			push(goTo(9), list);
		    }
		    break;
                    case 45: /* reduce AListExprSeq */
		    {
			ArrayList list = new45();
			push(goTo(9), list);
		    }
		    break;
                    case 46: /* reduce ASingleExprList */
		    {
			ArrayList list = new46();
			push(goTo(10), list);
		    }
		    break;
                    case 47: /* reduce AListExprList */
		    {
			ArrayList list = new47();
			push(goTo(10), list);
		    }
		    break;
                    case 48: /* reduce ASingleFieldList */
		    {
			ArrayList list = new48();
			push(goTo(11), list);
		    }
		    break;
                    case 49: /* reduce AListFieldList */
		    {
			ArrayList list = new49();
			push(goTo(11), list);
		    }
		    break;
                    case 50: /* reduce ASingleLvalue */
		    {
			ArrayList list = new50();
			push(goTo(12), list);
		    }
		    break;
                    case 51: /* reduce AMultiLvalue */
		    {
			ArrayList list = new51();
			push(goTo(12), list);
		    }
		    break;
                    case 52: /* reduce AListMultiLvalue */
		    {
			ArrayList list = new52();
			push(goTo(13), list);
		    }
		    break;
                    case 53: /* reduce ASingleMultiLvalue */
		    {
			ArrayList list = new53();
			push(goTo(13), list);
		    }
		    break;
                    case 54: /* reduce AMultiMultiLvalue */
		    {
			ArrayList list = new54();
			push(goTo(13), list);
		    }
		    break;
                    case 55: /* reduce AField */
		    {
			ArrayList list = new55();
			push(goTo(14), list);
		    }
		    break;
                    case 56: /* reduce ASingleDeclarationList */
		    {
			ArrayList list = new56();
			push(goTo(15), list);
		    }
		    break;
                    case 57: /* reduce AListDeclarationList */
		    {
			ArrayList list = new57();
			push(goTo(15), list);
		    }
		    break;
                    case 58: /* reduce ATypeDeclaration */
		    {
			ArrayList list = new58();
			push(goTo(16), list);
		    }
		    break;
                    case 59: /* reduce AVariableNontypedDeclaration */
		    {
			ArrayList list = new59();
			push(goTo(16), list);
		    }
		    break;
                    case 60: /* reduce AVariableTypedDeclaration */
		    {
			ArrayList list = new60();
			push(goTo(16), list);
		    }
		    break;
                    case 61: /* reduce AAmethodproceduredeclaration1Declaration */
		    {
			ArrayList list = new61();
			push(goTo(16), list);
		    }
		    break;
                    case 62: /* reduce AAmethodproceduredeclaration2Declaration */
		    {
			ArrayList list = new62();
			push(goTo(16), list);
		    }
		    break;
                    case 63: /* reduce AAmethodfunctiondeclaration1Declaration */
		    {
			ArrayList list = new63();
			push(goTo(16), list);
		    }
		    break;
                    case 64: /* reduce AAmethodfunctiondeclaration2Declaration */
		    {
			ArrayList list = new64();
			push(goTo(16), list);
		    }
		    break;
                    case 65: /* reduce ASingleSimpleTypeCombination */
		    {
			ArrayList list = new65();
			push(goTo(17), list);
		    }
		    break;
                    case 66: /* reduce AArraySimpleTypeCombination */
		    {
			ArrayList list = new66();
			push(goTo(17), list);
		    }
		    break;
                    case 67: /* reduce ASimpleTypeCombinationTypeCombination */
		    {
			ArrayList list = new67();
			push(goTo(18), list);
		    }
		    break;
                    case 68: /* reduce AArecordtypecombination1TypeCombination */
		    {
			ArrayList list = new68();
			push(goTo(18), list);
		    }
		    break;
                    case 69: /* reduce AArecordtypecombination2TypeCombination */
		    {
			ArrayList list = new69();
			push(goTo(18), list);
		    }
		    break;
                    case 70: /* reduce ASingleTypeFields */
		    {
			ArrayList list = new70();
			push(goTo(19), list);
		    }
		    break;
                    case 71: /* reduce AListTypeFields */
		    {
			ArrayList list = new71();
			push(goTo(19), list);
		    }
		    break;
                    case 72: /* reduce ATypeField */
		    {
			ArrayList list = new72();
			push(goTo(20), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PExpr node1 = (PExpr) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AGrammar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AIfThenExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        {
            // Block
            Level += 1;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
            Level += 1;
        }

        pexprNode4 = new ASeqExpr(listNode5);
        if (Level == 0){
            pexprNode4.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode4.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode5.getLine() < line){
                line = listNode5.getLine();
                pos = listNode5.getPos();
            }
            else if (listNode5.getLine() == line && listNode5.getPos() < pos){
                pos = listNode5.getPos();
            }
        }
        }

        pexprNode1 = new AIfExpr(pexprNode2, pexprNode3, pexprNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AIfThenElseExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AIfExpr(pexprNode2, pexprNode3, pexprNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AArrayExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AArrayExpr(tidNode2, pexprNode3, pexprNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AWhileExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new AWhileExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AForExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        PExpr pexprNode5;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);
        pexprNode5 = (PExpr)nodeArrayList8.get(0);

        pexprNode1 = new AForExpr(tidNode2, pexprNode3, pexprNode4, pexprNode5);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
            if (pexprNode5.getLine() < line){
                line = pexprNode5.getLine();
                pos = pexprNode5.getPos();
            }
            else if (pexprNode5.getLine() == line && pexprNode5.getPos() < pos){
                pos = pexprNode5.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AExprExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AIfThenElseExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AIfExpr(pexprNode2, pexprNode3, pexprNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AArrayExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AArrayExpr(tidNode2, pexprNode3, pexprNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AWhileExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new AWhileExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AForExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        PExpr pexprNode5;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);
        pexprNode5 = (PExpr)nodeArrayList8.get(0);

        pexprNode1 = new AForExpr(tidNode2, pexprNode3, pexprNode4, pexprNode5);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
            if (pexprNode5.getLine() < line){
                line = pexprNode5.getLine();
                pos = pexprNode5.getPos();
            }
            else if (pexprNode5.getLine() == line && pexprNode5.getPos() < pos){
                pos = pexprNode5.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AExprExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAssignExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PLvalue plvalueNode2;
        PExpr pexprNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAssignExpr(plvalueNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (plvalueNode2.getLine() < line){
                line = plvalueNode2.getLine();
                pos = plvalueNode2.getPos();
            }
            else if (plvalueNode2.getLine() == line && plvalueNode2.getPos() < pos){
                pos = plvalueNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AExprExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAndExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAndExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AOrExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AExprExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AEqualsExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AEqualsExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ANotEqualsExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ANotEqualsExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ALessExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALessExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ALessOrEqualExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALessOrEqualExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AGreaterExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGreaterExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AGreaterOrEqualExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGreaterOrEqualExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AExprExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce APlusExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AMinusExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AExprExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AMultiplyExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultiplyExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ADivideExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivideExpr(pexprNode2, pexprNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AExprExpr1 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AStrExpr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TStr tstrNode2;
        tstrNode2 = (TStr)nodeArrayList1.get(0);

        pexprNode1 = new AStrExpr(tstrNode2);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tstrNode2.getLine() < line){
                line = tstrNode2.getLine();
                pos = tstrNode2.getPos();
            }
            else if (tstrNode2.getLine() == line && tstrNode2.getPos() < pos){
                pos = tstrNode2.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AIntExpr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pexprNode1 = new AIntExpr(tintNode2);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tintNode2.getLine() < line){
                line = tintNode2.getLine();
                pos = tintNode2.getPos();
            }
            else if (tintNode2.getLine() == line && tintNode2.getPos() < pos){
                pos = tintNode2.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ANilExpr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;

        pexprNode1 = new ANilExpr();
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ALvalueExpr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PLvalue plvalueNode2;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);

        pexprNode1 = new ALvalueExpr(plvalueNode2);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (plvalueNode2.getLine() < line){
                line = plvalueNode2.getLine();
                pos = plvalueNode2.getPos();
            }
            else if (plvalueNode2.getLine() == line && plvalueNode2.getPos() < pos){
                pos = plvalueNode2.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ANegitiveExpr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ANegitiveExpr(pexprNode2);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (pexprNode2.getLine() < line){
                line = pexprNode2.getLine();
                pos = pexprNode2.getPos();
            }
            else if (pexprNode2.getLine() == line && pexprNode2.getPos() < pos){
                pos = pexprNode2.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AAmethodexpr01Expr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
            Level += 1;
        }

        pexprNode1 = new AMethodExpr(tidNode2, listNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (listNode3.getLine() < line){
                line = listNode3.getLine();
                pos = listNode3.getPos();
            }
            else if (listNode3.getLine() == line && listNode3.getPos() < pos){
                pos = listNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAmethodexpr02Expr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
            Level += 1;
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexprNode1 = new AMethodExpr(tidNode2, listNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (listNode4.getLine() < line){
                line = listNode4.getLine();
                pos = listNode4.getPos();
            }
            else if (listNode4.getLine() == line && listNode4.getPos() < pos){
                pos = listNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAseqexpr01Expr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        LinkedList listNode2 = new LinkedList();
        {
            // Block
            Level += 1;
        }

        pexprNode1 = new ASeqExpr(listNode2);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode2.getLine() < line){
                line = listNode2.getLine();
                pos = listNode2.getPos();
            }
            else if (listNode2.getLine() == line && listNode2.getPos() < pos){
                pos = listNode2.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAseqexpr02Expr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
            Level += 1;
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pexprNode1 = new ASeqExpr(listNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode3.getLine() < line){
                line = listNode3.getLine();
                pos = listNode3.getPos();
            }
            else if (listNode3.getLine() == line && listNode3.getPos() < pos){
                pos = listNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AArecordexpr01Expr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
            Level += 1;
        }

        pexprNode1 = new ARecordExpr(tidNode2, listNode3);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (listNode3.getLine() < line){
                line = listNode3.getLine();
                pos = listNode3.getPos();
            }
            else if (listNode3.getLine() == line && listNode3.getPos() < pos){
                pos = listNode3.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AArecordexpr02Expr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
            Level += 1;
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexprNode1 = new ARecordExpr(tidNode2, listNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (listNode4.getLine() < line){
                line = listNode4.getLine();
                pos = listNode4.getPos();
            }
            else if (listNode4.getLine() == line && listNode4.getPos() < pos){
                pos = listNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ABreakExpr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;

        pexprNode1 = new ABreakExpr();
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAletexpr01Expr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        LinkedList listNode3 = new LinkedList();
        PExpr pexprNode4;
        {
            // Block
            Level += 1;
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
            Level += 1;
        LinkedList listNode5 = new LinkedList();
        {
            // Block
            Level += 1;
        }

        pexprNode4 = new ASeqExpr(listNode5);
        if (Level == 0){
            pexprNode4.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode4.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode5.getLine() < line){
                line = listNode5.getLine();
                pos = listNode5.getPos();
            }
            else if (listNode5.getLine() == line && listNode5.getPos() < pos){
                pos = listNode5.getPos();
            }
        }
        }

        pexprNode1 = new ALetExpr(listNode3, pexprNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode3.getLine() < line){
                line = listNode3.getLine();
                pos = listNode3.getPos();
            }
            else if (listNode3.getLine() == line && listNode3.getPos() < pos){
                pos = listNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AAletexpr02Expr0 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
            Level += 1;
        LinkedList listNode3 = new LinkedList();
        PExpr pexprNode4;
        {
            // Block
            Level += 1;
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
            Level += 1;
        LinkedList listNode6 = new LinkedList();
        {
            // Block
            Level += 1;
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexprNode4 = new ASeqExpr(listNode6);
        if (Level == 0){
            pexprNode4.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode4.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode6.getLine() < line){
                line = listNode6.getLine();
                pos = listNode6.getPos();
            }
            else if (listNode6.getLine() == line && listNode6.getPos() < pos){
                pos = listNode6.getPos();
            }
        }
        }

        pexprNode1 = new ALetExpr(listNode3, pexprNode4);
        if (Level == 0){
            pexprNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pexprNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode3.getLine() < line){
                line = listNode3.getLine();
                pos = listNode3.getPos();
            }
            else if (listNode3.getLine() == line && listNode3.getPos() < pos){
                pos = listNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ASingleExprSeq */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
            Level += 1;
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AListExprSeq */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
            Level += 1;
        LinkedList listNode1 = new LinkedList();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ASingleExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
            Level += 1;
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AListExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
            Level += 1;
        LinkedList listNode1 = new LinkedList();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ASingleFieldList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
            Level += 1;
        PField pfieldNode1;
        pfieldNode1 = (PField)nodeArrayList1.get(0);
	if(pfieldNode1 != null)
	{
	  listNode2.add(pfieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AListFieldList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
            Level += 1;
        LinkedList listNode1 = new LinkedList();
        PField pfieldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfieldNode2 = (PField)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfieldNode2 != null)
	{
	  listNode3.add(pfieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ASingleLvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plvalueNode1 = new ASingleLvalue(tidNode2);
        if (Level == 0){
            plvalueNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            plvalueNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
        }
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AMultiLvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        plvalueNode1 = (PLvalue)nodeArrayList1.get(0);
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AListMultiLvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
            Level += 1;
        PLvalue plvalueNode2;
        TId tidNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        plvalueNode1 = new AListLvalue(plvalueNode2, tidNode3);
        if (Level == 0){
            plvalueNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            plvalueNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (plvalueNode2.getLine() < line){
                line = plvalueNode2.getLine();
                pos = plvalueNode2.getPos();
            }
            else if (plvalueNode2.getLine() == line && plvalueNode2.getPos() < pos){
                pos = plvalueNode2.getPos();
            }
            if (tidNode3.getLine() < line){
                line = tidNode3.getLine();
                pos = tidNode3.getPos();
            }
            else if (tidNode3.getLine() == line && tidNode3.getPos() < pos){
                pos = tidNode3.getPos();
            }
        }
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce ASingleMultiLvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
            Level += 1;
        PLvalue plvalueNode2;
        PExpr pexprNode4;
        {
            // Block
            Level += 1;
        TId tidNode3;
        tidNode3 = (TId)nodeArrayList1.get(0);

        plvalueNode2 = new ASingleLvalue(tidNode3);
        if (Level == 0){
            plvalueNode2.setLine(((Node) nodeArrayList1.get(0)).getLine());
            plvalueNode2.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode3.getLine() < line){
                line = tidNode3.getLine();
                pos = tidNode3.getPos();
            }
            else if (tidNode3.getLine() == line && tidNode3.getPos() < pos){
                pos = tidNode3.getPos();
            }
        }
        }
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        plvalueNode1 = new AArrayLvalue(plvalueNode2, pexprNode4);
        if (Level == 0){
            plvalueNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            plvalueNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (plvalueNode2.getLine() < line){
                line = plvalueNode2.getLine();
                pos = plvalueNode2.getPos();
            }
            else if (plvalueNode2.getLine() == line && plvalueNode2.getPos() < pos){
                pos = plvalueNode2.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AMultiMultiLvalue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
            Level += 1;
        PLvalue plvalueNode2;
        PExpr pexprNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        plvalueNode1 = new AArrayLvalue(plvalueNode2, pexprNode3);
        if (Level == 0){
            plvalueNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            plvalueNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (plvalueNode2.getLine() < line){
                line = plvalueNode2.getLine();
                pos = plvalueNode2.getPos();
            }
            else if (plvalueNode2.getLine() == line && plvalueNode2.getPos() < pos){
                pos = plvalueNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PField pfieldNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        PExpr pexprNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pfieldNode1 = new AField(tidNode2, pexprNode3);
        if (Level == 0){
            pfieldNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pfieldNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (pexprNode3.getLine() < line){
                line = pexprNode3.getLine();
                pos = pexprNode3.getPos();
            }
            else if (pexprNode3.getLine() == line && pexprNode3.getPos() < pos){
                pos = pexprNode3.getPos();
            }
        }
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ASingleDeclarationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
            Level += 1;
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	if(pdeclarationNode1 != null)
	{
	  listNode2.add(pdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AListDeclarationList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
            Level += 1;
        LinkedList listNode1 = new LinkedList();
        PDeclaration pdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationNode2 = (PDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationNode2 != null)
	{
	  listNode3.add(pdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce ATypeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        PTypeCombination ptypecombinationNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        ptypecombinationNode3 = (PTypeCombination)nodeArrayList4.get(0);

        pdeclarationNode1 = new ATypeDeclaration(tidNode2, ptypecombinationNode3);
        if (Level == 0){
            pdeclarationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pdeclarationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (ptypecombinationNode3.getLine() < line){
                line = ptypecombinationNode3.getLine();
                pos = ptypecombinationNode3.getPos();
            }
            else if (ptypecombinationNode3.getLine() == line && ptypecombinationNode3.getPos() < pos){
                pos = ptypecombinationNode3.getPos();
            }
        }
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AVariableNontypedDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PExpr pexprNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList4.get(0);

        pdeclarationNode1 = new AVariableDeclaration(tidNode2, null, pexprNode4);
        if (Level == 0){
            pdeclarationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pdeclarationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AVariableTypedDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        PTypeCombination ptypecombinationNode3;
        PExpr pexprNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        ptypecombinationNode3 = (PTypeCombination)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);

        pdeclarationNode1 = new AVariableDeclaration(tidNode2, ptypecombinationNode3, pexprNode4);
        if (Level == 0){
            pdeclarationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pdeclarationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (ptypecombinationNode3.getLine() < line){
                line = ptypecombinationNode3.getLine();
                pos = ptypecombinationNode3.getPos();
            }
            else if (ptypecombinationNode3.getLine() == line && ptypecombinationNode3.getPos() < pos){
                pos = ptypecombinationNode3.getPos();
            }
            if (pexprNode4.getLine() < line){
                line = pexprNode4.getLine();
                pos = pexprNode4.getPos();
            }
            else if (pexprNode4.getLine() == line && pexprNode4.getPos() < pos){
                pos = pexprNode4.getPos();
            }
        }
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAmethodproceduredeclaration1Declaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode4 = null;
        PExpr pexprNode5;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
            Level += 1;
        }
        pexprNode5 = (PExpr)nodeArrayList6.get(0);

        pdeclarationNode1 = new AMethodDeclaration(tidNode2, listNode3, null, pexprNode5);
        if (Level == 0){
            pdeclarationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pdeclarationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (listNode3.getLine() < line){
                line = listNode3.getLine();
                pos = listNode3.getPos();
            }
            else if (listNode3.getLine() == line && listNode3.getPos() < pos){
                pos = listNode3.getPos();
            }
            if (pexprNode5.getLine() < line){
                line = pexprNode5.getLine();
                pos = pexprNode5.getPos();
            }
            else if (pexprNode5.getLine() == line && pexprNode5.getPos() < pos){
                pos = pexprNode5.getPos();
            }
        }
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAmethodproceduredeclaration2Declaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        PExpr pexprNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
            Level += 1;
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexprNode6 = (PExpr)nodeArrayList7.get(0);

        pdeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, null, pexprNode6);
        if (Level == 0){
            pdeclarationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pdeclarationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (listNode4.getLine() < line){
                line = listNode4.getLine();
                pos = listNode4.getPos();
            }
            else if (listNode4.getLine() == line && listNode4.getPos() < pos){
                pos = listNode4.getPos();
            }
            if (pexprNode6.getLine() < line){
                line = pexprNode6.getLine();
                pos = pexprNode6.getPos();
            }
            else if (pexprNode6.getLine() == line && pexprNode6.getPos() < pos){
                pos = pexprNode6.getPos();
            }
        }
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AAmethodfunctiondeclaration1Declaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        PTypeCombination ptypecombinationNode4;
        PExpr pexprNode5;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
            Level += 1;
        }
        ptypecombinationNode4 = (PTypeCombination)nodeArrayList6.get(0);
        pexprNode5 = (PExpr)nodeArrayList8.get(0);

        pdeclarationNode1 = new AMethodDeclaration(tidNode2, listNode3, ptypecombinationNode4, pexprNode5);
        if (Level == 0){
            pdeclarationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pdeclarationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (listNode3.getLine() < line){
                line = listNode3.getLine();
                pos = listNode3.getPos();
            }
            else if (listNode3.getLine() == line && listNode3.getPos() < pos){
                pos = listNode3.getPos();
            }
            if (ptypecombinationNode4.getLine() < line){
                line = ptypecombinationNode4.getLine();
                pos = ptypecombinationNode4.getPos();
            }
            else if (ptypecombinationNode4.getLine() == line && ptypecombinationNode4.getPos() < pos){
                pos = ptypecombinationNode4.getPos();
            }
            if (pexprNode5.getLine() < line){
                line = pexprNode5.getLine();
                pos = pexprNode5.getPos();
            }
            else if (pexprNode5.getLine() == line && pexprNode5.getPos() < pos){
                pos = pexprNode5.getPos();
            }
        }
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce AAmethodfunctiondeclaration2Declaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PTypeCombination ptypecombinationNode5;
        PExpr pexprNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
            Level += 1;
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypecombinationNode5 = (PTypeCombination)nodeArrayList7.get(0);
        pexprNode6 = (PExpr)nodeArrayList9.get(0);

        pdeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, ptypecombinationNode5, pexprNode6);
        if (Level == 0){
            pdeclarationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            pdeclarationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (listNode4.getLine() < line){
                line = listNode4.getLine();
                pos = listNode4.getPos();
            }
            else if (listNode4.getLine() == line && listNode4.getPos() < pos){
                pos = listNode4.getPos();
            }
            if (ptypecombinationNode5.getLine() < line){
                line = ptypecombinationNode5.getLine();
                pos = ptypecombinationNode5.getPos();
            }
            else if (ptypecombinationNode5.getLine() == line && ptypecombinationNode5.getPos() < pos){
                pos = ptypecombinationNode5.getPos();
            }
            if (pexprNode6.getLine() < line){
                line = pexprNode6.getLine();
                pos = pexprNode6.getPos();
            }
            else if (pexprNode6.getLine() == line && pexprNode6.getPos() < pos){
                pos = pexprNode6.getPos();
            }
        }
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ASingleSimpleTypeCombination */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeCombination ptypecombinationNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypecombinationNode1 = new ASingleTypeCombination(tidNode2);
        if (Level == 0){
            ptypecombinationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            ptypecombinationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
        }
        }
	nodeList.add(ptypecombinationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AArraySimpleTypeCombination */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeCombination ptypecombinationNode1;
        {
            // Block
            Level += 1;
        PTypeCombination ptypecombinationNode2;
        ptypecombinationNode2 = (PTypeCombination)nodeArrayList3.get(0);

        ptypecombinationNode1 = new AArrayTypeCombination(ptypecombinationNode2);
        if (Level == 0){
            ptypecombinationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            ptypecombinationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (ptypecombinationNode2.getLine() < line){
                line = ptypecombinationNode2.getLine();
                pos = ptypecombinationNode2.getPos();
            }
            else if (ptypecombinationNode2.getLine() == line && ptypecombinationNode2.getPos() < pos){
                pos = ptypecombinationNode2.getPos();
            }
        }
        }
	nodeList.add(ptypecombinationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ASimpleTypeCombinationTypeCombination */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeCombination ptypecombinationNode1;
        ptypecombinationNode1 = (PTypeCombination)nodeArrayList1.get(0);
	nodeList.add(ptypecombinationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AArecordtypecombination1TypeCombination */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeCombination ptypecombinationNode1;
        {
            // Block
            Level += 1;
        LinkedList listNode2 = new LinkedList();
        {
            // Block
            Level += 1;
        }

        ptypecombinationNode1 = new ARecordTypeCombination(listNode2);
        if (Level == 0){
            ptypecombinationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            ptypecombinationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode2.getLine() < line){
                line = listNode2.getLine();
                pos = listNode2.getPos();
            }
            else if (listNode2.getLine() == line && listNode2.getPos() < pos){
                pos = listNode2.getPos();
            }
        }
        }
	nodeList.add(ptypecombinationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AArecordtypecombination2TypeCombination */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeCombination ptypecombinationNode1;
        {
            // Block
            Level += 1;
        LinkedList listNode3 = new LinkedList();
        {
            // Block
            Level += 1;
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ptypecombinationNode1 = new ARecordTypeCombination(listNode3);
        if (Level == 0){
            ptypecombinationNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            ptypecombinationNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (listNode3.getLine() < line){
                line = listNode3.getLine();
                pos = listNode3.getPos();
            }
            else if (listNode3.getLine() == line && listNode3.getPos() < pos){
                pos = listNode3.getPos();
            }
        }
        }
	nodeList.add(ptypecombinationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ASingleTypeFields */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
            Level += 1;
        PTypeField ptypefieldNode1;
        ptypefieldNode1 = (PTypeField)nodeArrayList1.get(0);
	if(ptypefieldNode1 != null)
	{
	  listNode2.add(ptypefieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AListTypeFields */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
            Level += 1;
        LinkedList listNode1 = new LinkedList();
        PTypeField ptypefieldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptypefieldNode2 = (PTypeField)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptypefieldNode2 != null)
	{
	  listNode3.add(ptypefieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ATypeField */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();
        int Level = -1;

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeField ptypefieldNode1;
        {
            // Block
            Level += 1;
        TId tidNode2;
        PTypeCombination ptypecombinationNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypecombinationNode3 = (PTypeCombination)nodeArrayList3.get(0);

        ptypefieldNode1 = new ATypeField(tidNode2, ptypecombinationNode3);
        if (Level == 0){
            ptypefieldNode1.setLine(((Node) nodeArrayList1.get(0)).getLine());
            ptypefieldNode1.setPos(((Node) nodeArrayList1.get(0)).getPos());
        }
        else{
            int line = last_line;
            int pos = last_pos;
            if (tidNode2.getLine() < line){
                line = tidNode2.getLine();
                pos = tidNode2.getPos();
            }
            else if (tidNode2.getLine() == line && tidNode2.getPos() < pos){
                pos = tidNode2.getPos();
            }
            if (ptypecombinationNode3.getLine() < line){
                line = ptypecombinationNode3.getLine();
                pos = ptypecombinationNode3.getPos();
            }
            else if (ptypecombinationNode3.getLine() == line && ptypecombinationNode3.getPos() < pos){
                pos = ptypecombinationNode3.getPos();
            }
        }
        }
	nodeList.add(ptypefieldNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 2}, {40, SHIFT, 22}, },
			{{-1, ERROR, 3}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 4}, {6, SHIFT, 24}, {14, SHIFT, 25}, {15, SHIFT, 26}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 6}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 7}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {21, SHIFT, 30}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 8}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 50}, {20, SHIFT, 36}, {22, SHIFT, 37}, {24, SHIFT, 38}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 12}, {51, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 16}, {37, SHIFT, 39}, {38, SHIFT, 40}, },
			{{-1, REDUCE, 23}, {27, SHIFT, 41}, {28, SHIFT, 42}, {31, SHIFT, 43}, {32, SHIFT, 44}, {33, SHIFT, 45}, {34, SHIFT, 46}, {35, SHIFT, 47}, {36, SHIFT, 48}, },
			{{-1, REDUCE, 26}, {29, SHIFT, 49}, {30, SHIFT, 50}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 33}, {26, SHIFT, 51}, {39, SHIFT, 52}, },
			{{-1, REDUCE, 51}, {22, SHIFT, 53}, },
			{{-1, ERROR, 22}, {39, SHIFT, 54}, },
			{{-1, ERROR, 23}, {12, SHIFT, 55}, },
			{{-1, ERROR, 24}, {40, SHIFT, 56}, },
			{{-1, ERROR, 25}, {40, SHIFT, 57}, },
			{{-1, ERROR, 26}, {40, SHIFT, 58}, },
			{{-1, ERROR, 27}, {6, SHIFT, 24}, {8, SHIFT, 59}, {14, SHIFT, 25}, {15, SHIFT, 26}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 29}, {2, SHIFT, 61}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 32}, {19, SHIFT, 62}, {21, SHIFT, 63}, },
			{{-1, REDUCE, 50}, {20, SHIFT, 36}, {22, SHIFT, 64}, {24, SHIFT, 38}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, {26, SHIFT, 51}, },
			{{-1, ERROR, 36}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {21, SHIFT, 65}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 37}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 38}, {25, SHIFT, 69}, {40, SHIFT, 70}, },
			{{-1, ERROR, 39}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 40}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 41}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 42}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 43}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 44}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 45}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 46}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 47}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 48}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 49}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 50}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 51}, {40, SHIFT, 85}, },
			{{-1, ERROR, 52}, {1, SHIFT, 1}, {9, SHIFT, 4}, {10, SHIFT, 5}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 33}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 53}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 54}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 55}, {1, SHIFT, 1}, {5, SHIFT, 89}, {7, SHIFT, 90}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 91}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 92}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 56}, {20, SHIFT, 96}, },
			{{-1, ERROR, 57}, {31, SHIFT, 97}, },
			{{-1, ERROR, 58}, {18, SHIFT, 98}, {39, SHIFT, 99}, },
			{{-1, ERROR, 59}, {1, SHIFT, 1}, {4, SHIFT, 100}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 61}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 62}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 64}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 67}, {17, SHIFT, 105}, {21, SHIFT, 106}, },
			{{-1, ERROR, 68}, {23, SHIFT, 107}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 70}, {31, SHIFT, 108}, },
			{{-1, ERROR, 71}, {17, SHIFT, 109}, {25, SHIFT, 110}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 24}, {29, SHIFT, 49}, {30, SHIFT, 50}, },
			{{-1, REDUCE, 25}, {29, SHIFT, 49}, {30, SHIFT, 50}, },
			{{-1, REDUCE, 17}, {27, SHIFT, 41}, {28, SHIFT, 42}, },
			{{-1, REDUCE, 18}, {27, SHIFT, 41}, {28, SHIFT, 42}, },
			{{-1, REDUCE, 19}, {27, SHIFT, 41}, {28, SHIFT, 42}, },
			{{-1, REDUCE, 20}, {27, SHIFT, 41}, {28, SHIFT, 42}, },
			{{-1, REDUCE, 21}, {27, SHIFT, 41}, {28, SHIFT, 42}, },
			{{-1, REDUCE, 22}, {27, SHIFT, 41}, {28, SHIFT, 42}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 87}, {23, SHIFT, 111}, },
			{{-1, ERROR, 88}, {13, SHIFT, 112}, },
			{{-1, ERROR, 89}, {40, SHIFT, 113}, },
			{{-1, ERROR, 90}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 91}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 50}, {20, SHIFT, 36}, {22, SHIFT, 116}, {24, SHIFT, 38}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 94}, {3, SHIFT, 117}, },
			{{-1, REDUCE, 6}, {3, REDUCE, 11}, },
			{{-1, ERROR, 96}, {21, SHIFT, 118}, {40, SHIFT, 119}, },
			{{-1, ERROR, 97}, {0, SHIFT, 122}, {24, SHIFT, 123}, {40, SHIFT, 124}, },
			{{-1, ERROR, 98}, {0, SHIFT, 122}, {40, SHIFT, 124}, },
			{{-1, ERROR, 99}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 101}, {4, SHIFT, 129}, {19, SHIFT, 62}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 104}, {23, SHIFT, 130}, },
			{{-1, ERROR, 105}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 53}, {11, SHIFT, 132}, },
			{{-1, ERROR, 108}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 109}, {40, SHIFT, 70}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 112}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 113}, {39, SHIFT, 136}, },
			{{-1, ERROR, 114}, {12, SHIFT, 137}, },
			{{-1, ERROR, 115}, {2, SHIFT, 138}, },
			{{-1, ERROR, 116}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 117}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 118}, {18, SHIFT, 141}, {31, SHIFT, 142}, },
			{{-1, ERROR, 119}, {18, SHIFT, 143}, },
			{{-1, ERROR, 120}, {17, SHIFT, 144}, {21, SHIFT, 145}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 122}, {11, SHIFT, 146}, },
			{{-1, ERROR, 123}, {25, SHIFT, 147}, {40, SHIFT, 119}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 127}, {39, SHIFT, 149}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 132}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 135}, {2, SHIFT, 151}, },
			{{-1, ERROR, 136}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 137}, {1, SHIFT, 1}, {5, SHIFT, 89}, {7, SHIFT, 90}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 91}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 92}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 138}, {1, SHIFT, 1}, {5, SHIFT, 89}, {7, SHIFT, 90}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 91}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 92}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 139}, {23, SHIFT, 155}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 141}, {0, SHIFT, 122}, {40, SHIFT, 124}, },
			{{-1, ERROR, 142}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 143}, {0, SHIFT, 122}, {40, SHIFT, 124}, },
			{{-1, ERROR, 144}, {40, SHIFT, 119}, },
			{{-1, ERROR, 145}, {18, SHIFT, 160}, {31, SHIFT, 161}, },
			{{-1, ERROR, 146}, {0, SHIFT, 122}, {40, SHIFT, 124}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 148}, {17, SHIFT, 144}, {25, SHIFT, 163}, },
			{{-1, ERROR, 149}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 151}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 152}, {13, SHIFT, 166}, },
			{{-1, ERROR, 153}, {3, SHIFT, 167}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 53}, {11, SHIFT, 168}, },
			{{-1, ERROR, 156}, {31, SHIFT, 169}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 160}, {0, SHIFT, 122}, {40, SHIFT, 124}, },
			{{-1, ERROR, 161}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 166}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 167}, {1, SHIFT, 1}, {5, SHIFT, 89}, {7, SHIFT, 90}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 91}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 92}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 168}, {1, SHIFT, 1}, {5, SHIFT, 89}, {7, SHIFT, 90}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 91}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 92}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 169}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 170}, {31, SHIFT, 176}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 172}, {2, SHIFT, 177}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 176}, {1, SHIFT, 1}, {5, SHIFT, 2}, {7, SHIFT, 3}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 6}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 9}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, ERROR, 177}, {1, SHIFT, 1}, {5, SHIFT, 89}, {7, SHIFT, 90}, {9, SHIFT, 4}, {10, SHIFT, 5}, {16, SHIFT, 91}, {20, SHIFT, 7}, {28, SHIFT, 8}, {40, SHIFT, 92}, {41, SHIFT, 10}, {44, SHIFT, 11}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 10}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 12}, },
			{{-1, 31}, {0, 13}, {3, 23}, {6, 29}, {36, 66}, {37, 68}, {53, 87}, {54, 88}, {55, 93}, {61, 102}, {62, 103}, {64, 104}, {90, 114}, {91, 115}, {99, 128}, {105, 131}, {108, 133}, {112, 135}, {116, 139}, {117, 140}, {132, 150}, {136, 152}, {137, 93}, {138, 102}, {142, 157}, {149, 164}, {151, 165}, {161, 171}, {166, 172}, {167, 140}, {168, 150}, {169, 175}, {176, 178}, {177, 165}, },
			{{-1, 94}, {137, 153}, {138, 154}, {167, 173}, {168, 174}, {177, 179}, },
			{{-1, 14}, {55, 95}, {137, 95}, {138, 95}, {167, 95}, {168, 95}, {177, 95}, },
			{{-1, 15}, {52, 86}, },
			{{-1, 16}, {39, 73}, {40, 74}, },
			{{-1, 17}, {43, 77}, {44, 78}, {45, 79}, {46, 80}, {47, 81}, {48, 82}, },
			{{-1, 18}, {41, 75}, {42, 76}, },
			{{-1, 19}, {8, 34}, {49, 83}, {50, 84}, },
			{{-1, 32}, {59, 101}, },
			{{-1, 67}, },
			{{-1, 71}, },
			{{-1, 20}, {8, 35}, {39, 35}, {40, 35}, {41, 35}, {42, 35}, {43, 35}, {44, 35}, {45, 35}, {46, 35}, {47, 35}, {48, 35}, {49, 35}, {50, 35}, {52, 35}, },
			{{-1, 21}, },
			{{-1, 72}, {109, 134}, },
			{{-1, 27}, },
			{{-1, 28}, {27, 60}, },
			{{-1, 125}, {98, 127}, {141, 156}, {143, 158}, {146, 162}, {160, 170}, },
			{{-1, 126}, },
			{{-1, 120}, {123, 148}, },
			{{-1, 121}, {144, 159}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'break', 'for', 'if', 'let', 'nil', 'while', '(', '-', id, int, str",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', ']', '}', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', EOF",
			"expecting: id",
			"expecting: 'function', 'type', 'var'",
			"expecting: 'break', 'for', 'if', 'let', 'nil', 'while', '(', ')', '-', id, int, str",
			"expecting: 'break', 'let', 'nil', '(', '-', id, int, str",
			"expecting: 'do', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', '(', ')', '[', ']', '{', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', ':=', EOF",
			"expecting: EOF",
			"expecting: 'do', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', ']', '}', EOF",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', ']', '}', EOF",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', ']', '}', '&', '|', EOF",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', ']', '}', '+', '-', '=', '<>', '<', '<=', '>', '>=', '&', '|', EOF",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', ']', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', ':=', EOF",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', '[', ']', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', ':=', EOF",
			"expecting: ':='",
			"expecting: 'then'",
			"expecting: 'function', 'in', 'type', 'var'",
			"expecting: 'do'",
			"expecting: 'end', ';', ')'",
			"expecting: ';', ')'",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', '(', ')', '[', ']', '{', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', EOF",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', ']', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', EOF",
			"expecting: '}', id",
			"expecting: '('",
			"expecting: '='",
			"expecting: ':', ':='",
			"expecting: 'break', 'end', 'for', 'if', 'let', 'nil', 'while', '(', '-', id, int, str",
			"expecting: ',', ')'",
			"expecting: ']'",
			"expecting: ',', '}'",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', ']', '}', '+', '-', '&', '|', EOF",
			"expecting: 'to'",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', '(', ')', '[', ']', '{', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', ':=', EOF",
			"expecting: 'else'",
			"expecting: ')', id",
			"expecting: 'array', '{', id",
			"expecting: 'array', id",
			"expecting: 'end', ';'",
			"expecting: 'do', 'end', 'function', 'in', 'of', 'then', 'to', 'type', 'var', ',', ';', ')', '[', ']', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', ':=', EOF",
			"expecting: ':', '='",
			"expecting: ':'",
			"expecting: ',', ')', '}'",
			"expecting: 'of'",
			"expecting: 'function', 'in', 'type', 'var', ',', ')', '}', '=', ':='",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'then', 'to', 'type', 'var', ',', ';', ')', '[', ']', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', EOF",
			"expecting: 'do', 'else', 'end', 'function', 'in', 'of', 'then', 'to', 'type', 'var', ',', ';', ')', '[', ']', '}', '.', '+', '-', '*', '/', '=', '<>', '<', '<=', '>', '>=', '&', '|', ':=', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 0, 3, 1, 0, 4, 5, 6, 1, 1, 7, 7, 8, 9, 10, 11, 1, 1, 12, 13, 14, 15, 2, 2, 2, 16, 16, 17, 1, 18, 19, 20, 1, 21, 4, 0, 22, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 0, 0, 0, 23, 24, 25, 26, 16, 0, 0, 1, 0, 1, 27, 27, 28, 1, 24, 29, 29, 9, 9, 1, 1, 30, 30, 30, 30, 30, 30, 1, 1, 13, 9, 28, 31, 2, 0, 0, 32, 8, 33, 9, 34, 35, 36, 0, 1, 37, 8, 18, 28, 0, 1, 38, 0, 2, 1, 13, 0, 14, 15, 17, 0, 0, 39, 40, 27, 41, 42, 22, 43, 16, 16, 14, 16, 1, 44, 27, 0, 29, 29, 17, 0, 0, 0, 28, 8, 36, 0, 36, 2, 39, 36, 16, 29, 0, 8, 0, 31, 33, 33, 45, 24, 16, 41, 41, 36, 0, 43, 16, 16, 8, 0, 0, 0, 0, 24, 16, 17, 33, 33, 16, 0, 0, 16, 33, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
