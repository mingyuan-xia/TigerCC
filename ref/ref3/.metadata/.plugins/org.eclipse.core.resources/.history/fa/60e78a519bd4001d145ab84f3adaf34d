//==========================================================================
//
//  File:        MethodBodyGenerator.java
//  Location:    TigerCompiler <Java>
//  Description: Generate the body for Function block
//  Version:     2008.12.28.
//  License:     BSD License
//
//  Copyright(C) F.R.C., All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//      * Redistributions of source code must retain the above copyright
//        notice, this list of conditions and the following disclaimer.
//      * Redistributions in binary form must reproduce the above copyright
//        notice, this list of conditions and the following disclaimer in the
//        documentation and/or other materials provided with the distribution.
//      * Neither the name of the the copyright holders nor the
//        names of its contributors may be used to endorse or promote products
//        derived from this software without specific prior written permission.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
//  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//==========================================================================

package Semantics.generator;

import static org.objectweb.asm.Opcodes.*;

import org.objectweb.asm.*;

import Semantics.verifier.VerifierBase.*;
import Syntax.node.*;

public class MethodBodyGenerator {
    public final String Name;
    
    protected final Generator cg;
    protected ClassWriter cw;

    protected final int THIS = 0;

    public MethodBodyGenerator(String name, MethodVisitor mv, final Generator cg, final BlockNamespace c, AMethodDeclaration cNode) {
        this.Name = name;
        this.cg = cg;

        Identifier methodId = c.GetIdentifier(cNode.getId().getText());
        MethodType mt = (MethodType) (methodId.Type);

        for (int i = 0; i < mt.Parameters.length; i += 1) {
            Identifier id = mt.Parameters[i];

            mv.visitVarInsn(ALOAD, THIS);

            if (id.Type instanceof IntType) {
                mv.visitVarInsn(ILOAD, i + 1);
            }
            else {
                mv.visitVarInsn(ALOAD, i + 1);
            }

            mv.visitFieldInsn(PUTFIELD, Name, id.SimpleName, cg.GetTypeJvmName(f.Type));
        }
    }
}
