
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 02 21:07:13 CST 2009
//----------------------------------------------------

package Parse;

import Absyn.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.Reader;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 02 21:07:13 CST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\006\000" +
    "\002\003\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\006\000\002\003\010\000\002\003\006\000\002\003" +
    "\010\000\002\003\006\000\002\003\012\000\002\003\003" +
    "\000\002\003\006\000\002\003\007\000\002\004\006\000" +
    "\002\004\005\000\002\004\003\000\002\004\006\000\002" +
    "\005\003\000\002\005\005\000\002\006\003\000\002\006" +
    "\005\000\002\007\005\000\002\007\007\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\004\000\002\013\003\000\002\013\004\000\002" +
    "\012\006\000\002\014\003\000\002\014\004\000\002\014" +
    "\005\000\002\014\005\000\002\015\005\000\002\015\007" +
    "\000\002\016\006\000\002\016\010\000\002\020\003\000" +
    "\002\020\004\000\002\017\010\000\002\017\011\000\002" +
    "\017\012\000\002\017\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\070\002\ufffe\011\ufffe\012\ufffe\013\ufffe\015" +
    "\ufffe\017\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe" +
    "\032\ufffe\034\ufffe\036\ufffe\040\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\001\002\000\030\004\015\005" +
    "\012\006\004\010\021\014\006\016\013\020\017\021\007" +
    "\027\005\033\011\043\014\001\002\000\004\004\214\001" +
    "\002\000\070\002\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd" +
    "\017\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd\032" +
    "\ufffd\034\ufffd\036\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\001\002\000\004\002\213\001\002" +
    "\000\032\004\015\005\012\006\004\010\021\014\006\016" +
    "\013\020\017\021\007\027\005\033\011\034\211\043\014" +
    "\001\002\000\070\002\uffff\011\uffff\012\uffff\013\uffff\015" +
    "\uffff\017\uffff\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff" +
    "\032\uffff\034\uffff\036\uffff\040\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\054\uffff\055\uffff\001\002\000\030\004\015\005" +
    "\012\006\004\010\021\014\006\016\013\020\017\021\007" +
    "\027\005\033\011\043\014\001\002\000\030\004\015\005" +
    "\012\006\004\010\021\014\006\016\013\020\017\021\007" +
    "\027\005\033\011\043\014\001\002\000\102\002\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\030\uffdd\032\uffdd\033\157\034\uffdd\035" +
    "\156\036\uffdd\037\155\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000\034" +
    "\002\000\042\033\043\034\044\040\045\036\046\032\047" +
    "\031\050\037\051\030\052\035\053\041\054\027\055\042" +
    "\001\002\000\010\015\072\025\070\026\067\001\002\000" +
    "\076\002\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\017\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\032\ufffc\034" +
    "\ufffc\035\022\036\ufffc\040\ufffc\041\024\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\023\001\002\000\070" +
    "\002\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\032\uffe2\034\uffe2" +
    "\036\uffe2\040\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\001\002\000\030\004\015\005\012\006\004\010" +
    "\021\014\006\016\013\020\017\021\007\027\005\033\011" +
    "\043\014\001\002\000\030\004\015\005\012\006\004\010" +
    "\021\014\006\016\013\020\017\021\007\027\005\033\011" +
    "\043\014\001\002\000\004\004\025\001\002\000\076\002" +
    "\uffde\011\uffde\012\uffde\013\uffde\015\uffde\017\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\030\uffde\032\uffde\034\uffde\035" +
    "\uffde\036\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\001\002\000\070\002\uffee" +
    "\011\uffee\012\uffee\013\uffee\015\uffee\017\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\030\uffee\032\uffee\034\uffee\036\uffee" +
    "\040\uffee\042\033\043\034\044\040\045\036\046\032\047" +
    "\031\050\037\051\030\052\035\053\041\054\027\055\042" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\066\002\uffef\011\uffef\012\uffef\013\uffef\015" +
    "\uffef\017\uffef\023\uffef\024\uffef\025\uffef\026\uffef\030\uffef" +
    "\032\uffef\034\uffef\036\uffef\040\uffef\042\033\043\034\044" +
    "\040\045\036\046\032\047\031\050\037\051\030\052\035" +
    "\053\041\054\027\001\002\000\054\002\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\015\ufff1\017\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\030\ufff1\032\ufff1\034\ufff1\036\ufff1\040\ufff1\042" +
    "\033\043\034\044\040\045\036\054\ufff1\055\ufff1\001\002" +
    "\000\070\002\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\017" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\032\ufff8" +
    "\034\ufff8\036\ufff8\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\001\002\000\054\002\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\ufff4\017\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\030\ufff4\032\ufff4\034\ufff4\036\ufff4\040\ufff4\042" +
    "\033\043\034\044\040\045\036\054\ufff4\055\ufff4\001\002" +
    "\000\070\002\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\017" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\032\ufff7" +
    "\034\ufff7\036\ufff7\040\ufff7\042\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\001\002\000\054\002\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\015\ufff2\017\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\030\ufff2\032\ufff2\034\ufff2\036\ufff2\040\ufff2\042" +
    "\033\043\034\044\040\045\036\054\ufff2\055\ufff2\001\002" +
    "\000\070\002\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\017" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9\032\ufff9" +
    "\034\ufff9\036\ufff9\040\ufff9\042\ufff9\043\ufff9\044\040\045" +
    "\036\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\001\002\000\070\002\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\015\ufffa\017\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\030\ufffa\032\ufffa\034\ufffa\036\ufffa\040\ufffa\042" +
    "\ufffa\043\ufffa\044\040\045\036\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\001\002\000" +
    "\054\002\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\017\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\030\ufff6\032\ufff6\034" +
    "\ufff6\036\ufff6\040\ufff6\042\033\043\034\044\040\045\036" +
    "\054\ufff6\055\ufff6\001\002\000\054\002\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\015\ufff5\017\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\030\ufff5\032\ufff5\034\ufff5\036\ufff5\040\ufff5\042" +
    "\033\043\034\044\040\045\036\054\ufff5\055\ufff5\001\002" +
    "\000\054\002\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\017" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\032\ufff3" +
    "\034\ufff3\036\ufff3\040\ufff3\042\033\043\034\044\040\045" +
    "\036\054\ufff3\055\ufff3\001\002\000\066\002\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\015\ufff0\017\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\030\ufff0\032\ufff0\034\ufff0\036\ufff0\040\ufff0" +
    "\042\033\043\034\044\040\045\036\046\032\047\031\050" +
    "\037\051\030\052\035\053\041\055\ufff0\001\002\000\034" +
    "\036\060\042\033\043\034\044\040\045\036\046\032\047" +
    "\031\050\037\051\030\052\035\053\041\054\027\055\042" +
    "\001\002\000\076\002\uffdf\011\uffdf\012\uffdf\013\uffdf\015" +
    "\uffdf\017\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf" +
    "\032\uffdf\034\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\001" +
    "\002\000\012\015\072\017\uffc5\025\uffc5\026\uffc5\001\002" +
    "\000\012\015\072\017\uffd2\025\070\026\067\001\002\000" +
    "\012\015\uffd0\017\uffd0\025\070\026\uffd0\001\002\000\012" +
    "\015\uffd4\017\uffd4\025\uffd4\026\uffd4\001\002\000\012\015" +
    "\uffd3\017\uffd3\025\uffd3\026\uffd3\001\002\000\004\017\143" +
    "\001\002\000\004\004\134\001\002\000\004\004\121\001" +
    "\002\000\012\015\uffd5\017\uffd5\025\uffd5\026\uffd5\001\002" +
    "\000\004\004\073\001\002\000\004\033\074\001\002\000" +
    "\006\004\077\034\075\001\002\000\006\031\114\046\113" +
    "\001\002\000\004\034\104\001\002\000\004\031\100\001" +
    "\002\000\004\004\101\001\002\000\010\030\102\034\uffc9" +
    "\040\uffc9\001\002\000\004\004\077\001\002\000\006\034" +
    "\uffc8\040\uffc8\001\002\000\006\031\106\046\105\001\002" +
    "\000\030\004\015\005\012\006\004\010\021\014\006\016" +
    "\013\020\017\021\007\027\005\033\011\043\014\001\002" +
    "\000\004\004\107\001\002\000\004\046\110\001\002\000" +
    "\030\004\015\005\012\006\004\010\021\014\006\016\013" +
    "\020\017\021\007\027\005\033\011\043\014\001\002\000" +
    "\042\015\uffc0\017\uffc0\025\uffc0\026\uffc0\042\033\043\034" +
    "\044\040\045\036\046\032\047\031\050\037\051\030\052" +
    "\035\053\041\054\027\055\042\001\002\000\042\015\uffc2" +
    "\017\uffc2\025\uffc2\026\uffc2\042\033\043\034\044\040\045" +
    "\036\046\032\047\031\050\037\051\030\052\035\053\041" +
    "\054\027\055\042\001\002\000\030\004\015\005\012\006" +
    "\004\010\021\014\006\016\013\020\017\021\007\027\005" +
    "\033\011\043\014\001\002\000\004\004\115\001\002\000" +
    "\004\046\116\001\002\000\030\004\015\005\012\006\004" +
    "\010\021\014\006\016\013\020\017\021\007\027\005\033" +
    "\011\043\014\001\002\000\042\015\uffc1\017\uffc1\025\uffc1" +
    "\026\uffc1\042\033\043\034\044\040\045\036\046\032\047" +
    "\031\050\037\051\030\052\035\053\041\054\027\055\042" +
    "\001\002\000\042\015\uffc3\017\uffc3\025\uffc3\026\uffc3\042" +
    "\033\043\034\044\040\045\036\046\032\047\031\050\037" +
    "\051\030\052\035\053\041\054\027\055\042\001\002\000" +
    "\004\046\122\001\002\000\010\004\125\007\126\037\123" +
    "\001\002\000\006\004\077\040\131\001\002\000\012\015" +
    "\uffce\017\uffce\025\uffce\026\uffce\001\002\000\012\015\uffcd" +
    "\017\uffcd\025\uffcd\026\uffcd\001\002\000\004\022\127\001" +
    "\002\000\004\004\130\001\002\000\012\015\uffca\017\uffca" +
    "\025\uffca\026\uffca\001\002\000\012\015\uffcc\017\uffcc\025" +
    "\uffcc\026\uffcc\001\002\000\004\040\133\001\002\000\012" +
    "\015\uffcb\017\uffcb\025\uffcb\026\uffcb\001\002\000\006\031" +
    "\135\056\136\001\002\000\004\004\140\001\002\000\030" +
    "\004\015\005\012\006\004\010\021\014\006\016\013\020" +
    "\017\021\007\027\005\033\011\043\014\001\002\000\042" +
    "\015\uffc7\017\uffc7\025\uffc7\026\uffc7\042\033\043\034\044" +
    "\040\045\036\046\032\047\031\050\037\051\030\052\035" +
    "\053\041\054\027\055\042\001\002\000\004\056\141\001" +
    "\002\000\030\004\015\005\012\006\004\010\021\014\006" +
    "\016\013\020\017\021\007\027\005\033\011\043\014\001" +
    "\002\000\042\015\uffc6\017\uffc6\025\uffc6\026\uffc6\042\033" +
    "\043\034\044\040\045\036\046\032\047\031\050\037\051" +
    "\030\052\035\053\041\054\027\055\042\001\002\000\032" +
    "\004\015\005\012\006\004\010\021\013\146\014\006\016" +
    "\013\020\017\021\007\027\005\033\011\043\014\001\002" +
    "\000\004\013\151\001\002\000\040\013\uffd9\032\147\034" +
    "\uffd9\042\033\043\034\044\040\045\036\046\032\047\031" +
    "\050\037\051\030\052\035\053\041\054\027\055\042\001" +
    "\002\000\070\002\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1" +
    "\017\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\032" +
    "\uffe1\034\uffe1\036\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\055\uffe1\001\002\000\030\004\015\005\012" +
    "\006\004\010\021\014\006\016\013\020\017\021\007\027" +
    "\005\033\011\043\014\001\002\000\006\013\uffd8\034\uffd8" +
    "\001\002\000\070\002\uffe0\011\uffe0\012\uffe0\013\uffe0\015" +
    "\uffe0\017\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0" +
    "\032\uffe0\034\uffe0\036\uffe0\040\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\001\002\000\012\015\uffcf\017" +
    "\uffcf\025\uffcf\026\uffcf\001\002\000\004\017\uffd1\001\002" +
    "\000\012\015\uffc4\017\uffc4\025\uffc4\026\uffc4\001\002\000" +
    "\006\004\174\040\172\001\002\000\030\004\015\005\012" +
    "\006\004\010\021\014\006\016\013\020\017\021\007\027" +
    "\005\033\011\043\014\001\002\000\032\004\015\005\012" +
    "\006\004\010\021\014\006\016\013\020\017\021\007\027" +
    "\005\033\011\034\160\043\014\001\002\000\070\002\uffed" +
    "\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\030\uffed\032\uffed\034\uffed\036\uffed" +
    "\040\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\001\002\000\004\034\165\001\002\000\036\030\163\034" +
    "\uffdb\042\033\043\034\044\040\045\036\046\032\047\031" +
    "\050\037\051\030\052\035\053\041\054\027\055\042\001" +
    "\002\000\030\004\015\005\012\006\004\010\021\014\006" +
    "\016\013\020\017\021\007\027\005\033\011\043\014\001" +
    "\002\000\004\034\uffda\001\002\000\070\002\uffec\011\uffec" +
    "\012\uffec\013\uffec\015\uffec\017\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\030\uffec\032\uffec\034\uffec\036\uffec\040\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\001\002" +
    "\000\034\036\167\042\033\043\034\044\040\045\036\046" +
    "\032\047\031\050\037\051\030\052\035\053\041\054\027" +
    "\055\042\001\002\000\100\002\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\015\uffdc\017\uffdc\022\170\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\030\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\001\002\000\030\004\015\005\012\006\004" +
    "\010\021\014\006\016\013\020\017\021\007\027\005\033" +
    "\011\043\014\001\002\000\070\002\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\015\uffe7\017\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\030\uffe7\032\uffe7\034\uffe7\036\uffe7\040\uffe7\042\033" +
    "\043\034\044\040\045\036\046\032\047\031\050\037\051" +
    "\030\052\035\053\041\054\027\055\042\001\002\000\070" +
    "\002\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\017\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\032\uffe9\034\uffe9" +
    "\036\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\001\002\000\004\040\201\001\002\000\004\046" +
    "\175\001\002\000\030\004\015\005\012\006\004\010\021" +
    "\014\006\016\013\020\017\021\007\027\005\033\011\043" +
    "\014\001\002\000\036\030\177\040\uffd7\042\033\043\034" +
    "\044\040\045\036\046\032\047\031\050\037\051\030\052" +
    "\035\053\041\054\027\055\042\001\002\000\004\004\174" +
    "\001\002\000\004\040\uffd6\001\002\000\070\002\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\030\uffe8\032\uffe8\034\uffe8\036\uffe8\040" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\001" +
    "\002\000\070\002\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb" +
    "\017\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\032" +
    "\ufffb\034\ufffb\036\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\001\002\000\034\023\204\042\033" +
    "\043\034\044\040\045\036\046\032\047\031\050\037\051" +
    "\030\052\035\053\041\054\027\055\042\001\002\000\030" +
    "\004\015\005\012\006\004\010\021\014\006\016\013\020" +
    "\017\021\007\027\005\033\011\043\014\001\002\000\070" +
    "\002\uffe6\011\uffe6\012\206\013\uffe6\015\uffe6\017\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\032\uffe6\034\uffe6" +
    "\036\uffe6\040\uffe6\042\033\043\034\044\040\045\036\046" +
    "\032\047\031\050\037\051\030\052\035\053\041\054\027" +
    "\055\042\001\002\000\030\004\015\005\012\006\004\010" +
    "\021\014\006\016\013\020\017\021\007\027\005\033\011" +
    "\043\014\001\002\000\070\002\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\015\uffe5\017\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\030\uffe5\032\uffe5\034\uffe5\036\uffe5\040\uffe5\042\033\043" +
    "\034\044\040\045\036\046\032\047\031\050\037\051\030" +
    "\052\035\053\041\054\027\055\042\001\002\000\004\034" +
    "\212\001\002\000\070\002\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\015\uffeb\017\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030" +
    "\uffeb\032\uffeb\034\uffeb\036\uffeb\040\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\001\002\000\070\002\uffea" +
    "\011\uffea\012\uffea\013\uffea\015\uffea\017\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\030\uffea\032\uffea\034\uffea\036\uffea" +
    "\040\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\001\002\000\004\002\001\001\002\000\004\056\215\001" +
    "\002\000\030\004\015\005\012\006\004\010\021\014\006" +
    "\016\013\020\017\021\007\027\005\033\011\043\014\001" +
    "\002\000\034\024\217\042\033\043\034\044\040\045\036" +
    "\046\032\047\031\050\037\051\030\052\035\053\041\054" +
    "\027\055\042\001\002\000\030\004\015\005\012\006\004" +
    "\010\021\014\006\016\013\020\017\021\007\027\005\033" +
    "\011\043\014\001\002\000\034\011\221\042\033\043\034" +
    "\044\040\045\036\046\032\047\031\050\037\051\030\052" +
    "\035\053\041\054\027\055\042\001\002\000\030\004\015" +
    "\005\012\006\004\010\021\014\006\016\013\020\017\021" +
    "\007\027\005\033\011\043\014\001\002\000\070\002\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\030\uffe3\032\uffe3\034\uffe3\036\uffe3" +
    "\040\uffe3\042\033\043\034\044\040\045\036\046\032\047" +
    "\031\050\037\051\030\052\035\053\041\054\027\055\042" +
    "\001\002\000\034\011\224\042\033\043\034\044\040\045" +
    "\036\046\032\047\031\050\037\051\030\052\035\053\041" +
    "\054\027\055\042\001\002\000\030\004\015\005\012\006" +
    "\004\010\021\014\006\016\013\020\017\021\007\027\005" +
    "\033\011\043\014\001\002\000\070\002\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\015\uffe4\017\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\030\uffe4\032\uffe4\034\uffe4\036\uffe4\040\uffe4\042" +
    "\033\043\034\044\040\045\036\046\032\047\031\050\037" +
    "\051\030\052\035\053\041\054\027\055\042\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\002\007\003\015\004\017\001\001\000" +
    "\002\001\001\000\006\003\222\004\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\144\004\017\006\207\001\001\000\002\001\001\000\006" +
    "\003\202\004\017\001\001\000\006\003\201\004\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\061" +
    "\011\065\012\062\013\070\016\063\017\060\020\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\056" +
    "\004\017\001\001\000\006\003\025\004\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\055\004\017\001\001\000\006\003\054\004\017\001" +
    "\001\000\006\003\053\004\017\001\001\000\006\003\052" +
    "\004\017\001\001\000\006\003\051\004\017\001\001\000" +
    "\006\003\050\004\017\001\001\000\006\003\047\004\017" +
    "\001\001\000\006\003\046\004\017\001\001\000\006\003" +
    "\045\004\017\001\001\000\006\003\044\004\017\001\001" +
    "\000\006\003\043\004\017\001\001\000\006\003\042\004" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\060\020\153" +
    "\001\001\000\020\010\061\011\152\012\062\013\070\016" +
    "\063\017\060\020\064\001\001\000\006\012\062\013\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\111" +
    "\004\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\110\004\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\117\004\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\116\004\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\123\001\001\000\004\015\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\136\004\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\141\004\017\001\001\000\002\001" +
    "\001\000\010\003\144\004\017\006\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\144\004\017\006\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\172\001\001\000\006\003\165\004\017" +
    "\001\001\000\010\003\161\004\017\005\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\161\004\017\005\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\170\004\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\175" +
    "\004\017\001\001\000\002\001\001\000\004\007\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\204\004\017\001\001\000" +
    "\002\001\001\000\006\003\206\004\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\215" +
    "\004\017\001\001\000\002\001\001\000\006\003\217\004" +
    "\017\001\001\000\002\001\001\000\006\003\221\004\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\224\004\017\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public static void main(String[] args){
     try{
        parser p = new parser(new Lexer(new FileReader(args[0])));
        Object result = p.parse().value;
        System.out.println("here4");
     }catch(Exception e ){
     e.printStackTrace();
     } 
  }
   
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol tok) {
    errorMsg.error(tok.left, message);
  }

  public parser(Lexer l) {
    this();
   lexer=l;
  }

  public parser(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
   // lexer=l;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funcDec ::= FUNCTION IDENTIFIER L1 typeFlds R1 COLON IDENTIFIER EQ expr 
            {
              FunctionDec RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunctionDec(i1left,Symbol.Symbol.symbol(i1),t,new NameTy(i2left,Symbol.Symbol.symbol(i2)),e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funcDec ::= FUNCTION IDENTIFIER L1 R1 COLON IDENTIFIER EQ expr 
            {
              FunctionDec RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunctionDec(i1left,Symbol.Symbol.symbol(i1),null,new NameTy(i2left,Symbol.Symbol.symbol(i2)),e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funcDec ::= FUNCTION IDENTIFIER L1 typeFlds R1 EQ expr 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunctionDec(ileft,Symbol.Symbol.symbol(i),t,null,e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcDec ::= FUNCTION IDENTIFIER L1 R1 EQ expr 
            {
              FunctionDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunctionDec(ileft,Symbol.Symbol.symbol(i),null,null,e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // fcDecList ::= funcDec fcDecList 
            {
              FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec fl = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunctionDec(fleft,f.name,f.params,f.result,f.body,fl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fcDecList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // fcDecList ::= funcDec 
            {
              FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fcDecList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varDec ::= VAR IDENTIFIER COLON IDENTIFIER ASSIGN expr 
            {
              VarDec RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarDec(i1left,Symbol.Symbol.symbol(i1),new NameTy(i2left,Symbol.Symbol.symbol(i2)),e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varDec ::= VAR IDENTIFIER ASSIGN expr 
            {
              VarDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarDec(ileft,Symbol.Symbol.symbol(i),null,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typeFlds ::= IDENTIFIER COLON IDENTIFIER COMMA typeFlds 
            {
              FieldList RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList ts = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FieldList(tsleft,Symbol.Symbol.symbol(i1),Symbol.Symbol.symbol(i2),ts);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeFlds",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typeFlds ::= IDENTIFIER COLON IDENTIFIER 
            {
              FieldList RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FieldList(i1left,Symbol.Symbol.symbol(i1),Symbol.Symbol.symbol(i2),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeFlds",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= ARRAY OF IDENTIFIER 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayTy(ileft,Symbol.Symbol.symbol(i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= L3 typeFlds R3 
            {
              Ty RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new RecordTy(tleft,t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= L3 R3 
            {
              Ty RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new RecordTy(lleft,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= IDENTIFIER 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NameTy(ileft,Symbol.Symbol.symbol(i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // typeDec ::= TYPE IDENTIFIER EQ type 
            {
              TypeDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TypeDec(ileft,Symbol.Symbol.symbol(i),t,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tyDecList ::= typeDec tyDecList 
            {
              TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec tl = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new TypeDec(tleft,t.name,t.ty,tl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyDecList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tyDecList ::= typeDec 
            {
              TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tyDecList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decList ::= dec decList 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DecList(d,dl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decList ::= dec 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DecList(d,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec ::= fcDecList 
            {
              Dec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec ::= varDec 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec ::= tyDecList 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fldList ::= IDENTIFIER EQ expr COMMA fldList 
            {
              FieldExpList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldExpList f = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FieldExpList(ileft,Symbol.Symbol.symbol(i),e,f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fldList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fldList ::= IDENTIFIER EQ expr 
            {
              FieldExpList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FieldExpList(ileft,Symbol.Symbol.symbol(i),e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fldList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprSeq ::= expr SEMICOLON exprSeq 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList es = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpList(e,es);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSeq",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprSeq ::= expr 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpList(e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSeq",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprList ::= expr COMMA exprList 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpList(e,el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprList ::= expr 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExpList(e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lvalue ::= IDENTIFIER L2 expr R2 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SubscriptVar(ileft,new SimpleVar(ileft,Symbol.Symbol.symbol(i)),e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lvalue ::= IDENTIFIER 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SimpleVar(ileft,Symbol.Symbol.symbol(i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lvalue ::= lvalue DOT IDENTIFIER 
            {
              Var RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FieldVar(lleft,l,Symbol.Symbol.symbol(i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lvalue ::= lvalue L2 expr R2 
            {
              Var RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SubscriptVar(lleft,l,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LET decList IN exprSeq END 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LetExp(dleft,d,new SeqExp(eleft,e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= LET decList IN END 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new LetExp(dleft,d,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= BREAK 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BreakExp(bleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= FOR IDENTIFIER ASSIGN expr TO expr DO expr 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForExp(ileft,new VarDec(ileft,Symbol.Symbol.symbol(i),new NameTy(ileft,Symbol.Symbol.symbol("int")),e1),e2,e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= WHILE expr DO expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileExp(e1left,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= IF expr THEN expr ELSE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfExp(e1left,e1,e2,e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= IF expr THEN expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfExp(e1left,e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= IDENTIFIER L2 expr R2 OF expr 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayExp(ileft,Symbol.Symbol.symbol(i),e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= IDENTIFIER L3 fldList R3 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldExpList f = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new RecordExp(ileft,Symbol.Symbol.symbol(i),f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= IDENTIFIER L3 R3 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new RecordExp(ileft,Symbol.Symbol.symbol(i),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= L1 exprSeq R1 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SeqExp(eleft,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= L1 R1 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SeqExp(lleft,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= IDENTIFIER L1 exprList R1 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallExp(ileft,Symbol.Symbol.symbol(i),e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= IDENTIFIER L1 R1 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CallExp(ileft,Symbol.Symbol.symbol(i),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= lvalue ASSIGN expr 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignExp(lleft,l,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr OR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfExp(e1left,e1,new IntExp(e1left,1),e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr AND expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfExp(e1left,e1,e2,new IntExp(e1left,0));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr NLESS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.GE,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr GTR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.GT,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr NGTR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.LE,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr LESS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.LT,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr NEQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.NE,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr EQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.EQ,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr DIV expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.DIV,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr MUL expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.MUL,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr SUB expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.MINUS,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr ADD expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(e1left,e1,OpExp.PLUS,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= SUB expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new OpExp(eleft,new IntExp(eleft,0),OpExp.MINUS,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= lvalue 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarExp(lleft,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= NIL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NilExp(nleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= NUM 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IntExp(ileft,i.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StringExp(sleft,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Print p = new Print(System.out);
                       p.prExp(e,0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

