
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Apr 03 01:28:25 CST 2009
//----------------------------------------------------

package Parse;

import Absyn.*;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

/** CUP v0.10k generated parser.
  * @version Fri Apr 03 01:28:25 CST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\005\000\002\004\006\000\002" +
    "\004\010\000\002\004\006\000\002\004\010\000\002\004" +
    "\006\000\002\004\012\000\002\004\003\000\002\004\007" +
    "\000\002\005\003\000\002\005\005\000\002\005\006\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\005\000\002\010\002\000\002\010\003\000\002" +
    "\011\003\000\002\011\005\000\002\012\002\000\002\012" +
    "\003\000\002\013\005\000\002\013\007\000\002\014\002" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\004\000\002" +
    "\017\006\000\002\020\003\000\002\020\005\000\002\020" +
    "\005\000\002\021\005\000\002\022\003\000\002\022\005" +
    "\000\002\023\002\000\002\023\003\000\002\024\006\000" +
    "\002\024\010\000\002\025\011\000\002\025\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\070\002\ufffe\011\ufffe\012\ufffe\013\ufffe\015" +
    "\ufffe\017\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe" +
    "\032\ufffe\034\ufffe\036\ufffe\040\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\001\002\000\030\004\015\005" +
    "\012\006\004\010\021\014\006\016\013\020\017\021\007" +
    "\027\005\033\011\043\014\001\002\000\004\004\171\001" +
    "\002\000\070\002\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd" +
    "\017\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd\032" +
    "\ufffd\034\ufffd\036\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\001\002\000\004\002\170\001\002" +
    "\000\032\004\015\005\012\006\004\010\021\014\006\016" +
    "\013\020\017\021\007\027\005\033\011\034\uffd9\043\014" +
    "\001\002\000\070\002\uffff\011\uffff\012\uffff\013\uffff\015" +
    "\uffff\017\uffff\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff" +
    "\032\uffff\034\uffff\036\uffff\040\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\054\uffff\055\uffff\001\002\000\030\004\015\005" +
    "\012\006\004\010\021\014\006\016\013\020\017\021\007" +
    "\027\005\033\011\043\014\001\002\000\030\004\015\005" +
    "\012\006\004\010\021\014\006\016\013\020\017\021\007" +
    "\027\005\033\011\043\014\001\002\000\102\002\uffee\011" +
    "\uffee\012\uffee\013\uffee\015\uffee\017\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\030\uffee\032\uffee\033\133\034\uffee\035" +
    "\132\036\uffee\037\131\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\001\002\000\034" +
    "\002\000\042\033\043\034\044\040\045\036\046\032\047" +
    "\031\050\037\051\030\052\035\053\041\054\027\055\043" +
    "\001\002\000\010\015\054\025\056\026\050\001\002\000" +
    "\076\002\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\017\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\032\ufffc\034" +
    "\ufffc\035\022\036\ufffc\040\ufffc\041\024\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\023\001\002\000\070" +
    "\002\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\017\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\032\ufff0\034\ufff0" +
    "\036\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\001\002\000\030\004\015\005\012\006\004\010" +
    "\021\014\006\016\013\020\017\021\007\027\005\033\011" +
    "\043\014\001\002\000\030\004\015\005\012\006\004\010" +
    "\021\014\006\016\013\020\017\021\007\027\005\033\011" +
    "\043\014\001\002\000\004\004\025\001\002\000\076\002" +
    "\uffed\011\uffed\012\uffed\013\uffed\015\uffed\017\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\030\uffed\032\uffed\034\uffed\035" +
    "\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\001\002\000\070\002\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\015\ufff9\017\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\030\ufff9\032\ufff9\034\ufff9\036\ufff9" +
    "\040\ufff9\042\033\043\034\044\040\045\036\046\032\047" +
    "\031\050\037\051\030\052\035\053\041\054\027\055\043" +
    "\001\002\000\030\004\uffe1\005\uffe1\006\uffe1\010\uffe1\014" +
    "\uffe1\016\uffe1\020\uffe1\021\uffe1\027\uffe1\033\uffe1\043\uffe1" +
    "\001\002\000\030\004\uffe4\005\uffe4\006\uffe4\010\uffe4\014" +
    "\uffe4\016\uffe4\020\uffe4\021\uffe4\027\uffe4\033\uffe4\043\uffe4" +
    "\001\002\000\030\004\uffe6\005\uffe6\006\uffe6\010\uffe6\014" +
    "\uffe6\016\uffe6\020\uffe6\021\uffe6\027\uffe6\033\uffe6\043\uffe6" +
    "\001\002\000\030\004\uffe7\005\uffe7\006\uffe7\010\uffe7\014" +
    "\uffe7\016\uffe7\020\uffe7\021\uffe7\027\uffe7\033\uffe7\043\uffe7" +
    "\001\002\000\030\004\uffeb\005\uffeb\006\uffeb\010\uffeb\014" +
    "\uffeb\016\uffeb\020\uffeb\021\uffeb\027\uffeb\033\uffeb\043\uffeb" +
    "\001\002\000\030\004\uffea\005\uffea\006\uffea\010\uffea\014" +
    "\uffea\016\uffea\020\uffea\021\uffea\027\uffea\033\uffea\043\uffea" +
    "\001\002\000\030\004\uffe3\005\uffe3\006\uffe3\010\uffe3\014" +
    "\uffe3\016\uffe3\020\uffe3\021\uffe3\027\uffe3\033\uffe3\043\uffe3" +
    "\001\002\000\030\004\uffe8\005\uffe8\006\uffe8\010\uffe8\014" +
    "\uffe8\016\uffe8\020\uffe8\021\uffe8\027\uffe8\033\uffe8\043\uffe8" +
    "\001\002\000\030\004\uffe5\005\uffe5\006\uffe5\010\uffe5\014" +
    "\uffe5\016\uffe5\020\uffe5\021\uffe5\027\uffe5\033\uffe5\043\uffe5" +
    "\001\002\000\030\004\uffe9\005\uffe9\006\uffe9\010\uffe9\014" +
    "\uffe9\016\uffe9\020\uffe9\021\uffe9\027\uffe9\033\uffe9\043\uffe9" +
    "\001\002\000\030\004\uffe2\005\uffe2\006\uffe2\010\uffe2\014" +
    "\uffe2\016\uffe2\020\uffe2\021\uffe2\027\uffe2\033\uffe2\043\uffe2" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\030\004\uffe0\005\uffe0\006\uffe0\010\uffe0\014" +
    "\uffe0\016\uffe0\020\uffe0\021\uffe0\027\uffe0\033\uffe0\043\uffe0" +
    "\001\002\000\070\002\ufffa\011\ufffa\012\ufffa\013\ufffa\015" +
    "\ufffa\017\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa" +
    "\032\ufffa\034\ufffa\036\ufffa\040\ufffa\042\033\043\034\044" +
    "\040\045\036\046\032\047\031\050\037\051\030\052\035" +
    "\053\041\054\027\055\043\001\002\000\034\036\046\042" +
    "\033\043\034\044\040\045\036\046\032\047\031\050\037" +
    "\051\030\052\035\053\041\054\027\055\043\001\002\000" +
    "\076\002\uffec\011\uffec\012\uffec\013\uffec\015\uffec\017\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\030\uffec\032\uffec\034" +
    "\uffec\035\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001\002\000\012" +
    "\015\054\017\121\025\056\026\050\001\002\000\004\004" +
    "\112\001\002\000\012\015\uffd3\017\uffd3\025\uffd3\026\uffd3" +
    "\001\002\000\012\015\uffd1\017\uffd1\025\uffd1\026\uffd1\001" +
    "\002\000\012\015\uffd2\017\uffd2\025\uffd2\026\uffd2\001\002" +
    "\000\004\004\100\001\002\000\012\015\uffd0\017\uffd0\025" +
    "\uffd0\026\uffd0\001\002\000\004\004\057\001\002\000\004" +
    "\046\060\001\002\000\010\004\063\007\064\037\061\001" +
    "\002\000\006\004\070\040\uffc7\001\002\000\012\015\uffce" +
    "\017\uffce\025\uffce\026\uffce\001\002\000\012\015\uffcd\017" +
    "\uffcd\025\uffcd\026\uffcd\001\002\000\004\022\065\001\002" +
    "\000\004\004\066\001\002\000\012\015\uffcb\017\uffcb\025" +
    "\uffcb\026\uffcb\001\002\000\010\030\076\034\uffc6\040\uffc6" +
    "\001\002\000\004\030\074\001\002\000\010\030\uffc9\034" +
    "\uffc9\040\uffc9\001\002\000\004\040\073\001\002\000\012" +
    "\015\uffcc\017\uffcc\025\uffcc\026\uffcc\001\002\000\004\004" +
    "\075\001\002\000\010\030\uffca\034\uffca\040\uffca\001\002" +
    "\000\004\004\070\001\002\000\010\030\uffc8\034\uffc8\040" +
    "\uffc8\001\002\000\004\033\101\001\002\000\006\004\070" +
    "\034\uffc7\001\002\000\004\034\103\001\002\000\006\031" +
    "\105\046\104\001\002\000\030\004\015\005\012\006\004" +
    "\010\021\014\006\016\013\020\017\021\007\027\005\033" +
    "\011\043\014\001\002\000\004\004\106\001\002\000\004" +
    "\046\107\001\002\000\030\004\015\005\012\006\004\010" +
    "\021\014\006\016\013\020\017\021\007\027\005\033\011" +
    "\043\014\001\002\000\042\015\uffc2\017\uffc2\025\uffc2\026" +
    "\uffc2\042\033\043\034\044\040\045\036\046\032\047\031" +
    "\050\037\051\030\052\035\053\041\054\027\055\043\001" +
    "\002\000\042\015\uffc3\017\uffc3\025\uffc3\026\uffc3\042\033" +
    "\043\034\044\040\045\036\046\032\047\031\050\037\051" +
    "\030\052\035\053\041\054\027\055\043\001\002\000\006" +
    "\031\113\056\114\001\002\000\004\004\116\001\002\000" +
    "\030\004\015\005\012\006\004\010\021\014\006\016\013" +
    "\020\017\021\007\027\005\033\011\043\014\001\002\000" +
    "\042\015\uffc5\017\uffc5\025\uffc5\026\uffc5\042\033\043\034" +
    "\044\040\045\036\046\032\047\031\050\037\051\030\052" +
    "\035\053\041\054\027\055\043\001\002\000\004\056\117" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\042\015\uffc4\017\uffc4\025\uffc4\026\uffc4\042" +
    "\033\043\034\044\040\045\036\046\032\047\031\050\037" +
    "\051\030\052\035\053\041\054\027\055\043\001\002\000" +
    "\032\004\015\005\012\006\004\010\021\013\uffd9\014\006" +
    "\016\013\020\017\021\007\027\005\033\011\043\014\001" +
    "\002\000\012\015\uffcf\017\uffcf\025\uffcf\026\uffcf\001\002" +
    "\000\010\013\uffd8\032\127\034\uffd8\001\002\000\004\013" +
    "\126\001\002\000\040\013\uffdb\032\uffdb\034\uffdb\042\033" +
    "\043\034\044\040\045\036\046\032\047\031\050\037\051" +
    "\030\052\035\053\041\054\027\055\043\001\002\000\070" +
    "\002\uffef\011\uffef\012\uffef\013\uffef\015\uffef\017\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\030\uffef\032\uffef\034\uffef" +
    "\036\uffef\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\001\002\000\030\004\015\005\012\006\004\010" +
    "\021\014\006\016\013\020\017\021\007\027\005\033\011" +
    "\043\014\001\002\000\040\013\uffda\032\uffda\034\uffda\042" +
    "\033\043\034\044\040\045\036\046\032\047\031\050\037" +
    "\051\030\052\035\053\041\054\027\055\043\001\002\000" +
    "\006\004\147\040\uffd5\001\002\000\030\004\015\005\012" +
    "\006\004\010\021\014\006\016\013\020\017\021\007\027" +
    "\005\033\011\043\014\001\002\000\032\004\015\005\012" +
    "\006\004\010\021\014\006\016\013\020\017\021\007\027" +
    "\005\033\011\034\uffdd\043\014\001\002\000\004\034\141" +
    "\001\002\000\006\030\137\034\uffdc\001\002\000\036\030" +
    "\uffdf\034\uffdf\042\033\043\034\044\040\045\036\046\032" +
    "\047\031\050\037\051\030\052\035\053\041\054\027\055" +
    "\043\001\002\000\030\004\015\005\012\006\004\010\021" +
    "\014\006\016\013\020\017\021\007\027\005\033\011\043" +
    "\014\001\002\000\036\030\uffde\034\uffde\042\033\043\034" +
    "\044\040\045\036\046\032\047\031\050\037\051\030\052" +
    "\035\053\041\054\027\055\043\001\002\000\070\002\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\015\ufff8\017\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\030\ufff8\032\ufff8\034\ufff8\036\ufff8" +
    "\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\001\002\000\034\036\143\042\033\043\034\044\040\045" +
    "\036\046\032\047\031\050\037\051\030\052\035\053\041" +
    "\054\027\055\043\001\002\000\004\022\144\001\002\000" +
    "\030\004\015\005\012\006\004\010\021\014\006\016\013" +
    "\020\017\021\007\027\005\033\011\043\014\001\002\000" +
    "\070\002\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\017\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5\032\ufff5\034" +
    "\ufff5\036\ufff5\040\ufff5\042\033\043\034\044\040\045\036" +
    "\046\032\047\031\050\037\051\030\052\035\053\041\054" +
    "\027\055\043\001\002\000\006\030\154\040\uffd4\001\002" +
    "\000\004\046\152\001\002\000\004\040\151\001\002\000" +
    "\070\002\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\017\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\030\ufff6\032\ufff6\034" +
    "\ufff6\036\ufff6\040\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\001\002\000\030\004\015\005\012\006\004" +
    "\010\021\014\006\016\013\020\017\021\007\027\005\033" +
    "\011\043\014\001\002\000\036\030\uffd7\040\uffd7\042\033" +
    "\043\034\044\040\045\036\046\032\047\031\050\037\051" +
    "\030\052\035\053\041\054\027\055\043\001\002\000\004" +
    "\004\155\001\002\000\004\046\156\001\002\000\030\004" +
    "\015\005\012\006\004\010\021\014\006\016\013\020\017" +
    "\021\007\027\005\033\011\043\014\001\002\000\036\030" +
    "\uffd6\040\uffd6\042\033\043\034\044\040\045\036\046\032" +
    "\047\031\050\037\051\030\052\035\053\041\054\027\055" +
    "\043\001\002\000\070\002\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\015\ufffb\017\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030" +
    "\ufffb\032\ufffb\034\ufffb\036\ufffb\040\ufffb\042\ufffb\043\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\001\002\000\034\023\162" +
    "\042\033\043\034\044\040\045\036\046\032\047\031\050" +
    "\037\051\030\052\035\053\041\054\027\055\043\001\002" +
    "\000\030\004\015\005\012\006\004\010\021\014\006\016" +
    "\013\020\017\021\007\027\005\033\011\043\014\001\002" +
    "\000\070\002\ufff4\011\ufff4\012\164\013\ufff4\015\ufff4\017" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\032\ufff4" +
    "\034\ufff4\036\ufff4\040\ufff4\042\033\043\034\044\040\045" +
    "\036\046\032\047\031\050\037\051\030\052\035\053\041" +
    "\054\027\055\043\001\002\000\030\004\015\005\012\006" +
    "\004\010\021\014\006\016\013\020\017\021\007\027\005" +
    "\033\011\043\014\001\002\000\070\002\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\017\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\030\ufff3\032\ufff3\034\ufff3\036\ufff3\040\ufff3\042" +
    "\033\043\034\044\040\045\036\046\032\047\031\050\037" +
    "\051\030\052\035\053\041\054\027\055\043\001\002\000" +
    "\004\034\167\001\002\000\070\002\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\015\ufff7\017\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\030\ufff7\032\ufff7\034\ufff7\036\ufff7\040\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\001\002\000\004" +
    "\002\001\001\002\000\004\056\172\001\002\000\030\004" +
    "\015\005\012\006\004\010\021\014\006\016\013\020\017" +
    "\021\007\027\005\033\011\043\014\001\002\000\034\024" +
    "\174\042\033\043\034\044\040\045\036\046\032\047\031" +
    "\050\037\051\030\052\035\053\041\054\027\055\043\001" +
    "\002\000\030\004\015\005\012\006\004\010\021\014\006" +
    "\016\013\020\017\021\007\027\005\033\011\043\014\001" +
    "\002\000\034\011\176\042\033\043\034\044\040\045\036" +
    "\046\032\047\031\050\037\051\030\052\035\053\041\054" +
    "\027\055\043\001\002\000\030\004\015\005\012\006\004" +
    "\010\021\014\006\016\013\020\017\021\007\027\005\033" +
    "\011\043\014\001\002\000\070\002\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\015\ufff1\017\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\030\ufff1\032\ufff1\034\ufff1\036\ufff1\040\ufff1\042\033" +
    "\043\034\044\040\045\036\046\032\047\031\050\037\051" +
    "\030\052\035\053\041\054\027\055\043\001\002\000\034" +
    "\011\201\042\033\043\034\044\040\045\036\046\032\047" +
    "\031\050\037\051\030\052\035\053\041\054\027\055\043" +
    "\001\002\000\030\004\015\005\012\006\004\010\021\014" +
    "\006\016\013\020\017\021\007\027\005\033\011\043\014" +
    "\001\002\000\070\002\ufff2\011\ufff2\012\ufff2\013\ufff2\015" +
    "\ufff2\017\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2" +
    "\032\ufff2\034\ufff2\036\ufff2\040\ufff2\042\033\043\034\044" +
    "\040\045\036\046\032\047\031\050\037\051\030\052\035" +
    "\053\041\054\027\055\043\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\010\003\007\004\015\005\017\001\001\000" +
    "\002\001\001\000\006\004\177\005\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\124\005\017\011\122\012\165\001\001\000\002\001\001" +
    "\000\006\004\160\005\017\001\001\000\006\004\157\005" +
    "\017\001\001\000\002\001\001\000\004\006\041\001\001" +
    "\000\014\015\054\016\046\017\050\024\052\025\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\044" +
    "\005\017\001\001\000\006\004\025\005\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\043\005\017\001\001" +
    "\000\002\001\001\000\004\006\041\001\001\000\004\006" +
    "\041\001\001\000\002\001\001\000\012\015\121\017\050" +
    "\024\052\025\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\061\001\001\000\010\021\070\022\066\023\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\070\022\066\023\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\110\005\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\107\005\017" +
    "\001\001\000\004\006\041\001\001\000\004\006\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\114" +
    "\005\017\001\001\000\004\006\041\001\001\000\002\001" +
    "\001\000\006\004\117\005\017\001\001\000\004\006\041" +
    "\001\001\000\012\004\124\005\017\011\122\012\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\041\001\001\000\002\001\001\000\006\004" +
    "\127\005\017\001\001\000\004\006\041\001\001\000\006" +
    "\013\145\014\147\001\001\000\006\004\141\005\017\001" +
    "\001\000\012\004\135\005\017\007\134\010\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\041\001" +
    "\001\000\006\004\137\005\017\001\001\000\004\006\041" +
    "\001\001\000\002\001\001\000\004\006\041\001\001\000" +
    "\002\001\001\000\006\004\144\005\017\001\001\000\004" +
    "\006\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\152\005\017" +
    "\001\001\000\004\006\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\156\005\017\001\001\000\004" +
    "\006\041\001\001\000\004\006\041\001\001\000\004\006" +
    "\041\001\001\000\006\004\162\005\017\001\001\000\004" +
    "\006\041\001\001\000\006\004\164\005\017\001\001\000" +
    "\004\006\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\172\005" +
    "\017\001\001\000\004\006\041\001\001\000\006\004\174" +
    "\005\017\001\001\000\004\006\041\001\001\000\006\004" +
    "\176\005\017\001\001\000\004\006\041\001\001\000\004" +
    "\006\041\001\001\000\006\004\201\005\017\001\001\000" +
    "\004\006\041\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 

  public static void main(String[] args){
    try{
     String filename = args[0];
	 ErrorMsg.ErrorMsg errorMsg = new ErrorMsg.ErrorMsg(filename);
	 InputStream inp = new FileInputStream(filename);
	 System.out.println("here");
	 Yylex lexer = new Yylex(inp, errorMsg);
	 System.out.println("here2");
	 parser p = new parser(lexer);
	 System.out.println("here3");
		
     //Parser p = new Parser(new Lexer(new FileReader(args[0])));
     Object result = p.parse().value;
    }catch(Exception e ){System.out.println("ERROR!");} 
  }
   
  //public Absyn.Exp parseResult;
  Yylex lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public parser(Yylex l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funcDec ::= FUNCTION IDENTIFIER L1 typeFldsOp R1 COLON IDENTIFIER EQ expr 
            {
              Object RESULT = null;
		System.out.println("funcDec");
              CUP$parser$result = new java_cup.runtime.Symbol(19/*funcDec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcDec ::= FUNCTION IDENTIFIER L1 typeFldsOp R1 EQ expr 
            {
              Object RESULT = null;
		System.out.println("funcDec");
              CUP$parser$result = new java_cup.runtime.Symbol(19/*funcDec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // varDec ::= VAR IDENTIFIER COLON IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		System.out.println("varDec");
              CUP$parser$result = new java_cup.runtime.Symbol(18/*varDec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varDec ::= VAR IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		System.out.println("varDec");
              CUP$parser$result = new java_cup.runtime.Symbol(18/*varDec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // typeFldsOp ::= typeFlds 
            {
              Object RESULT = null;
		System.out.println("typeFldsOp");
              CUP$parser$result = new java_cup.runtime.Symbol(17/*typeFldsOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // typeFldsOp ::= 
            {
              Object RESULT = null;
		System.out.println("typeFldsOp");
              CUP$parser$result = new java_cup.runtime.Symbol(17/*typeFldsOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typeFlds ::= typeFlds COMMA typeFld 
            {
              Object RESULT = null;
		System.out.println("typeFlds");
              CUP$parser$result = new java_cup.runtime.Symbol(16/*typeFlds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typeFlds ::= typeFld 
            {
              Object RESULT = null;
		System.out.println("typeFlds");
              CUP$parser$result = new java_cup.runtime.Symbol(16/*typeFlds*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typeFld ::= IDENTIFIER COMMA IDENTIFIER 
            {
              Object RESULT = null;
		System.out.println("typeFld");
              CUP$parser$result = new java_cup.runtime.Symbol(15/*typeFld*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= ARRAY OF IDENTIFIER 
            {
              Object RESULT = null;
		System.out.println("type");
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= L3 typeFldsOp R3 
            {
              Object RESULT = null;
		System.out.println("type");
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= IDENTIFIER 
            {
              Object RESULT = null;
		System.out.println("type");
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // typeDec ::= TYPE IDENTIFIER EQ type 
            {
              Object RESULT = null;
		System.out.println("typeDec");
              CUP$parser$result = new java_cup.runtime.Symbol(13/*typeDec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decList ::= decList dec 
            {
              Object RESULT = null;
		System.out.println("decList");
              CUP$parser$result = new java_cup.runtime.Symbol(12/*decList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decList ::= dec 
            {
              Object RESULT = null;
		System.out.println("decList");
              CUP$parser$result = new java_cup.runtime.Symbol(12/*decList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dec ::= funcDec 
            {
              Object RESULT = null;
		System.out.println("dec");
              CUP$parser$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dec ::= varDec 
            {
              Object RESULT = null;
		System.out.println("dec");
              CUP$parser$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dec ::= typeDec 
            {
              Object RESULT = null;
		System.out.println("dec");
              CUP$parser$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fldListOp ::= fldList 
            {
              Object RESULT = null;
		System.out.println("fldListOp");
              CUP$parser$result = new java_cup.runtime.Symbol(10/*fldListOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fldListOp ::= 
            {
              Object RESULT = null;
		System.out.println("fldListOp");
              CUP$parser$result = new java_cup.runtime.Symbol(10/*fldListOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fldList ::= fldList COMMA IDENTIFIER EQ expr 
            {
              Object RESULT = null;
		System.out.println("fldList");
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fldList ::= IDENTIFIER EQ expr 
            {
              Object RESULT = null;
		System.out.println("fldList");
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprSeqOp ::= exprSeq 
            {
              Object RESULT = null;
		System.out.println("exprSeqOp");
              CUP$parser$result = new java_cup.runtime.Symbol(8/*exprSeqOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprSeqOp ::= 
            {
              Object RESULT = null;
		System.out.println("exprSeqOp");
              CUP$parser$result = new java_cup.runtime.Symbol(8/*exprSeqOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprSeq ::= exprSeq SEMICOLON expr 
            {
              Object RESULT = null;
		System.out.println("exprSeq");
              CUP$parser$result = new java_cup.runtime.Symbol(7/*exprSeq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprSeq ::= expr 
            {
              Object RESULT = null;
		System.out.println("exprSeq");
              CUP$parser$result = new java_cup.runtime.Symbol(7/*exprSeq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprListOp ::= exprList 
            {
              Object RESULT = null;
		System.out.println("exprListOp");
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exprListOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprListOp ::= 
            {
              Object RESULT = null;
		System.out.println("exprListOp");
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exprListOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprList ::= exprList COMMA expr 
            {
              Object RESULT = null;
		System.out.println("exprList");
              CUP$parser$result = new java_cup.runtime.Symbol(5/*exprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprList ::= expr 
            {
              Object RESULT = null;
		System.out.println("exprList");
              CUP$parser$result = new java_cup.runtime.Symbol(5/*exprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // biOp ::= OR 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // biOp ::= AND 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // biOp ::= NLESS 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // biOp ::= GTR 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // biOp ::= NGTR 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // biOp ::= LESS 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // biOp ::= NEQ 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // biOp ::= EQ 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // biOp ::= DIV 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // biOp ::= MUL 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // biOp ::= SUB 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // biOp ::= ADD 
            {
              Object RESULT = null;
		System.out.println("biOp");
              CUP$parser$result = new java_cup.runtime.Symbol(4/*biOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lvalue ::= lvalue L2 expr R2 
            {
              Object RESULT = null;
		System.out.println("lvalue");
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lvalue ::= lvalue DOT IDENTIFIER 
            {
              Object RESULT = null;
		System.out.println("lvalue");
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lvalue ::= IDENTIFIER 
            {
              Object RESULT = null;
		System.out.println("lvalue");
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= LET decList IN exprSeqOp END 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= BREAK 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= FOR IDENTIFIER ASSIGN expr TO expr DO expr 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= WHILE expr DO expr 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= IF expr THEN expr ELSE expr 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= IF expr THEN expr 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= IDENTIFIER L2 expr R2 OF expr 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= IDENTIFIER L3 fldListOp R3 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= L1 exprSeqOp R1 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= IDENTIFIER L1 exprListOp R1 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= lvalue ASSIGN expr 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr biOp expr 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= SUB expr 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= lvalue 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= NIL 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= NUM 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= STRING 
            {
              Object RESULT = null;
		System.out.println("expr");
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

