
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jan 05 14:04:40 CST 2008
//----------------------------------------------------

package Parse;

import Absyn.*;

/** CUP v0.10k generated parser.
  * @version Sat Jan 05 14:04:40 CST 2008
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\003\003\000\002\005" +
    "\002\000\002\005\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\012\003\000\002\012\004\000" +
    "\002\007\006\000\002\014\003\000\002\014\005\000\002" +
    "\014\005\000\002\015\005\000\002\015\007\000\002\016" +
    "\005\000\002\013\003\000\002\013\004\000\002\011\011" +
    "\000\002\011\013\000\002\011\010\000\002\011\012\000" +
    "\002\010\006\000\002\010\010\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\003\000\002\004" +
    "\005\000\002\004\006\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\006\000\002\004\005\000" +
    "\002\004\010\000\002\004\006\000\002\004\012\000\002" +
    "\004\003\000\002\004\007\000\002\004\006\000\002\004" +
    "\010\000\002\021\003\000\002\021\005\000\002\017\003" +
    "\000\002\017\005\000\002\020\005\000\002\020\007\000" +
    "\002\022\003\000\002\022\006\000\002\022\005\000\002" +
    "\022\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\030\007\017\017\004\034\013\037\005\040" +
    "\007\043\016\047\021\050\010\056\015\057\012\060\006" +
    "\001\002\000\030\007\017\017\004\034\013\037\005\040" +
    "\007\043\016\047\021\050\010\056\015\057\012\060\006" +
    "\001\002\000\030\007\017\017\004\034\013\037\005\040" +
    "\007\043\016\047\021\050\010\056\015\057\012\060\006" +
    "\001\002\000\070\002\uffe8\004\uffe8\006\uffe8\010\uffe8\012" +
    "\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\035\uffe8\036\uffe8\041\uffe8\042\uffe8\044\uffe8\045\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\001\002\000\004\056\211\001" +
    "\002\000\070\002\uffe7\004\uffe7\006\uffe7\010\uffe7\012\uffe7" +
    "\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\035\uffe7\036\uffe7\041\uffe7\042\uffe7\044\uffe7\045\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\001\002\000\004\002\210\001\002" +
    "\000\070\002\uffe9\004\uffe9\006\uffe9\010\uffe9\012\uffe9\014" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\035" +
    "\uffe9\036\uffe9\041\uffe9\042\uffe9\044\uffe9\045\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\001\002\000\030\007\017\017\004\034" +
    "\013\037\005\040\007\043\016\047\021\050\010\056\015" +
    "\057\012\060\006\001\002\000\034\002\000\016\034\017" +
    "\027\020\040\021\031\022\035\023\033\024\041\025\036" +
    "\026\037\027\032\030\030\031\042\001\002\000\102\002" +
    "\uffc4\004\uffc4\006\uffc4\007\160\010\uffc4\011\157\012\uffc4" +
    "\013\156\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\035\uffc4\036\uffc4\041\uffc4\042" +
    "\uffc4\044\uffc4\045\uffc4\051\uffc4\052\uffc4\053\uffc4\001\002" +
    "\000\012\044\uffff\051\077\052\071\053\074\001\002\000" +
    "\032\007\017\010\063\017\004\034\013\037\005\040\007" +
    "\043\016\047\021\050\010\056\015\057\012\060\006\001" +
    "\002\000\076\002\uffd9\004\uffd9\006\uffd9\010\uffd9\011\022" +
    "\012\uffd9\014\uffd9\015\024\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\023\035\uffd9\036\uffd9\041\uffd9\042" +
    "\uffd9\044\uffd9\045\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002" +
    "\000\070\002\uffce\004\uffce\006\uffce\010\uffce\012\uffce\014" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\035" +
    "\uffce\036\uffce\041\uffce\042\uffce\044\uffce\045\uffce\051\uffce" +
    "\052\uffce\053\uffce\001\002\000\030\007\017\017\004\034" +
    "\013\037\005\040\007\043\016\047\021\050\010\056\015" +
    "\057\012\060\006\001\002\000\030\007\017\017\004\034" +
    "\013\037\005\040\007\043\016\047\021\050\010\056\015" +
    "\057\012\060\006\001\002\000\004\056\025\001\002\000" +
    "\076\002\uffc2\004\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2\044" +
    "\uffc2\045\uffc2\051\uffc2\052\uffc2\053\uffc2\001\002\000\070" +
    "\002\uffd8\004\uffd8\006\uffd8\010\uffd8\012\uffd8\014\uffd8\016" +
    "\034\017\027\020\040\021\031\022\035\023\033\024\041" +
    "\025\036\026\037\027\032\030\030\031\042\035\uffd8\036" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\045\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\070\002\uffe5\004\uffe5\006\uffe5\010" +
    "\uffe5\012\uffe5\014\uffe5\016\034\017\027\020\040\021\031" +
    "\022\035\023\033\024\041\025\036\026\037\027\032\030" +
    "\uffe5\031\uffe5\035\uffe5\036\uffe5\041\uffe5\042\uffe5\044\uffe5" +
    "\045\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000\070\002" +
    "\uffdf\004\uffdf\006\uffdf\010\uffdf\012\uffdf\014\uffdf\016\034" +
    "\017\027\020\040\021\031\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\035\uffdf\036\uffdf" +
    "\041\uffdf\042\uffdf\044\uffdf\045\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\070\002\uffdc\004\uffdc\006\uffdc\010\uffdc" +
    "\012\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc\044\uffdc\045" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000\070\002\uffe1" +
    "\004\uffe1\006\uffe1\010\uffe1\012\uffe1\014\uffe1\016\034\017" +
    "\027\020\040\021\031\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\035\uffe1\036\uffe1\041" +
    "\uffe1\042\uffe1\044\uffe1\045\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\001\002\000\070\002\uffe0\004\uffe0\006\uffe0\010\uffe0\012" +
    "\uffe0\014\uffe0\016\034\017\027\020\040\021\031\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\035\uffe0\036\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\001\002\000\064\002\uffe3\004" +
    "\uffe3\006\uffe3\010\uffe3\012\uffe3\014\uffe3\016\034\017\027" +
    "\020\040\021\031\024\041\025\036\026\037\027\032\030" +
    "\uffe3\031\uffe3\035\uffe3\036\uffe3\041\uffe3\042\uffe3\044\uffe3" +
    "\045\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000\070\002" +
    "\uffdd\004\uffdd\006\uffdd\010\uffdd\012\uffdd\014\uffdd\016\uffdd" +
    "\017\uffdd\020\040\021\031\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\035\uffdd\036\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\045\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\001\002\000\064\002\uffe4\004\uffe4\006\uffe4\010\uffe4" +
    "\012\uffe4\014\uffe4\016\034\017\027\020\040\021\031\024" +
    "\041\025\036\026\037\027\032\030\uffe4\031\uffe4\035\uffe4" +
    "\036\uffe4\041\uffe4\042\uffe4\044\uffe4\045\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\001\002\000\070\002\uffe2\004\uffe2\006\uffe2" +
    "\010\uffe2\012\uffe2\014\uffe2\016\034\017\027\020\040\021" +
    "\031\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\035\uffe2\036\uffe2\041\uffe2\042\uffe2\044" +
    "\uffe2\045\uffe2\051\uffe2\052\uffe2\053\uffe2\001\002\000\070" +
    "\002\uffdb\004\uffdb\006\uffdb\010\uffdb\012\uffdb\014\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\035\uffdb\036" +
    "\uffdb\041\uffdb\042\uffdb\044\uffdb\045\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\001\002\000\070\002\uffe6\004\uffe6\006\uffe6\010" +
    "\uffe6\012\uffe6\014\uffe6\016\034\017\027\020\040\021\031" +
    "\022\035\023\033\024\041\025\036\026\037\027\032\030" +
    "\uffe6\031\uffe6\035\uffe6\036\uffe6\041\uffe6\042\uffe6\044\uffe6" +
    "\045\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000\070\002" +
    "\uffde\004\uffde\006\uffde\010\uffde\012\uffde\014\uffde\016\uffde" +
    "\017\uffde\020\040\021\031\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\035\uffde\036\uffde" +
    "\041\uffde\042\uffde\044\uffde\045\uffde\051\uffde\052\uffde\053" +
    "\uffde\001\002\000\034\012\060\016\034\017\027\020\040" +
    "\021\031\022\035\023\033\024\041\025\036\026\037\027" +
    "\032\030\030\031\042\001\002\000\076\002\uffc1\004\uffc1" +
    "\006\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035" +
    "\uffc1\036\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\001\002\000\040\006\065\010\uffca\016" +
    "\034\017\027\020\040\021\031\022\035\023\033\024\041" +
    "\025\036\026\037\027\032\030\030\031\042\045\uffca\001" +
    "\002\000\004\010\064\001\002\000\070\002\uffd4\004\uffd4" +
    "\006\uffd4\010\uffd4\012\uffd4\014\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\035\uffd4\036\uffd4\041\uffd4\042" +
    "\uffd4\044\uffd4\045\uffd4\051\uffd4\052\uffd4\053\uffd4\001\002" +
    "\000\070\002\uffd5\004\uffd5\006\uffd5\010\uffd5\012\uffd5\014" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\035" +
    "\uffd5\036\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\030\007\017\017\004\034" +
    "\013\037\005\040\007\043\016\047\021\050\010\056\015" +
    "\057\012\060\006\001\002\000\006\010\uffc9\045\uffc9\001" +
    "\002\000\012\044\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002" +
    "\000\012\044\ufff1\051\077\052\ufff1\053\ufff1\001\002\000" +
    "\004\056\146\001\002\000\004\044\143\001\002\000\012" +
    "\044\uffff\051\077\052\071\053\074\001\002\000\004\056" +
    "\130\001\002\000\012\044\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\001\002\000\012\044\ufffa\051\ufffa\052\ufffa\053\074\001" +
    "\002\000\004\056\101\001\002\000\012\044\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\001\002\000\004\007\102\001\002\000" +
    "\006\010\105\056\103\001\002\000\004\005\123\001\002" +
    "\000\004\010\114\001\002\000\006\005\107\022\106\001" +
    "\002\000\030\007\017\017\004\034\013\037\005\040\007" +
    "\043\016\047\021\050\010\056\015\057\012\060\006\001" +
    "\002\000\004\056\110\001\002\000\004\022\111\001\002" +
    "\000\030\007\017\017\004\034\013\037\005\040\007\043" +
    "\016\047\021\050\010\056\015\057\012\060\006\001\002" +
    "\000\042\016\034\017\027\020\040\021\031\022\035\023" +
    "\033\024\041\025\036\026\037\027\032\030\030\031\042" +
    "\044\uffec\051\uffec\052\uffec\053\uffec\001\002\000\042\016" +
    "\034\017\027\020\040\021\031\022\035\023\033\024\041" +
    "\025\036\026\037\027\032\030\030\031\042\044\uffed\051" +
    "\uffed\052\uffed\053\uffed\001\002\000\006\005\116\022\115" +
    "\001\002\000\030\007\017\017\004\034\013\037\005\040" +
    "\007\043\016\047\021\050\010\056\015\057\012\060\006" +
    "\001\002\000\004\056\117\001\002\000\004\022\120\001" +
    "\002\000\030\007\017\017\004\034\013\037\005\040\007" +
    "\043\016\047\021\050\010\056\015\057\012\060\006\001" +
    "\002\000\042\016\034\017\027\020\040\021\031\022\035" +
    "\023\033\024\041\025\036\026\037\027\032\030\030\031" +
    "\042\044\uffee\051\uffee\052\uffee\053\uffee\001\002\000\042" +
    "\016\034\017\027\020\040\021\031\022\035\023\033\024" +
    "\041\025\036\026\037\027\032\030\030\031\042\044\uffef" +
    "\051\uffef\052\uffef\053\uffef\001\002\000\004\056\124\001" +
    "\002\000\010\004\125\010\ufff4\014\ufff4\001\002\000\004" +
    "\056\103\001\002\000\006\010\ufff3\014\ufff3\001\002\000" +
    "\012\044\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002\000\004" +
    "\022\131\001\002\000\010\013\133\033\135\056\132\001" +
    "\002\000\012\044\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002" +
    "\000\004\056\103\001\002\000\012\044\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\001\002\000\004\046\136\001\002\000\004" +
    "\056\137\001\002\000\012\044\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\001\002\000\004\014\141\001\002\000\012\044\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\001\002\000\004\044\ufffe\001" +
    "\002\000\030\007\017\017\004\034\013\037\005\040\007" +
    "\043\016\047\021\050\010\056\015\057\012\060\006\001" +
    "\002\000\004\045\145\001\002\000\070\002\uffcd\004\uffcd" +
    "\006\uffcd\010\uffcd\012\uffcd\014\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\035\uffcd\036\uffcd\041\uffcd\042" +
    "\uffcd\044\uffcd\045\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002" +
    "\000\006\005\147\032\150\001\002\000\004\056\152\001" +
    "\002\000\030\007\017\017\004\034\013\037\005\040\007" +
    "\043\016\047\021\050\010\056\015\057\012\060\006\001" +
    "\002\000\042\016\034\017\027\020\040\021\031\022\035" +
    "\023\033\024\041\025\036\026\037\027\032\030\030\031" +
    "\042\044\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\004" +
    "\032\153\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\042\016\034\017\027\020\040\021" +
    "\031\022\035\023\033\024\041\025\036\026\037\027\032" +
    "\030\030\031\042\044\uffea\051\uffea\052\uffea\053\uffea\001" +
    "\002\000\012\044\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002" +
    "\000\006\014\174\056\173\001\002\000\030\007\017\017" +
    "\004\034\013\037\005\040\007\043\016\047\021\050\010" +
    "\056\015\057\012\060\006\001\002\000\032\007\017\010" +
    "\163\017\004\034\013\037\005\040\007\043\016\047\021" +
    "\050\010\056\015\057\012\060\006\001\002\000\004\010" +
    "\166\001\002\000\036\004\164\010\uffc8\016\034\017\027" +
    "\020\040\021\031\022\035\023\033\024\041\025\036\026" +
    "\037\027\032\030\030\031\042\001\002\000\070\002\uffd6" +
    "\004\uffd6\006\uffd6\010\uffd6\012\uffd6\014\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\035\uffd6\036\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\045\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\001\002\000\030\007\017\017\004\034\013\037\005\040" +
    "\007\043\016\047\021\050\010\056\015\057\012\060\006" +
    "\001\002\000\004\010\uffc7\001\002\000\070\002\uffd7\004" +
    "\uffd7\006\uffd7\010\uffd7\012\uffd7\014\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\035\uffd7\036\uffd7\041\uffd7" +
    "\042\uffd7\044\uffd7\045\uffd7\051\uffd7\052\uffd7\053\uffd7\001" +
    "\002\000\034\012\170\016\034\017\027\020\040\021\031" +
    "\022\035\023\033\024\041\025\036\026\037\027\032\030" +
    "\030\031\042\001\002\000\100\002\uffc3\004\uffc3\006\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\035\uffc3\036" +
    "\uffc3\041\uffc3\042\uffc3\044\uffc3\045\uffc3\046\171\051\uffc3" +
    "\052\uffc3\053\uffc3\001\002\000\030\007\017\017\004\034" +
    "\013\037\005\040\007\043\016\047\021\050\010\056\015" +
    "\057\012\060\006\001\002\000\070\002\uffd1\004\uffd1\006" +
    "\uffd1\010\uffd1\012\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\035\uffd1\036\uffd1\041\uffd1\042\uffd1" +
    "\044\uffd1\045\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000" +
    "\004\022\177\001\002\000\070\002\uffd2\004\uffd2\006\uffd2" +
    "\010\uffd2\012\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\035\uffd2\036\uffd2\041\uffd2\042\uffd2\044" +
    "\uffd2\045\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002\000\004" +
    "\014\176\001\002\000\070\002\uffd3\004\uffd3\006\uffd3\010" +
    "\uffd3\012\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\035\uffd3\036\uffd3\041\uffd3\042\uffd3\044\uffd3" +
    "\045\uffd3\051\uffd3\052\uffd3\053\uffd3\001\002\000\030\007" +
    "\017\017\004\034\013\037\005\040\007\043\016\047\021" +
    "\050\010\056\015\057\012\060\006\001\002\000\036\004" +
    "\201\014\uffc6\016\034\017\027\020\040\021\031\022\035" +
    "\023\033\024\041\025\036\026\037\027\032\030\030\031" +
    "\042\001\002\000\004\056\173\001\002\000\004\014\uffc5" +
    "\001\002\000\034\016\034\017\027\020\040\021\031\022" +
    "\035\023\033\024\041\025\036\026\037\027\032\030\030" +
    "\031\042\035\204\001\002\000\030\007\017\017\004\034" +
    "\013\037\005\040\007\043\016\047\021\050\010\056\015" +
    "\057\012\060\006\001\002\000\070\002\uffcc\004\uffcc\006" +
    "\uffcc\010\uffcc\012\uffcc\014\uffcc\016\034\017\027\020\040" +
    "\021\031\022\035\023\033\024\041\025\036\026\037\027" +
    "\032\030\030\031\042\035\uffcc\036\206\041\uffcc\042\uffcc" +
    "\044\uffcc\045\uffcc\051\uffcc\052\uffcc\053\uffcc\001\002\000" +
    "\030\007\017\017\004\034\013\037\005\040\007\043\016" +
    "\047\021\050\010\056\015\057\012\060\006\001\002\000" +
    "\070\002\uffcb\004\uffcb\006\uffcb\010\uffcb\012\uffcb\014\uffcb" +
    "\016\034\017\027\020\040\021\031\022\035\023\033\024" +
    "\041\025\036\026\037\027\032\030\030\031\042\035\uffcb" +
    "\036\uffcb\041\uffcb\042\uffcb\044\uffcb\045\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\001\002\000\004\002\001\001\002\000\004" +
    "\032\212\001\002\000\030\007\017\017\004\034\013\037" +
    "\005\040\007\043\016\047\021\050\010\056\015\057\012" +
    "\060\006\001\002\000\034\016\034\017\027\020\040\021" +
    "\031\022\035\023\033\024\041\025\036\026\037\027\032" +
    "\030\030\031\042\041\214\001\002\000\030\007\017\017" +
    "\004\034\013\037\005\040\007\043\016\047\021\050\010" +
    "\056\015\057\012\060\006\001\002\000\034\016\034\017" +
    "\027\020\040\021\031\022\035\023\033\024\041\025\036" +
    "\026\037\027\032\030\030\031\042\042\216\001\002\000" +
    "\030\007\017\017\004\034\013\037\005\040\007\043\016" +
    "\047\021\050\010\056\015\057\012\060\006\001\002\000" +
    "\070\002\uffcf\004\uffcf\006\uffcf\010\uffcf\012\uffcf\014\uffcf" +
    "\016\034\017\027\020\040\021\031\022\035\023\033\024" +
    "\041\025\036\026\037\027\032\030\030\031\042\035\uffcf" +
    "\036\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\034\016\034\017\027\020\040" +
    "\021\031\022\035\023\033\024\041\025\036\026\037\027" +
    "\032\030\030\031\042\042\221\001\002\000\030\007\017" +
    "\017\004\034\013\037\005\040\007\043\016\047\021\050" +
    "\010\056\015\057\012\060\006\001\002\000\070\002\uffd0" +
    "\004\uffd0\006\uffd0\010\uffd0\012\uffd0\014\uffd0\016\034\017" +
    "\027\020\040\021\031\022\035\023\033\024\041\025\036" +
    "\026\037\027\032\030\030\031\042\035\uffd0\036\uffd0\041" +
    "\uffd0\042\uffd0\044\uffd0\045\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\001\002\000\070\002\uffda\004\uffda\006\uffda\010\uffda\012" +
    "\uffda\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\035\uffda\036\uffda\041\uffda\042\uffda\044\uffda\045\uffda" +
    "\051\uffda\052\uffda\053\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\003\010\004\013\022\017\001\001\000" +
    "\006\004\222\022\017\001\001\000\006\004\217\022\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\202" +
    "\022\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\071\006\072\007\075\010\077\011\067\012\066" +
    "\013\074\001\001\000\010\004\060\021\061\022\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\056" +
    "\022\017\001\001\000\006\004\025\022\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\055\022\017\001\001\000\006\004\054\022\017\001" +
    "\001\000\006\004\053\022\017\001\001\000\006\004\052" +
    "\022\017\001\001\000\006\004\051\022\017\001\001\000" +
    "\006\004\050\022\017\001\001\000\006\004\047\022\017" +
    "\001\001\000\006\004\046\022\017\001\001\000\006\004" +
    "\045\022\017\001\001\000\006\004\044\022\017\001\001" +
    "\000\006\004\043\022\017\001\001\000\006\004\042\022" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\060\021\065\022\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\067\013\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\141\006\072\007\075" +
    "\010\077\011\067\012\066\013\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\075\012\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\112\022\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\111\022\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\121\022\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\120\022\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\133\001\001" +
    "\000\002\001\001\000\004\015\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\060\021\143\022\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\150\022\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\153\022\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\174\001\001\000\006" +
    "\004\166\022\017\001\001\000\010\004\161\017\160\022" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\161\017\164\022\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\171\022\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\177\022\017\001\001\000" +
    "\002\001\001\000\004\020\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\204\022\017\001\001\000" +
    "\002\001\001\000\006\004\206\022\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\212\022\017\001\001\000\002\001\001\000\006\004\214" +
    "\022\017\001\001\000\002\001\001\000\006\004\216\022" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\221\022\017\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 java_cup.runtime.Symbol symb= lexer.nextToken(); for(;(symb.sym==sym.error||symb.sym==sym.COMM)&&symb.sym!=sym.EOF;) symb= lexer.nextToken(); return symb; 
    }

 
  public Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

    public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lvalue ::= lvalue LBRACK expression RBRACK 
            {
              VarExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		VarExp l = (VarExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT=  new VarExp(lleft,new SubscriptVar(lleft,l.var,e)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lvalue ::= lvalue DOT ID 
            {
              VarExp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		VarExp l = (VarExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT= new VarExp(lleft,new FieldVar(ileft,l.var,sym(i))); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lvalue ::= ID LBRACK expression RBRACK 
            {
              VarExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT=  new VarExp(ileft,new SubscriptVar(ileft,
	           new SimpleVar(ileft,sym(i)),e)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lvalue ::= ID 
            {
              VarExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new VarExp(ileft,new SimpleVar(ileft,sym(i))); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // field_list ::= ID EQ expression COMMA field_list 
            {
              FieldExpList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldExpList l = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FieldExpList(lleft,sym(i),e,l); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // field_list ::= ID EQ expression 
            {
              FieldExpList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FieldExpList(ileft,sym(i),e,null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_list ::= expression COMMA expr_list 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ExpList l = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT=new ExpList(e,l);
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_list ::= expression 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new ExpList(e,null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_seq ::= expression SEMICOLON expr_seq 
            {
              SeqExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		SeqExp l = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT=new SeqExp(eleft,new ExpList(e,l.list));
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_seq ::= expression 
            {
              SeqExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new SeqExp(eleft,new ExpList(e,null)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= IF expression THEN expression ELSE expression 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IfExp(ileft,e1,e2,e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= IF expression THEN expression 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IfExp(ileft,e1,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= LET declaration_lists IN expr_seq END 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		DecList d = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		SeqExp e = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new LetExp(lleft,d,e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= BREAK 
            {
              Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= FOR ID ASSIGN expression TO expression DO expression 
            {
              Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new ForExp(fleft,new VarDec(ileft,sym(i),null,e1),e2,e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= WHILE expression DO expression 
            {
              Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new WhileExp(wleft,e1,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= ID LBRACK expression RBRACK OF expression 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 
		  RESULT = new ArrayExp(ileft,sym(i),e1,e2); 
		  
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= ID LBRACE RBRACE 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new RecordExp(ileft,sym(i),null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= ID LBRACE field_list RBRACE 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		FieldExpList f = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new RecordExp(ileft,sym(i),f); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= LPAREN RPAREN 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT=new SeqExp(eleft,null);  
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= LPAREN expr_seq RPAREN 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		SeqExp e = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= ID LPAREN RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new CallExp(ileft,sym(i),null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= ID LPAREN expr_list RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ExpList e = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new CallExp(ileft,sym(i),e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= lvalue ASSIGN expression 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		VarExp l = (VarExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new AssignExp(lleft,((VarExp)l).var,e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= lvalue 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		VarExp l = (VarExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = l; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= MINUS expression 
            {
              Exp RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(mleft,new IntExp(mleft,0),OpExp.UMINUS,e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression DIVIDE expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.DIV,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression TIMES expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.MUL ,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression PLUS expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.PLUS,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression MINUS expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.MINUS,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression LT expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.LT,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression LE expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.LE,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression GT expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.GT,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression GE expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.GE,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression EQ expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.EQ,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression NEQ expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.NE,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression OR expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.OR,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression AND expression 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.AND,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= NIL 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new NilExp(nleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= INT 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IntExp(nleft,n); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= STRING 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new StringExp(sleft,s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_declaration ::= VAR ID COLON ID ASSIGN expression 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT= new VarDec(vleft,sym(i1),new NameTy(i2left,sym(i2)),e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_declaration ::= VAR ID ASSIGN expression 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT= new VarDec(vleft,sym(i),null,e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_declaration ::= FUNCTION ID LPAREN RPAREN COLON ID EQ expression 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FunctionDec(fleft,sym(i),null,new NameTy(tyleft,sym(ty)),e,null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_declaration ::= FUNCTION ID LPAREN RPAREN EQ expression 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FunctionDec(fleft,sym(i),null,null,e,null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_declaration ::= FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ expression 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FunctionDec(fleft,sym(i),t,new NameTy(tyleft,sym(ty)),e,null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_declaration ::= FUNCTION ID LPAREN type_fields RPAREN EQ expression 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FunctionDec(fleft,sym(i),t,null,e,null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_declarations ::= function_declaration function_declarations 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FunctionDec fs = (FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FunctionDec(fleft,f.name,f.params,f.result,f.body,fs); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*function_declarations*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_declarations ::= function_declaration 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=f;
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*function_declarations*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_field ::= ID COLON ID 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FieldList(i1left,sym(i1),sym(i2),null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type_field*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_fields ::= ID COLON ID COMMA type_fields 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldList ts = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FieldList(i1left,sym(i1),sym(i2),ts); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_fields ::= ID COLON ID 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new FieldList(i1left,sym(i1),sym(i2),null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= ARRAY OF ID 
            {
              Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new ArrayTy(aleft,sym(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= LBRACE type_fields RBRACE 
            {
              Ty RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		FieldList t = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT=new RecordTy(lleft,t); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= ID 
            {
              Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new NameTy(ileft,sym(i)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declaration ::= TYPE ID EQ type 
            {
              TypeDec RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new TypeDec(tyleft,sym(i),t,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_declarations ::= type_declaration type_declarations 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		TypeDec ts = (TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=new TypeDec(tleft,t.name,t.ty,ts);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_declarations ::= type_declaration 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=t;
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_list ::= function_declarations 
            {
              Dec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FunctionDec t = (FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=t;
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_list ::= variable_declaration 
            {
              Dec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		VarDec t = (VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=t;
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_list ::= type_declarations 
            {
              Dec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT=t;
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_lists ::= declaration_list declaration_lists 
            {
              DecList RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Dec t = (Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		DecList ts = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT=new DecList(t,ts);
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*declaration_lists*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_lists ::= 
            {
              DecList RESULT = null;
		 RESULT=null;
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*declaration_lists*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expression 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

