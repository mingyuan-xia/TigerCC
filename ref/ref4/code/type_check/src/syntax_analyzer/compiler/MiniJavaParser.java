package syntax_analyzer.compiler;

import code.*;
import java.util.*;
import java.io.*;

import syntax_analyzer.compiler.visitor.*;

import org.eclipse.swt.widgets.Text;

import syntax_analyzer.compiler.model.ASTAndExpression;
import syntax_analyzer.compiler.model.ASTArrayAssignmentStatement;
import syntax_analyzer.compiler.model.ASTArrayLength;
import syntax_analyzer.compiler.model.ASTArrayLookUp;
import syntax_analyzer.compiler.model.ASTArrayType;
import syntax_analyzer.compiler.model.ASTAssignmentStatement;
import syntax_analyzer.compiler.model.ASTBlock;
import syntax_analyzer.compiler.model.ASTBooleanType;
import syntax_analyzer.compiler.model.ASTClassDeclaration;
import syntax_analyzer.compiler.model.ASTClassExtendsDeclaration;
import syntax_analyzer.compiler.model.ASTCompareExpression;
import syntax_analyzer.compiler.model.ASTExpression;
import syntax_analyzer.compiler.model.ASTFalseLiteral;
import syntax_analyzer.compiler.model.ASTFormalParameter;
import syntax_analyzer.compiler.model.ASTIdentifier;
import syntax_analyzer.compiler.model.ASTIfStatement;
import syntax_analyzer.compiler.model.ASTIntegerLiteral;
import syntax_analyzer.compiler.model.ASTIntegerType;
import syntax_analyzer.compiler.model.ASTMainClass;
import syntax_analyzer.compiler.model.ASTMainMethodDeclaration;
import syntax_analyzer.compiler.model.ASTMessageSend;
import syntax_analyzer.compiler.model.ASTMethodDeclaration;
import syntax_analyzer.compiler.model.ASTMinusExpression;
import syntax_analyzer.compiler.model.ASTNotExpression;
import syntax_analyzer.compiler.model.ASTPlusExpression;
import syntax_analyzer.compiler.model.ASTPrintStatement;
import syntax_analyzer.compiler.model.ASTRoot;
import syntax_analyzer.compiler.model.ASTStatement;
import syntax_analyzer.compiler.model.ASTTimesExpression;
import syntax_analyzer.compiler.model.ASTTrueLiteral;
import syntax_analyzer.compiler.model.ASTType;
import syntax_analyzer.compiler.model.ASTVariableDeclaration;
import syntax_analyzer.compiler.model.ASTWhileStatement;
import syntax_analyzer.compiler.model.Node;
import syntax_analyzer.compiler.model.SimpleNode;

/**
 * I've do a lot of changes for Highlight and Token Record.
 * 
 * @author Jessie
 * 
 */

/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJavaParser.java */

public class MiniJavaParser/* @bgen(jjtree) */implements
		MiniJavaParserTreeConstants, MiniJavaParserConstants {/* @bgen(jjtree) */
	protected JJTMiniJavaParserState jjtree = new JJTMiniJavaParserState();
	protected Text errorArea;
	protected java.io.InputStream stream;

	public static void main(String args[]) throws Exception {

	}

	public void setText(Text errorArea) {
		this.errorArea = errorArea;
	}

	/***************************************************************************
	 * The MiniJava Grammar Starts Here *
	 **************************************************************************/
	final public ASTRoot Goal() {
		/* @bgen(jjtree) Root */
		ASTRoot jjtn000 = new ASTRoot(JJTROOT);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			border = MainClass();
			label_1: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case CLASS:
					;
					break;
				default:
					jj_la1[0] = jj_gen;
					break label_1;
				}
				border.expandBorder(TypeDeclaration());
			}
			jj_consume_token(0);
			jjtree.closeNodeScope(jjtn000, true);
			jjtn000.setBorder(border);
			jjtc000 = false;
			{
				if (true)
					return jjtn000;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public NodeBorder MainClass() {
		/* @bgen(jjtree) MainClass */
		ASTMainClass jjtn000 = new ASTMainClass(JJTMAINCLASS);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			Token beginToken = jj_consume_token(CLASS);
			border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			Identifier();
			jj_consume_token(LBRACE);
			MainMethodDeclaration();
			Token endToken = jj_consume_token(RBRACE);
			System.out.println("endline" + endToken.endLine);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			jjtn000.setBorder(border);
			return border.copy();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
			return new NodeBorder();
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}

	}

	final public NodeBorder MainMethodDeclaration() {
		/* @bgen(jjtree) MainMethodDeclaration */
		ASTMainMethodDeclaration jjtn000 = new ASTMainMethodDeclaration(
				JJTMAINMETHODDECLARATION);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			Token beginToken = jj_consume_token(PUBLIC);
			border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			jj_consume_token(STATIC);
			jj_consume_token(VOID);
			jj_consume_token(MAIN);
			jj_consume_token(LPAREN);
			jj_consume_token(STRING);
			jj_consume_token(LSQPAREN);
			jj_consume_token(RSQPAREN);
			Identifier();
			jj_consume_token(RPAREN);
			jj_consume_token(LBRACE);
			Statement();
			Token endToken = jj_consume_token(RBRACE);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			jjtn000.setBorder(border);
			return border.copy();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw
				// (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			/*
			 * {if (true) {System.out.println("aaa"); throw (Error)jjte000; } }
			 */
			return new NodeBorder();
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}

	}

	final public NodeBorder TypeDeclaration() {
		NodeBorder border = null;
		if (jj_2_1(3)) {
			ASTClassDeclaration jjtn001 = new ASTClassDeclaration(
					JJTCLASSDECLARATION);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				border = ClassDeclaration();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte001;
					}
				}
				if (jjte001 instanceof ParseException) {
					// {if (true) throw (ParseException)jjte001;}
					errorArea.setText(((ParseException) jjte001).getMessage()
							+ "\n");
					ReInit(stream);
				}
				// {if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			jjtn001.setBorder(border);
		} else {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case CLASS:
				ASTClassExtendsDeclaration jjtn002 = new ASTClassExtendsDeclaration(
						JJTCLASSEXTENDSDECLARATION);

				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				try {
					border = ClassExtendsDeclaration();
					System.out.println("borderborder" + border.getBeginLine());
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte002;}
						errorArea.setText(((ParseException) jjte002)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte002;}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, true);
					}
				}
				jjtn002.setBorder(border);
				break;
			default:
				jj_la1[1] = jj_gen;
				try {
					jj_consume_token(-1);
				} catch (ParseException ex) {
					errorArea
							.setText(((ParseException) ex).getMessage() + "\n");
					ReInit(stream);
				}
			}
		}
		return border.copy();
	}

	final public NodeBorder ClassDeclaration() {
		try {
			NodeBorder border = null;
			Token beginToken = jj_consume_token(CLASS);
			border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);

			Identifier();
			jj_consume_token(LBRACE);
			label_2: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case BOOLEAN:
				case INTEGER:
				case IDENTIFIER:
					;
					break;
				default:
					jj_la1[2] = jj_gen;
					break label_2;
				}
				VarDeclaration();
			}
			label_3: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case PUBLIC:
					;
					break;
				default:
					jj_la1[3] = jj_gen;
					break label_3;
				}
				MethodDeclaration();
			}
			Token endToken = jj_consume_token(RBRACE);
			border.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}

	}

	final public NodeBorder ClassExtendsDeclaration() {
		System.out.println("ClassExtendsDeclaration");
		try {
			NodeBorder border = null;
			Token beginToken = jj_consume_token(CLASS);

			border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			Identifier();
			jj_consume_token(EXTENDS);
			Identifier();
			jj_consume_token(LBRACE);
			label_4: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case BOOLEAN:
				case INTEGER:
				case IDENTIFIER:
					;
					break;
				default:
					jj_la1[4] = jj_gen;
					break label_4;
				}
				VarDeclaration();
			}
			label_5: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case PUBLIC:
					;
					break;
				default:
					jj_la1[5] = jj_gen;
					break label_5;
				}
				MethodDeclaration();
			}
			Token endToken = jj_consume_token(RBRACE);
			border.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}

	}

	final public NodeBorder VarDeclaration() {
		/* @bgen(jjtree) VariableDeclaration */
		ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(
				JJTVARIABLEDECLARATION);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			border = Type();
			Identifier();
			Token endToken = jj_consume_token(SEMICOLON);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		jjtn000.setBorder(border);
		return border.copy();
	}

	final public NodeBorder MethodDeclaration() {
		/* @bgen(jjtree) MethodDeclaration */
		ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(
				JJTMETHODDECLARATION);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			Token beginToken = jj_consume_token(PUBLIC);
			border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			Type();
			Identifier();
			jj_consume_token(LPAREN);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case BOOLEAN:
			case INTEGER:
			case IDENTIFIER:
				FormalParameterList();
				break;
			default:
				jj_la1[6] = jj_gen;
				;
			}
			jj_consume_token(RPAREN);
			jj_consume_token(LBRACE);
			label_6: while (true) {
				if (jj_2_2(2)) {
					;
				} else {
					break label_6;
				}
				VarDeclaration();
			}
			label_7: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LBRACE:
				case IF:
				case WHILE:
				case PRINT:
				case IDENTIFIER:
					;
					break;
				default:
					jj_la1[7] = jj_gen;
					break label_7;
				}
				Statement();
			}
			jj_consume_token(RETURN);
			Expression();
			jj_consume_token(SEMICOLON);
			Token endToken = jj_consume_token(RBRACE);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		jjtn000.setBorder(border);
		return border.copy();
	}

	final public NodeBorder FormalParameterList() {
		NodeBorder border = FormalParameter();
		label_8: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 47:
				;
				break;
			default:
				jj_la1[8] = jj_gen;
				break label_8;
			}
			border.expandBorder(FormalParameterRest());
		}
		return border.copy();
	}

	final public NodeBorder FormalParameter() {
		/* @bgen(jjtree) FormalParameter */
		ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			border = Type();
			border.expandBorder(Identifier());
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		jjtn000.setBorder(border);
		return border.copy();
	}

	final public NodeBorder FormalParameterRest() {
		try {
			Token beginToken = jj_consume_token(47);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			border.expandBorder(FormalParameter());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder Type() {
		/* @bgen(jjtree) Type */
		ASTType jjtn000 = new ASTType(JJTTYPE);
		NodeBorder border = null;
		NodeBorder border2 = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_3(3)) {
				ASTArrayType jjtn001 = new ASTArrayType(JJTARRAYTYPE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					border = border2 = ArrayType();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, true);
					}
				}
				jjtn001.setBorder(border2);
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case BOOLEAN:
					ASTBooleanType jjtn002 = new ASTBooleanType(JJTBOOLEANTYPE);
					boolean jjtc002 = true;
					jjtree.openNodeScope(jjtn002);
					try {
						border = border2 = BooleanType();
					} catch (Throwable jjte002) {
						if (jjtc002) {
							jjtree.clearNodeScope(jjtn002);
							jjtc002 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte002 instanceof RuntimeException) {
							{
								if (true)
									throw (RuntimeException) jjte002;
							}
						}
						if (jjte002 instanceof ParseException) {
							{
								if (true)
									throw (ParseException) jjte002;
							}
						}
						{
							if (true)
								throw (Error) jjte002;
						}
					} finally {
						if (jjtc002) {
							jjtree.closeNodeScope(jjtn002, true);
						}
					}
					jjtn002.setBorder(border2);
					break;
				case INTEGER:
					ASTIntegerType jjtn003 = new ASTIntegerType(JJTINTEGERTYPE);
					boolean jjtc003 = true;
					jjtree.openNodeScope(jjtn003);
					try {
						border = border2 = IntegerType();
					} catch (Throwable jjte003) {
						if (jjtc003) {
							jjtree.clearNodeScope(jjtn003);
							jjtc003 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte003 instanceof RuntimeException) {
							{
								if (true)
									throw (RuntimeException) jjte003;
							}
						}
						if (jjte003 instanceof ParseException) {
							{
								if (true)
									throw (ParseException) jjte003;
							}
						}
						{
							if (true)
								throw (Error) jjte003;
						}
					} finally {
						if (jjtc003) {
							jjtree.closeNodeScope(jjtn003, true);
						}
					}
					jjtn003.setBorder(border2);
					break;
				case IDENTIFIER:
					ASTIdentifier jjtn004 = new ASTIdentifier(JJTIDENTIFIER);
					boolean jjtc004 = true;
					jjtree.openNodeScope(jjtn004);
					try {
						border = border2 = Identifier();
					} catch (Throwable jjte004) {
						if (jjtc004) {
							jjtree.clearNodeScope(jjtn004);
							jjtc004 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte004 instanceof RuntimeException) {
							{
								if (true)
									throw (RuntimeException) jjte004;
							}
						}
						if (jjte004 instanceof ParseException) {
							{
								if (true)
									throw (ParseException) jjte004;
							}
						}
						{
							if (true)
								throw (Error) jjte004;
						}
					} finally {
						if (jjtc004) {
							jjtree.closeNodeScope(jjtn004, true);
						}
					}
					jjtn004.setBorder(border2);
					break;
				default:
					jj_la1[9] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		jjtn000.setBorder(border);
		return border.copy();
	}

	final public NodeBorder ArrayType() {

		try {
			Token beginToken = jj_consume_token(INTEGER);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			jj_consume_token(LSQPAREN);
			Token endToken = jj_consume_token(RSQPAREN);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder BooleanType() {

		try {
			Token beginToken = jj_consume_token(BOOLEAN);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder IntegerType() {
		NodeBorder border = null;

		try {
			Token beginToken = jj_consume_token(INTEGER);
			border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder Statement() {
		/* @bgen(jjtree) Statement */
		ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case LBRACE:
				ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
				NodeBorder border1 = null;
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					border = border1 = Block();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, true);
					}
					jjtn001.setBorder(border1);
				}
				break;
			default:
				jj_la1[10] = jj_gen;
				if (jj_2_4(2)) {
					ASTAssignmentStatement jjtn002 = new ASTAssignmentStatement(
							JJTASSIGNMENTSTATEMENT);
					NodeBorder border2 = null;
					boolean jjtc002 = true;
					jjtree.openNodeScope(jjtn002);
					try {
						border = border2 = AssignmentStatement();
					} catch (Throwable jjte002) {
						if (jjtc002) {
							jjtree.clearNodeScope(jjtn002);
							jjtc002 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte002 instanceof RuntimeException) {
							{
								if (true)
									throw (RuntimeException) jjte002;
							}
						}
						if (jjte002 instanceof ParseException) {
							// {if (true) throw (ParseException)jjte002;}
							errorArea.setText(((ParseException) jjte002)
									.getMessage()
									+ "\n");
							ReInit(stream);
						}
						// {if (true) throw (Error)jjte002;}
					} finally {
						if (jjtc002) {
							jjtree.closeNodeScope(jjtn002, true);
						}
						jjtn002.setBorder(border2);
					}
				} else if (jj_2_5(2)) {
					ASTArrayAssignmentStatement jjtn003 = new ASTArrayAssignmentStatement(
							JJTARRAYASSIGNMENTSTATEMENT);
					NodeBorder border3 = null;
					boolean jjtc003 = true;
					jjtree.openNodeScope(jjtn003);
					try {
						border = border3 = ArrayAssignmentStatement();
					} catch (Throwable jjte003) {
						if (jjtc003) {
							jjtree.clearNodeScope(jjtn003);
							jjtc003 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte003 instanceof RuntimeException) {
							{
								if (true)
									throw (RuntimeException) jjte003;
							}
						}
						if (jjte003 instanceof ParseException) {
							// {if (true) throw (ParseException)jjte003;}
							errorArea.setText(((ParseException) jjte003)
									.getMessage()
									+ "\n");
							ReInit(stream);
						}
						// {if (true) throw (Error)jjte003;}
					} finally {
						if (jjtc003) {
							jjtree.closeNodeScope(jjtn003, true);
						}
						jjtn003.setBorder(border3);
					}
				} else {
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case IF:
						ASTIfStatement jjtn004 = new ASTIfStatement(
								JJTIFSTATEMENT);
						NodeBorder border4 = null;
						boolean jjtc004 = true;
						jjtree.openNodeScope(jjtn004);
						try {
							border = border4 = IfStatement();
						} catch (Throwable jjte004) {
							if (jjtc004) {
								jjtree.clearNodeScope(jjtn004);
								jjtc004 = false;
							} else {
								jjtree.popNode();
							}
							if (jjte004 instanceof RuntimeException) {
								{
									if (true)
										throw (RuntimeException) jjte004;
								}
							}
							if (jjte004 instanceof ParseException) {
								// {if (true) throw (ParseException)jjte004;}
								errorArea.setText(((ParseException) jjte004)
										.getMessage()
										+ "\n");
								ReInit(stream);
							}
							// {if (true) throw (Error)jjte004;}
						} finally {
							if (jjtc004) {
								jjtree.closeNodeScope(jjtn004, true);
							}
							jjtn004.setBorder(border4);
						}
						break;
					case WHILE:
						ASTWhileStatement jjtn005 = new ASTWhileStatement(
								JJTWHILESTATEMENT);
						NodeBorder border5 = null;
						boolean jjtc005 = true;
						jjtree.openNodeScope(jjtn005);
						try {
							border = border5 = WhileStatement();
						} catch (Throwable jjte005) {
							if (jjtc005) {
								jjtree.clearNodeScope(jjtn005);
								jjtc005 = false;
							} else {
								jjtree.popNode();
							}
							if (jjte005 instanceof RuntimeException) {
								{
									if (true)
										throw (RuntimeException) jjte005;
								}
							}
							if (jjte005 instanceof ParseException) {
								// {if (true) throw (ParseException)jjte005;}
								errorArea.setText(((ParseException) jjte005)
										.getMessage()
										+ "\n");
								ReInit(stream);
							}
							// {if (true) throw (Error)jjte005;}
						} finally {
							if (jjtc005) {
								jjtree.closeNodeScope(jjtn005, true);
							}
							jjtn005.setBorder(border5);
						}
						break;
					case PRINT:
						ASTPrintStatement jjtn006 = new ASTPrintStatement(
								JJTPRINTSTATEMENT);
						NodeBorder border6 = null;

						boolean jjtc006 = true;
						jjtree.openNodeScope(jjtn006);
						try {
							border = border6 = PrintStatement();
						} catch (Throwable jjte006) {
							if (jjtc006) {
								jjtree.clearNodeScope(jjtn006);
								jjtc006 = false;
							} else {
								jjtree.popNode();
							}
							if (jjte006 instanceof RuntimeException) {
								{
									if (true)
										throw (RuntimeException) jjte006;
								}
							}
							if (jjte006 instanceof ParseException) {
								// {if (true) throw (ParseException)jjte006;}
								errorArea.setText(((ParseException) jjte006)
										.getMessage()
										+ "\n");
								ReInit(stream);
							}
							// {if (true) throw (Error)jjte006;}
						} finally {
							if (jjtc006) {
								jjtree.closeNodeScope(jjtn006, true);
							}
							jjtn006.setBorder(border6);
						}
						break;
					default:
						jj_la1[11] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
					}
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		jjtn000.setBorder(border);
		return border.copy();
	}

	final public NodeBorder Block() {
		try {
			Token beginToken = jj_consume_token(LBRACE);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);

			label_9: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LBRACE:
				case IF:
				case WHILE:
				case PRINT:
				case IDENTIFIER:
					;
					break;
				default:
					jj_la1[12] = jj_gen;
					break label_9;
				}
				Statement();
			}
			Token endToken = jj_consume_token(RBRACE);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder AssignmentStatement() {
		try {
			NodeBorder border = Identifier();
			jj_consume_token(ASSIGN);
			Expression();
			Token endToken = jj_consume_token(SEMICOLON);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder ArrayAssignmentStatement() {
		try {
			NodeBorder border = Identifier();
			jj_consume_token(LSQPAREN);
			Expression();
			jj_consume_token(RSQPAREN);
			jj_consume_token(ASSIGN);
			Expression();
			Token endToken = jj_consume_token(SEMICOLON);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder IfStatement() {
		try {
			Token beginToken = jj_consume_token(IF);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			jj_consume_token(LPAREN);
			Expression();
			jj_consume_token(RPAREN);
			Statement();
			jj_consume_token(ELSE);
			border.expandBorder(Statement());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}

	}

	final public NodeBorder WhileStatement() {
		try {
			Token beginToken = jj_consume_token(WHILE);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			jj_consume_token(LPAREN);
			Expression();
			jj_consume_token(RPAREN);
			border.expandBorder(Statement());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder PrintStatement() {
		try {
			Token beginToken = jj_consume_token(PRINT);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			jj_consume_token(LPAREN);
			Expression();
			jj_consume_token(RPAREN);
			Token endToken = jj_consume_token(SEMICOLON);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder Expression() {
		/* @bgen(jjtree) Expression */
		
		ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_6(2147483647)) {
				ASTAndExpression jjtn001 = new ASTAndExpression(
						JJTANDEXPRESSION);
				NodeBorder border1 = null;
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					border = border1 = AndExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte001;}
						errorArea.setText(((ParseException) jjte001)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte001;}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, true);
					}
				}
				jjtn001.setBorder(border1);
			} else if (jj_2_7(2147483647)) {
				ASTCompareExpression jjtn002 = new ASTCompareExpression(
						JJTCOMPAREEXPRESSION);
				boolean jjtc002 = true;
				NodeBorder border2 = null;
				jjtree.openNodeScope(jjtn002);
				try {
					border = border2 = CompareExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte002;}
						errorArea.setText(((ParseException) jjte002)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte002;}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, true);
					}
					jjtn002.setBorder(border2);
				}
			} else if (jj_2_8(2147483647)) {
				ASTPlusExpression jjtn003 = new ASTPlusExpression(
						JJTPLUSEXPRESSION);
				NodeBorder border3 = null;

				boolean jjtc003 = true;
				jjtree.openNodeScope(jjtn003);
				try {
					border = border3 = PlusExpression();
				} catch (Throwable jjte003) {
					if (jjtc003) {
						jjtree.clearNodeScope(jjtn003);
						jjtc003 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte003 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte003;
						}
					}
					if (jjte003 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte003;}
						errorArea.setText(((ParseException) jjte003)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte003;}
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, true);
					}
					jjtn003.setBorder(border3);
				}
			} else if (jj_2_9(2147483647)) {
				ASTMinusExpression jjtn004 = new ASTMinusExpression(
						JJTMINUSEXPRESSION);
				NodeBorder border4 = null;

				boolean jjtc004 = true;
				jjtree.openNodeScope(jjtn004);
				try {
					border = border4 = MinusExpression();
				} catch (Throwable jjte004) {
					if (jjtc004) {
						jjtree.clearNodeScope(jjtn004);
						jjtc004 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte004 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte004;
						}
					}
					if (jjte004 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte004;}
						errorArea.setText(((ParseException) jjte004)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte004;}
				} finally {
					if (jjtc004) {
						jjtree.closeNodeScope(jjtn004, true);
					}
				}
				jjtn004.setBorder(border4);
			} else if (jj_2_10(2147483647)) {
				ASTTimesExpression jjtn005 = new ASTTimesExpression(
						JJTTIMESEXPRESSION);
				NodeBorder border5 = null;
				boolean jjtc005 = true;
				jjtree.openNodeScope(jjtn005);
				try {
					border = border5 = TimesExpression();
				} catch (Throwable jjte005) {
					if (jjtc005) {
						jjtree.clearNodeScope(jjtn005);
						jjtc005 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte005 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte005;
						}
					}
					if (jjte005 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte005;}
						errorArea.setText(((ParseException) jjte005)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte005;}
				} finally {
					if (jjtc005) {
						jjtree.closeNodeScope(jjtn005, true);
					}
					jjtn005.setBorder(border5);
				}
			} else if (jj_2_11(2147483647)) {
				ASTArrayLookUp jjtn006 = new ASTArrayLookUp(JJTARRAYLOOKUP);
				NodeBorder border6 = null;
				boolean jjtc006 = true;
				jjtree.openNodeScope(jjtn006);
				try {
					border = border6 = ArrayLookup();
				} catch (Throwable jjte006) {
					if (jjtc006) {
						jjtree.clearNodeScope(jjtn006);
						jjtc006 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte006 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte006;
						}
					}
					if (jjte006 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte006;}
						errorArea.setText(((ParseException) jjte006)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte006;}
				} finally {
					if (jjtc006) {
						jjtree.closeNodeScope(jjtn006, true);
					}
					jjtn006.setBorder(border6);
				}
			} else if (jj_2_12(2147483647)) {
				ASTArrayLength jjtn007 = new ASTArrayLength(JJTARRAYLENGTH);
				NodeBorder border7 = null;
				boolean jjtc007 = true;
				jjtree.openNodeScope(jjtn007);
				try {
					border = border7 = ArrayLength();
				} catch (Throwable jjte007) {
					if (jjtc007) {
						jjtree.clearNodeScope(jjtn007);
						jjtc007 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte007 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte007;
						}
					}
					if (jjte007 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte007;}
						errorArea.setText(((ParseException) jjte007)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte007;}
				} finally {
					if (jjtc007) {
						jjtree.closeNodeScope(jjtn007, true);
					}
				}
				jjtn007.setBorder(border7);
			} else if (jj_2_13(2147483647)) {
				ASTMessageSend jjtn008 = new ASTMessageSend(JJTMESSAGESEND);
				NodeBorder border8 = null;
				boolean jjtc008 = true;
				jjtree.openNodeScope(jjtn008);
				try {
					border = border8 = MessageSend();
				} catch (Throwable jjte008) {
					if (jjtc008) {
						jjtree.clearNodeScope(jjtn008);
						jjtc008 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte008 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte008;
						}
					}
					if (jjte008 instanceof ParseException) {
						// {if (true) throw (ParseException)jjte008;}
						errorArea.setText(((ParseException) jjte008)
								.getMessage()
								+ "\n");
						ReInit(stream);
					}
					// {if (true) throw (Error)jjte008;}
				} finally {
					if (jjtc008) {
						jjtree.closeNodeScope(jjtn008, true);
					}
				}
				jjtn008.setBorder(border8);
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case LPAREN:
				case NOT:
				case FALSE:
				case NEW:
				case THIS:
				case TRUE:
				case INTEGER_LITERAL:
				case IDENTIFIER:
					border = PrimaryExpression();
					break;
				default:
					jj_la1[13] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		jjtn000.setBorder(border);
		return border.copy();
	}

	final public NodeBorder AndExpression() {
		try {
			NodeBorder border = PrimaryExpression();
			jj_consume_token(AND);
		//	border.expandBorder(PrimaryExpression());
			border.expandBorder(Expression());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder CompareExpression() {
		try {
			NodeBorder border = PrimaryExpression();
			jj_consume_token(LT);
		//	border.expandBorder(PrimaryExpression());
			border.expandBorder(Expression());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder PlusExpression() {
		try {
			NodeBorder border = PrimaryExpression();
			jj_consume_token(PLUS);
		//	border.expandBorder(PrimaryExpression());
			border.expandBorder(Expression());
			
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder MinusExpression() {
		try {
			NodeBorder border = PrimaryExpression();
			jj_consume_token(MINUS);
		//	border.expandBorder(PrimaryExpression());
			border.expandBorder(Expression());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder TimesExpression() {
		try {
			NodeBorder border = PrimaryExpression();
			jj_consume_token(48);
		//	border.expandBorder(PrimaryExpression());
			border.expandBorder(Expression());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder ArrayLookup() {
		try {
			NodeBorder border = PrimaryExpression();
			jj_consume_token(LSQPAREN);
			PrimaryExpression();
			Token endToken = jj_consume_token(RSQPAREN);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder ArrayLength() {
		try {
			NodeBorder border = PrimaryExpression();
			jj_consume_token(DOT);
			Token endToken = jj_consume_token(LENGTH);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border;
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder MessageSend() {
		try {
			NodeBorder border = PrimaryExpression();
			jj_consume_token(DOT);
			Identifier();
			jj_consume_token(LPAREN);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case LPAREN:
			case NOT:
			case FALSE:
			case NEW:
			case THIS:
			case TRUE:
			case INTEGER_LITERAL:
			case IDENTIFIER:
				ExpressionList();
				break;
			default:
				jj_la1[14] = jj_gen;
				;
			}
			Token endToken = jj_consume_token(RPAREN);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder ExpressionList() {
		NodeBorder border = Expression();
		label_10: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 47:
				;
				break;
			default:
				jj_la1[15] = jj_gen;
				break label_10;
			}
			border.expandBorder(ExpressionRest());
		}
		return border.copy();
	}

	final public NodeBorder ExpressionRest() {
		try {
			Token beginToken = jj_consume_token(47);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			border.expandBorder(Expression());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder PrimaryExpression() {
		NodeBorder border = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case INTEGER_LITERAL:
			ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
			NodeBorder border1 = null;
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				border = border1 = IntegerLiteral();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte001;
					}
				}
				if (jjte001 instanceof ParseException) {
					// {if (true) throw (ParseException)jjte001;}
					errorArea.setText(((ParseException) jjte001).getMessage()
							+ "\n");
					ReInit(stream);
				}
				// {if (true) throw (Error)jjte001;}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
				jjtn001.setBorder(border1);
			}
			break;
		case TRUE:
			ASTTrueLiteral jjtn002 = new ASTTrueLiteral(JJTTRUELITERAL);
			NodeBorder border2 = null;
			boolean jjtc002 = true;
			jjtree.openNodeScope(jjtn002);
			try {
				border = border2 = TrueLiteral();
			} catch (Throwable jjte002) {
				if (jjtc002) {
					jjtree.clearNodeScope(jjtn002);
					jjtc002 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte002 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte002;
					}
				}
				if (jjte002 instanceof ParseException) {
					// {if (true) throw (ParseException)jjte002;}
					errorArea.setText(((ParseException) jjte002).getMessage()
							+ "\n");
					ReInit(stream);
				}
				// {if (true) throw (Error)jjte002;}
			} finally {
				if (jjtc002) {
					jjtree.closeNodeScope(jjtn002, true);
				}
			}
			jjtn002.setBorder(border2);
			break;
		case FALSE:
			ASTFalseLiteral jjtn003 = new ASTFalseLiteral(JJTFALSELITERAL);
			NodeBorder border3 = null;
			boolean jjtc003 = true;
			jjtree.openNodeScope(jjtn003);
			try {
				border = border3 = FalseLiteral();
			} catch (Throwable jjte003) {
				if (jjtc003) {
					jjtree.clearNodeScope(jjtn003);
					jjtc003 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte003 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte003;
					}
				}
				if (jjte003 instanceof ParseException) {
					// {if (true) throw (ParseException)jjte003;}
					errorArea.setText(((ParseException) jjte003).getMessage()
							+ "\n");
					ReInit(stream);
				}
				// {if (true) throw (Error)jjte003;}
			} finally {
				if (jjtc003) {
					jjtree.closeNodeScope(jjtn003, true);
				}
			}
			jjtn003.setBorder(border3);
			break;
		case IDENTIFIER:
			border = Identifier();
			break;
		case THIS:
			border = ThisExpression();
			break;
		default:
			jj_la1[16] = jj_gen;
			if (jj_2_14(3)) {
				border = ArrayAllocationExpression();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case NEW:
					border = AllocationExpression();
					break;
				case NOT:
					ASTNotExpression jjtn004 = new ASTNotExpression(
							JJTNOTEXPRESSION);
					NodeBorder border4 = null;
					boolean jjtc004 = true;
					jjtree.openNodeScope(jjtn004);
					try {
						border = border4 = NotExpression();
					} catch (Throwable jjte004) {
						if (jjtc004) {
							jjtree.clearNodeScope(jjtn004);
							jjtc004 = false;
						} else {
							jjtree.popNode();
						}
						if (jjte004 instanceof RuntimeException) {
							{
								if (true)
									throw (RuntimeException) jjte004;
							}
						}
						if (jjte004 instanceof ParseException) {
							// {if (true) throw (ParseException)jjte004;}
							errorArea.setText(((ParseException) jjte004)
									.getMessage()
									+ "\n");
							ReInit(stream);
						}
						{
							if (true)
								throw (Error) jjte004;
						}
					} finally {
						if (jjtc004) {
							jjtree.closeNodeScope(jjtn004, true);
						}
						jjtn004.setBorder(border4);
					}
					break;
				case LPAREN:
					border = BracketExpression();
					break;
				default:
					jj_la1[17] = jj_gen;
					try {
						jj_consume_token(-1);
					} catch (ParseException ex) {
						errorArea.setText(((ParseException) ex).getMessage()
								+ "\n");
						ReInit(stream);
					}
				}
			}
		}
		return border.copy();
	}

	final public NodeBorder IntegerLiteral() {

		try {
			Token beginToken = jj_consume_token(INTEGER_LITERAL);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder TrueLiteral() {

		try {
			Token beginToken = jj_consume_token(TRUE);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder FalseLiteral() {

		try {
			Token beginToken = jj_consume_token(FALSE);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder Identifier() {
		ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
		NodeBorder border = null;
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			Token beginToken = jj_consume_token(IDENTIFIER);
			border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			jjtn000.setBorder(border);
			return border.copy();
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				// {if (true) throw (ParseException)jjte000;}
				errorArea.setText(((ParseException) jjte000).getMessage()
						+ "\n");
				ReInit(stream);
			}
			// {if (true) throw (Error)jjte000;}
			return new NodeBorder();
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public NodeBorder ThisExpression() {
		try {
			Token beginToken = jj_consume_token(THIS);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder ArrayAllocationExpression() {
		try {
			Token beginToken = jj_consume_token(NEW);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			jj_consume_token(INTEGER);
			jj_consume_token(LSQPAREN);
			Expression();
			Token endToken = jj_consume_token(RSQPAREN);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder AllocationExpression() {
		try {
			Token beginToken = jj_consume_token(NEW);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			Identifier();
			jj_consume_token(LPAREN);
			Token endToken = jj_consume_token(RPAREN);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder NotExpression() {
		try {
			Token beginToken = jj_consume_token(NOT);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			border.expandBorder(Expression());
			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final public NodeBorder BracketExpression() {
		try {
			Token beginToken = jj_consume_token(LPAREN);
			NodeBorder border = new NodeBorder(beginToken.beginLine,
					beginToken.beginColumn, beginToken.endLine,
					beginToken.endColumn);
			Expression();
			Token endToken = jj_consume_token(RPAREN);
			border
					.expandBorder(new NodeBorder(endToken.beginLine,
							endToken.beginColumn, endToken.endLine,
							endToken.endColumn));

			return border.copy();
		} catch (ParseException ex) {
			errorArea.setText(((ParseException) ex).getMessage() + "\n");
			ReInit(stream);
			return new NodeBorder();
		}
	}

	final private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	final private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	final private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	final private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	final private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	final private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	final private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	final private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	final private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	final private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	final private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	final private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(11, xla);
		}
	}

	final private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(12, xla);
		}
	}

	final private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(13, xla);
		}
	}

	final private boolean jj_3R_52() {
		if (jj_3R_33())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_53()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	final private boolean jj_3R_51() {
		if (jj_3R_52())
			return true;
		return false;
	}

	final private boolean jj_3R_50() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(DOT))
			return true;
		if (jj_3R_17())
			return true;
		if (jj_scan_token(LPAREN))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_51())
			jj_scanpos = xsp;
		if (jj_scan_token(RPAREN))
			return true;
		return false;
	}

	final private boolean jj_3R_12() {
		if (jj_3R_19())
			return true;
		if (jj_3R_17())
			return true;
		return false;
	}

	final private boolean jj_3R_32() {
		if (jj_scan_token(LPAREN))
			return true;
		if (jj_3R_33())
			return true;
		if (jj_scan_token(RPAREN))
			return true;
		return false;
	}

	final private boolean jj_3R_15() {
		if (jj_3R_17())
			return true;
		if (jj_scan_token(LSQPAREN))
			return true;
		return false;
	}

	final private boolean jj_3R_49() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(DOT))
			return true;
		if (jj_scan_token(LENGTH))
			return true;
		return false;
	}

	final private boolean jj_3R_14() {
		if (jj_3R_17())
			return true;
		if (jj_scan_token(ASSIGN))
			return true;
		return false;
	}

	final private boolean jj_3R_31() {
		if (jj_scan_token(NOT))
			return true;
		if (jj_3R_33())
			return true;
		return false;
	}

	final private boolean jj_3R_48() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(LSQPAREN))
			return true;
		if (jj_3R_16())
			return true;
		if (jj_scan_token(RSQPAREN))
			return true;
		return false;
	}

	final private boolean jj_3R_30() {
		if (jj_scan_token(NEW))
			return true;
		if (jj_3R_17())
			return true;
		if (jj_scan_token(LPAREN))
			return true;
		if (jj_scan_token(RPAREN))
			return true;
		return false;
	}

	final private boolean jj_3R_11() {
		if (jj_scan_token(CLASS))
			return true;
		if (jj_3R_17())
			return true;
		if (jj_scan_token(LBRACE))
			return true;
		return false;
	}

	final private boolean jj_3R_47() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(48))
			return true;
		if (jj_3R_16())
			return true;
		return false;
	}

	final private boolean jj_3R_18() {
		if (jj_scan_token(NEW))
			return true;
		if (jj_scan_token(INTEGER))
			return true;
		if (jj_scan_token(LSQPAREN))
			return true;
		if (jj_3R_33())
			return true;
		if (jj_scan_token(RSQPAREN))
			return true;
		return false;
	}

	final private boolean jj_3R_46() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(MINUS))
			return true;
		if (jj_3R_16())
			return true;
		return false;
	}

	final private boolean jj_3_1() {
		if (jj_3R_11())
			return true;
		return false;
	}

	final private boolean jj_3_5() {
		if (jj_3R_15())
			return true;
		return false;
	}

	final private boolean jj_3_4() {
		if (jj_3R_14())
			return true;
		return false;
	}

	final private boolean jj_3R_45() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(PLUS))
			return true;
		if (jj_3R_16())
			return true;
		return false;
	}

	final private boolean jj_3R_17() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		return false;
	}

	final private boolean jj_3R_44() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(LT))
			return true;
		if (jj_3R_16())
			return true;
		return false;
	}

	final private boolean jj_3_13() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(DOT))
			return true;
		if (jj_3R_17())
			return true;
		if (jj_scan_token(LPAREN))
			return true;
		return false;
	}

	final private boolean jj_3R_43() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(AND))
			return true;
		if (jj_3R_16())
			return true;
		return false;
	}

	final private boolean jj_3_12() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(DOT))
			return true;
		if (jj_scan_token(LENGTH))
			return true;
		return false;
	}

	final private boolean jj_3_11() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(LSQPAREN))
			return true;
		return false;
	}

	final private boolean jj_3R_42() {
		if (jj_3R_16())
			return true;
		return false;
	}

	final private boolean jj_3R_13() {
		if (jj_scan_token(INTEGER))
			return true;
		if (jj_scan_token(LSQPAREN))
			return true;
		if (jj_scan_token(RSQPAREN))
			return true;
		return false;
	}

	final private boolean jj_3_10() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(48))
			return true;
		return false;
	}

	final private boolean jj_3R_41() {
		if (jj_3R_50())
			return true;
		return false;
	}

	final private boolean jj_3_9() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(MINUS))
			return true;
		return false;
	}

	final private boolean jj_3R_40() {
		if (jj_3R_49())
			return true;
		return false;
	}

	final private boolean jj_3R_29() {
		if (jj_3R_17())
			return true;
		return false;
	}

	final private boolean jj_3_8() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(PLUS))
			return true;
		return false;
	}

	final private boolean jj_3R_39() {
		if (jj_3R_48())
			return true;
		return false;
	}

	final private boolean jj_3R_28() {
		if (jj_scan_token(31))
			return true;
		return false;
	}

	final private boolean jj_3_7() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(LT))
			return true;
		return false;
	}

	final private boolean jj_3R_27() {
		if (jj_scan_token(23))
			return true;
		return false;
	}

	final private boolean jj_3R_26() {
		if (jj_3R_32())
			return true;
		return false;
	}

	final private boolean jj_3R_38() {
		if (jj_3R_47())
			return true;
		return false;
	}

	final private boolean jj_3_6() {
		if (jj_3R_16())
			return true;
		if (jj_scan_token(AND))
			return true;
		return false;
	}

	final private boolean jj_3R_25() {
		if (jj_3R_31())
			return true;
		return false;
	}

	final private boolean jj_3_3() {
		if (jj_3R_13())
			return true;
		return false;
	}

	final private boolean jj_3R_19() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_3()) {
			jj_scanpos = xsp;
			if (jj_3R_27()) {
				jj_scanpos = xsp;
				if (jj_3R_28()) {
					jj_scanpos = xsp;
					if (jj_3R_29())
						return true;
				}
			}
		}
		return false;
	}

	final private boolean jj_3R_37() {
		if (jj_3R_46())
			return true;
		return false;
	}

	final private boolean jj_3R_24() {
		if (jj_3R_30())
			return true;
		return false;
	}

	final private boolean jj_3R_36() {
		if (jj_3R_45())
			return true;
		return false;
	}

	final private boolean jj_3_14() {
		if (jj_3R_18())
			return true;
		return false;
	}

	final private boolean jj_3R_35() {
		if (jj_3R_44())
			return true;
		return false;
	}

	final private boolean jj_3R_23() {
		if (jj_3R_17())
			return true;
		return false;
	}

	final private boolean jj_3R_34() {
		if (jj_3R_43())
			return true;
		return false;
	}

	final private boolean jj_3R_33() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_34()) {
			jj_scanpos = xsp;
			if (jj_3R_35()) {
				jj_scanpos = xsp;
				if (jj_3R_36()) {
					jj_scanpos = xsp;
					if (jj_3R_37()) {
						jj_scanpos = xsp;
						if (jj_3R_38()) {
							jj_scanpos = xsp;
							if (jj_3R_39()) {
								jj_scanpos = xsp;
								if (jj_3R_40()) {
									jj_scanpos = xsp;
									if (jj_3R_41()) {
										jj_scanpos = xsp;
										if (jj_3R_42())
											return true;
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	final private boolean jj_3R_22() {
		if (jj_scan_token(28))
			return true;
		return false;
	}

	final private boolean jj_3R_53() {
		if (jj_3R_54())
			return true;
		return false;
	}

	final private boolean jj_3R_21() {
		if (jj_scan_token(40))
			return true;
		return false;
	}

	final private boolean jj_3R_16() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_20()) {
			jj_scanpos = xsp;
			if (jj_3R_21()) {
				jj_scanpos = xsp;
				if (jj_3R_22()) {
					jj_scanpos = xsp;
					if (jj_3R_23()) {
						jj_scanpos = xsp;
						if (jj_scan_token(39)) {
							jj_scanpos = xsp;
							if (jj_3_14()) {
								jj_scanpos = xsp;
								if (jj_3R_24()) {
									jj_scanpos = xsp;
									if (jj_3R_25()) {
										jj_scanpos = xsp;
										if (jj_3R_26())
											return true;
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	final private boolean jj_3R_20() {
		if (jj_scan_token(43))
			return true;
		return false;
	}

	final private boolean jj_3_2() {
		if (jj_3R_12())
			return true;
		return false;
	}

	final private boolean jj_3R_54() {
		if (jj_scan_token(47))
			return true;
		if (jj_3R_33())
			return true;
		return false;
	}

	public MiniJavaParserTokenManager token_source;
	JavaCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	public boolean lookingAhead = false;
	private boolean jj_semLA;
	private int jj_gen;
	final private int[] jj_la1 = new int[18];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_0();
		jj_la1_1();
	}

	private static void jj_la1_0() {
		jj_la1_0 = new int[] { 0x1000000, 0x1000000, 0x80800000, 0x0,
				0x80800000, 0x0, 0x80800000, 0x60002000, 0x0, 0x80800000,
				0x2000, 0x60000000, 0x60002000, 0x10400200, 0x10400200, 0x0,
				0x10000000, 0x400200, };
	}

	private static void jj_la1_1() {
		jj_la1_1 = new int[] { 0x0, 0x0, 0x1000, 0x8, 0x1000, 0x8, 0x1000,
				0x1200, 0x8000, 0x1000, 0x0, 0x200, 0x1200, 0x1984, 0x1984,
				0x8000, 0x1980, 0x4, };
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[14];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	public MiniJavaParser(java.io.InputStream stream) {
		this(stream, null);
		this.stream = stream;
	}

	public MiniJavaParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new MiniJavaParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public MiniJavaParser(java.io.Reader stream) {
		jj_input_stream = new JavaCharStream(stream, 1, 1);
		token_source = new MiniJavaParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public void ReInit(java.io.Reader stream) {
		Node currentNode = jjtree.peekNode();
		jj_input_stream.ReInit(stream,
				((SimpleNode) currentNode).getEndLine() + 1,
				((SimpleNode) currentNode).getEndColumn() + 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public MiniJavaParser(MiniJavaParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	public void ReInit(MiniJavaParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	final private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
						.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(int index) {
		Token t = lookingAhead ? jj_scanpos : token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.Vector jj_expentries = new java.util.Vector();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			boolean exists = false;
			for (java.util.Enumeration e = jj_expentries.elements(); e
					.hasMoreElements();) {
				int[] oldentry = (int[]) (e.nextElement());
				if (oldentry.length == jj_expentry.length) {
					exists = true;
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							exists = false;
							break;
						}
					}
					if (exists)
						break;
				}
			}
			if (!exists)
				jj_expentries.addElement(jj_expentry);
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[49];
		for (int i = 0; i < 49; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 18; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 49; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

	final private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 14; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						case 10:
							jj_3_11();
							break;
						case 11:
							jj_3_12();
							break;
						case 12:
							jj_3_13();
							break;
						case 13:
							jj_3_14();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	final private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
