
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jan 04 13:06:49 CST 2009
//----------------------------------------------------

package Parse;

import Absyn.*;

/** CUP v0.10k generated parser.
  * @version Sun Jan 04 13:06:49 CST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\010\000\002\003\006\000\002\003\010\000\002\003" +
    "\006\000\002\003\012\000\002\003\003\000\002\003\006" +
    "\000\002\003\007\000\002\003\005\000\002\003\004\000" +
    "\002\015\005\000\002\015\006\000\002\015\005\000\002" +
    "\015\006\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\005\005\000\002\005\006\000\002\016" +
    "\003\000\002\016\005\000\002\006\004\000\002\006\005" +
    "\000\002\017\003\000\002\017\005\000\002\007\005\000" +
    "\002\007\006\000\002\020\005\000\002\020\007\000\002" +
    "\022\003\000\002\022\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\004\000\002\013\006" +
    "\000\002\014\003\000\002\014\004\000\002\014\005\000" +
    "\002\014\005\000\002\014\004\000\002\021\005\000\002" +
    "\021\007\000\002\012\006\000\002\012\010\000\002\011" +
    "\010\000\002\011\012\000\002\011\011\000\002\011\013" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\032\003\022\004\014\005\015\006\004\012" +
    "\012\022\021\037\010\042\006\043\024\046\023\052\017" +
    "\053\011\001\002\000\072\002\ufffe\003\ufffe\007\ufffe\011" +
    "\ufffe\013\ufffe\015\ufffe\017\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\040\ufffe\041\ufffe\044\ufffe\045\ufffe" +
    "\047\ufffe\050\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000" +
    "\072\002\ufff6\003\ufff6\007\ufff6\011\ufff6\013\ufff6\015\ufff6" +
    "\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\040\ufff6\041\ufff6\044\ufff6\045\ufff6\047\ufff6\050\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\001\002\000\032\003\022\004\014" +
    "\005\015\006\004\012\012\022\021\037\010\042\006\043" +
    "\024\046\023\052\017\053\011\001\002\000\072\002\ufffa" +
    "\003\ufffa\007\ufffa\011\ufffa\013\ufffa\015\ufffa\017\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\040\ufffa\041" +
    "\ufffa\044\ufffa\045\ufffa\047\ufffa\050\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\001\002\000\032\003\022\004\014\005\015\006" +
    "\004\012\012\022\021\037\010\042\006\043\024\046\023" +
    "\052\017\053\011\001\002\000\072\002\ufffd\003\ufffd\007" +
    "\ufffd\011\ufffd\013\ufffd\015\ufffd\017\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\040\ufffd\041\ufffd\044\ufffd" +
    "\045\ufffd\047\ufffd\050\ufffd\054\ufffd\055\ufffd\056\ufffd\001" +
    "\002\000\034\003\226\004\014\005\015\006\004\012\012" +
    "\013\225\022\021\037\010\042\006\043\024\046\023\052" +
    "\017\053\011\001\002\000\034\002\223\021\040\022\033" +
    "\023\044\024\035\025\041\026\037\027\045\030\042\031" +
    "\043\032\036\033\034\034\046\001\002\000\104\002\000" +
    "\003\000\007\000\011\000\012\174\013\000\014\173\015" +
    "\000\016\172\017\000\020\176\021\000\022\000\023\000" +
    "\024\000\025\000\026\000\027\000\030\000\031\000\032" +
    "\000\033\000\034\000\035\175\040\000\041\000\044\000" +
    "\045\000\047\000\050\000\054\000\055\000\056\000\001" +
    "\002\000\072\002\uffff\003\uffff\007\uffff\011\uffff\013\uffff" +
    "\015\uffff\017\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\040\uffff\041\uffff\044\uffff\045\uffff\047\uffff\050" +
    "\uffff\054\uffff\055\uffff\056\uffff\001\002\000\072\002\ufffb" +
    "\003\ufffb\007\ufffb\011\ufffb\013\ufffb\015\ufffb\017\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\040\ufffb\041" +
    "\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\001\002\000\072\002\ufff0\003\ufff0\007\ufff0\011" +
    "\ufff0\013\ufff0\015\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\040\ufff0\041\ufff0\044\ufff0\045\ufff0" +
    "\047\ufff0\050\ufff0\054\ufff0\055\ufff0\056\ufff0\001\002\000" +
    "\072\002\ufff7\003\ufff7\007\ufff7\011\ufff7\013\ufff7\015\ufff7" +
    "\017\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\040\ufff7\041\ufff7\044\ufff7\045\ufff7\047\ufff7\050\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\001\002\000\032\003\022\004\014" +
    "\005\015\006\004\012\012\022\021\037\010\042\006\043" +
    "\024\046\023\052\017\053\011\001\002\000\032\003\022" +
    "\004\014\005\015\006\004\012\012\022\021\037\010\042" +
    "\006\043\024\046\023\052\017\053\011\001\002\000\012" +
    "\003\101\054\103\055\076\056\077\001\002\000\004\004" +
    "\065\001\002\000\100\002\ufffc\003\ufffc\007\ufffc\011\ufffc" +
    "\013\ufffc\014\026\015\ufffc\017\ufffc\020\030\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\027\040\ufffc\041" +
    "\ufffc\044\ufffc\045\ufffc\047\ufffc\050\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\001\002\000\032\003\022\004\014\005\015\006" +
    "\004\012\012\022\021\037\010\042\006\043\024\046\023" +
    "\052\017\053\011\001\002\000\032\003\022\004\014\005" +
    "\015\006\004\012\012\022\021\037\010\042\006\043\024" +
    "\046\023\052\017\053\011\001\002\000\004\004\031\001" +
    "\002\000\100\002\uffe9\003\uffe9\007\uffe9\011\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\040\uffe9\041\uffe9\044" +
    "\uffe9\045\uffe9\047\uffe9\050\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\001\002\000\072\002\ufff9\003\ufff9\007\ufff9\011\ufff9\013" +
    "\ufff9\015\ufff9\017\ufff9\021\040\022\033\023\044\024\035" +
    "\025\041\026\037\027\045\030\042\031\043\032\036\033" +
    "\034\034\046\040\ufff9\041\ufff9\044\ufff9\045\ufff9\047\ufff9" +
    "\050\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000\032\003" +
    "\022\004\014\005\015\006\004\012\012\022\021\037\010" +
    "\042\006\043\024\046\023\052\017\053\011\001\002\000" +
    "\032\003\022\004\014\005\015\006\004\012\012\022\021" +
    "\037\010\042\006\043\024\046\023\052\017\053\011\001" +
    "\002\000\032\003\022\004\014\005\015\006\004\012\012" +
    "\022\021\037\010\042\006\043\024\046\023\052\017\053" +
    "\011\001\002\000\032\003\022\004\014\005\015\006\004" +
    "\012\012\022\021\037\010\042\006\043\024\046\023\052" +
    "\017\053\011\001\002\000\032\003\022\004\014\005\015" +
    "\006\004\012\012\022\021\037\010\042\006\043\024\046" +
    "\023\052\017\053\011\001\002\000\032\003\022\004\014" +
    "\005\015\006\004\012\012\022\021\037\010\042\006\043" +
    "\024\046\023\052\017\053\011\001\002\000\032\003\022" +
    "\004\014\005\015\006\004\012\012\022\021\037\010\042" +
    "\006\043\024\046\023\052\017\053\011\001\002\000\032" +
    "\003\022\004\014\005\015\006\004\012\012\022\021\037" +
    "\010\042\006\043\024\046\023\052\017\053\011\001\002" +
    "\000\032\003\022\004\014\005\015\006\004\012\012\022" +
    "\021\037\010\042\006\043\024\046\023\052\017\053\011" +
    "\001\002\000\032\003\022\004\014\005\015\006\004\012" +
    "\012\022\021\037\010\042\006\043\024\046\023\052\017" +
    "\053\011\001\002\000\032\003\022\004\014\005\015\006" +
    "\004\012\012\022\021\037\010\042\006\043\024\046\023" +
    "\052\017\053\011\001\002\000\032\003\022\004\014\005" +
    "\015\006\004\012\012\022\021\037\010\042\006\043\024" +
    "\046\023\052\017\053\011\001\002\000\072\002\uffe7\003" +
    "\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021\040" +
    "\022\033\023\044\024\035\025\041\026\037\027\045\030" +
    "\042\031\043\032\036\033\034\034\uffe7\040\uffe7\041\uffe7" +
    "\044\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\001\002\000\056\002\uffe4\003\uffe4\007\uffe4\011\uffe4" +
    "\013\uffe4\015\uffe4\017\uffe4\021\040\022\033\023\044\024" +
    "\035\033\uffe4\034\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4" +
    "\047\uffe4\050\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002\000" +
    "\072\002\uffdd\003\uffdd\007\uffdd\011\uffdd\013\uffdd\015\uffdd" +
    "\017\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\040\uffdd\041\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\001\002\000\056\002\uffe2\003\uffe2" +
    "\007\uffe2\011\uffe2\013\uffe2\015\uffe2\017\uffe2\021\040\022" +
    "\033\023\044\024\035\033\uffe2\034\uffe2\040\uffe2\041\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\001\002\000\056\002\uffe3\003\uffe3\007\uffe3\011\uffe3" +
    "\013\uffe3\015\uffe3\017\uffe3\021\040\022\033\023\044\024" +
    "\035\033\uffe3\034\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3" +
    "\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000" +
    "\056\002\uffe5\003\uffe5\007\uffe5\011\uffe5\013\uffe5\015\uffe5" +
    "\017\uffe5\021\040\022\033\023\044\024\035\033\uffe5\034" +
    "\uffe5\040\uffe5\041\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\001\002\000\072\002\uffdf\003" +
    "\uffdf\007\uffdf\011\uffdf\013\uffdf\015\uffdf\017\uffdf\021\uffdf" +
    "\022\uffdf\023\044\024\035\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\040\uffdf\041\uffdf" +
    "\044\uffdf\045\uffdf\047\uffdf\050\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\001\002\000\056\002\uffe0\003\uffe0\007\uffe0\011\uffe0" +
    "\013\uffe0\015\uffe0\017\uffe0\021\040\022\033\023\044\024" +
    "\035\033\uffe0\034\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0" +
    "\047\uffe0\050\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000" +
    "\056\002\uffe1\003\uffe1\007\uffe1\011\uffe1\013\uffe1\015\uffe1" +
    "\017\uffe1\021\040\022\033\023\044\024\035\033\uffe1\034" +
    "\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\001\002\000\072\002\uffdc\003" +
    "\uffdc\007\uffdc\011\uffdc\013\uffdc\015\uffdc\017\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\040\uffdc\041\uffdc" +
    "\044\uffdc\045\uffdc\047\uffdc\050\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\001\002\000\072\002\uffe6\003\uffe6\007\uffe6\011\uffe6" +
    "\013\uffe6\015\uffe6\017\uffe6\021\040\022\033\023\044\024" +
    "\035\025\041\026\037\027\045\030\042\031\043\032\036" +
    "\033\uffe6\034\uffe6\040\uffe6\041\uffe6\044\uffe6\045\uffe6\047" +
    "\uffe6\050\uffe6\054\uffe6\055\uffe6\056\uffe6\001\002\000\072" +
    "\002\uffde\003\uffde\007\uffde\011\uffde\013\uffde\015\uffde\017" +
    "\uffde\021\uffde\022\uffde\023\044\024\035\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\040" +
    "\uffde\041\uffde\044\uffde\045\uffde\047\uffde\050\uffde\054\uffde" +
    "\055\uffde\056\uffde\001\002\000\034\015\064\021\040\022" +
    "\033\023\044\024\035\025\041\026\037\027\045\030\042" +
    "\031\043\032\036\033\034\034\046\001\002\000\100\002" +
    "\uffe8\003\uffe8\007\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\040\uffe8\041\uffe8\044\uffe8\045\uffe8\047" +
    "\uffe8\050\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\004" +
    "\035\066\001\002\000\032\003\022\004\014\005\015\006" +
    "\004\012\012\022\021\037\010\042\006\043\024\046\023" +
    "\052\017\053\011\001\002\000\034\021\040\022\033\023" +
    "\044\024\035\025\041\026\037\027\045\030\042\031\043" +
    "\032\036\033\034\034\046\044\070\001\002\000\032\003" +
    "\022\004\014\005\015\006\004\012\012\022\021\037\010" +
    "\042\006\043\024\046\023\052\017\053\011\001\002\000" +
    "\034\021\040\022\033\023\044\024\035\025\041\026\037" +
    "\027\045\030\042\031\043\032\036\033\034\034\046\045" +
    "\072\001\002\000\032\003\022\004\014\005\015\006\004" +
    "\012\012\022\021\037\010\042\006\043\024\046\023\052" +
    "\017\053\011\001\002\000\072\002\ufff1\003\ufff1\007\ufff1" +
    "\011\ufff1\013\ufff1\015\ufff1\017\ufff1\021\040\022\033\023" +
    "\044\024\035\025\041\026\037\027\045\030\042\031\043" +
    "\032\036\033\034\034\046\040\ufff1\041\ufff1\044\ufff1\045" +
    "\ufff1\047\ufff1\050\ufff1\054\ufff1\055\ufff1\056\ufff1\001\002" +
    "\000\014\003\uffca\047\uffca\054\uffca\055\uffca\056\uffca\001" +
    "\002\000\014\003\101\047\uffce\054\103\055\076\056\077" +
    "\001\002\000\004\004\160\001\002\000\004\004\143\001" +
    "\002\000\004\047\134\001\002\000\032\003\022\004\014" +
    "\005\015\006\004\012\012\022\021\037\010\042\006\043" +
    "\024\046\023\052\017\053\011\001\002\000\014\003\uffcc" +
    "\047\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000\004\004" +
    "\105\001\002\000\014\003\uffcb\047\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\001\002\000\004\012\106\001\002\000\006\004" +
    "\107\013\110\001\002\000\004\010\127\001\002\000\006" +
    "\010\122\025\121\001\002\000\004\013\112\001\002\000" +
    "\006\010\114\025\113\001\002\000\032\003\022\004\014" +
    "\005\015\006\004\012\012\022\021\037\010\042\006\043" +
    "\024\046\023\052\017\053\011\001\002\000\004\004\115" +
    "\001\002\000\004\025\116\001\002\000\032\003\022\004" +
    "\014\005\015\006\004\012\012\022\021\037\010\042\006" +
    "\043\024\046\023\052\017\053\011\001\002\000\044\003" +
    "\uffbb\021\040\022\033\023\044\024\035\025\041\026\037" +
    "\027\045\030\042\031\043\032\036\033\034\034\046\047" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\001\002\000\044\003\uffbc" +
    "\021\040\022\033\023\044\024\035\025\041\026\037\027" +
    "\045\030\042\031\043\032\036\033\034\034\046\047\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\001\002\000\032\003\022\004" +
    "\014\005\015\006\004\012\012\022\021\037\010\042\006" +
    "\043\024\046\023\052\017\053\011\001\002\000\004\004" +
    "\123\001\002\000\004\025\124\001\002\000\032\003\022" +
    "\004\014\005\015\006\004\012\012\022\021\037\010\042" +
    "\006\043\024\046\023\052\017\053\011\001\002\000\044" +
    "\003\uffbd\021\040\022\033\023\044\024\035\025\041\026" +
    "\037\027\045\030\042\031\043\032\036\033\034\034\046" +
    "\047\uffbd\054\uffbd\055\uffbd\056\uffbd\001\002\000\044\003" +
    "\uffbe\021\040\022\033\023\044\024\035\025\041\026\037" +
    "\027\045\030\042\031\043\032\036\033\034\034\046\047" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\001\002\000\004\004\130" +
    "\001\002\000\010\007\131\013\uffc2\017\uffc2\001\002\000" +
    "\004\004\107\001\002\000\006\013\uffc1\017\uffc1\001\002" +
    "\000\044\003\uffc9\021\040\022\033\023\044\024\035\025" +
    "\041\026\037\027\045\030\042\031\043\032\036\033\034" +
    "\034\046\047\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002\000" +
    "\034\003\022\004\014\005\015\006\004\012\012\022\021" +
    "\037\010\042\006\043\024\046\023\050\136\052\017\053" +
    "\011\001\002\000\004\050\142\001\002\000\072\002\uffef" +
    "\003\uffef\007\uffef\011\uffef\013\uffef\015\uffef\017\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\040\uffef\041" +
    "\uffef\044\uffef\045\uffef\047\uffef\050\uffef\054\uffef\055\uffef" +
    "\056\uffef\001\002\000\040\011\140\013\uffd4\021\040\022" +
    "\033\023\044\024\035\025\041\026\037\027\045\030\042" +
    "\031\043\032\036\033\034\034\046\050\uffd4\001\002\000" +
    "\032\003\022\004\014\005\015\006\004\012\012\022\021" +
    "\037\010\042\006\043\024\046\023\052\017\053\011\001" +
    "\002\000\006\013\uffd3\050\uffd3\001\002\000\072\002\uffee" +
    "\003\uffee\007\uffee\011\uffee\013\uffee\015\uffee\017\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\040\uffee\041" +
    "\uffee\044\uffee\045\uffee\047\uffee\050\uffee\054\uffee\055\uffee" +
    "\056\uffee\001\002\000\004\025\144\001\002\000\012\003" +
    "\147\004\145\016\146\036\151\001\002\000\014\003\uffc7" +
    "\047\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002\000\006\004" +
    "\107\017\155\001\002\000\032\003\022\004\014\005\015" +
    "\006\004\012\012\022\021\037\010\042\006\043\024\046" +
    "\023\052\017\053\011\001\002\000\014\003\uffc8\047\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\001\002\000\004\051\152\001" +
    "\002\000\004\004\153\001\002\000\014\003\uffc4\047\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\001\002\000\044\003\uffc3\021" +
    "\040\022\033\023\044\024\035\025\041\026\037\027\045" +
    "\030\042\031\043\032\036\033\034\034\046\047\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\001\002\000\014\003\uffc6\047\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\001\002\000\004\017\157\001" +
    "\002\000\014\003\uffc5\047\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\001\002\000\006\010\161\035\162\001\002\000\004\004" +
    "\164\001\002\000\032\003\022\004\014\005\015\006\004" +
    "\012\012\022\021\037\010\042\006\043\024\046\023\052" +
    "\017\053\011\001\002\000\044\003\uffc0\021\040\022\033" +
    "\023\044\024\035\025\041\026\037\027\045\030\042\031" +
    "\043\032\036\033\034\034\046\047\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\001\002\000\004\035\165\001\002\000\032\003" +
    "\022\004\014\005\015\006\004\012\012\022\021\037\010" +
    "\042\006\043\024\046\023\052\017\053\011\001\002\000" +
    "\044\003\uffbf\021\040\022\033\023\044\024\035\025\041" +
    "\026\037\027\045\030\042\031\043\032\036\033\034\034" +
    "\046\047\uffbf\054\uffbf\055\uffbf\056\uffbf\001\002\000\004" +
    "\047\uffcd\001\002\000\072\002\uffec\003\uffec\007\uffec\011" +
    "\uffec\013\uffec\015\uffec\017\uffec\021\040\022\033\023\044" +
    "\024\035\025\041\026\037\027\045\030\042\031\043\032" +
    "\036\033\034\034\046\040\uffec\041\uffec\044\uffec\045\uffec" +
    "\047\uffec\050\uffec\054\uffec\055\uffec\056\uffec\001\002\000" +
    "\072\002\uffdb\003\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb" +
    "\017\uffdb\021\uffdb\022\uffdb\023\044\024\035\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\040\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\001\002\000\006\004\213\017\214" +
    "\001\002\000\032\003\022\004\014\005\015\006\004\012" +
    "\012\022\021\037\010\042\006\043\024\046\023\052\017" +
    "\053\011\001\002\000\034\003\022\004\014\005\015\006" +
    "\004\012\012\013\201\022\021\037\010\042\006\043\024" +
    "\046\023\052\017\053\011\001\002\000\032\003\022\004" +
    "\014\005\015\006\004\012\012\022\021\037\010\042\006" +
    "\043\024\046\023\052\017\053\011\001\002\000\004\004" +
    "\177\001\002\000\100\002\uffeb\003\uffeb\007\uffeb\011\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\040\uffeb\041" +
    "\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\001\002\000\072\002\ufff8\003\ufff8\007\ufff8\011" +
    "\ufff8\013\ufff8\015\ufff8\017\ufff8\021\040\022\033\023\044" +
    "\024\035\025\041\026\037\027\045\030\042\031\043\032" +
    "\036\033\034\034\046\040\ufff8\041\ufff8\044\ufff8\045\ufff8" +
    "\047\ufff8\050\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002\000" +
    "\072\002\uffda\003\uffda\007\uffda\011\uffda\013\uffda\015\uffda" +
    "\017\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\040\uffda\041\uffda\044\uffda\045\uffda\047\uffda\050\uffda\054" +
    "\uffda\055\uffda\056\uffda\001\002\000\004\013\206\001\002" +
    "\000\036\007\204\013\uffd8\021\040\022\033\023\044\024" +
    "\035\025\041\026\037\027\045\030\042\031\043\032\036" +
    "\033\034\034\046\001\002\000\032\003\022\004\014\005" +
    "\015\006\004\012\012\022\021\037\010\042\006\043\024" +
    "\046\023\052\017\053\011\001\002\000\004\013\uffd7\001" +
    "\002\000\072\002\uffd9\003\uffd9\007\uffd9\011\uffd9\013\uffd9" +
    "\015\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\040\uffd9\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\001\002\000\034\015\210" +
    "\021\040\022\033\023\044\024\035\025\041\026\037\027" +
    "\045\030\042\031\043\032\036\033\034\034\046\001\002" +
    "\000\102\002\uffea\003\uffea\007\uffea\011\uffea\013\uffea\014" +
    "\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\040\uffea\041\uffea\044\uffea" +
    "\045\uffea\047\uffea\050\uffea\051\211\054\uffea\055\uffea\056" +
    "\uffea\001\002\000\032\003\022\004\014\005\015\006\004" +
    "\012\012\022\021\037\010\042\006\043\024\046\023\052" +
    "\017\053\011\001\002\000\072\002\ufff5\003\ufff5\007\ufff5" +
    "\011\ufff5\013\ufff5\015\ufff5\017\ufff5\021\040\022\033\023" +
    "\044\024\035\025\041\026\037\027\045\030\042\031\043" +
    "\032\036\033\034\034\046\040\ufff5\041\ufff5\044\ufff5\045" +
    "\ufff5\047\ufff5\050\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002" +
    "\000\004\025\217\001\002\000\072\002\uffd2\003\uffd2\007" +
    "\uffd2\011\uffd2\013\uffd2\015\uffd2\017\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\040\uffd2\041\uffd2\044\uffd2" +
    "\045\uffd2\047\uffd2\050\uffd2\054\uffd2\055\uffd2\056\uffd2\001" +
    "\002\000\004\017\216\001\002\000\072\002\uffd1\003\uffd1" +
    "\007\uffd1\011\uffd1\013\uffd1\015\uffd1\017\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\040\uffd1\041\uffd1\044" +
    "\uffd1\045\uffd1\047\uffd1\050\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\001\002\000\032\003\022\004\014\005\015\006\004\012" +
    "\012\022\021\037\010\042\006\043\024\046\023\052\017" +
    "\053\011\001\002\000\036\007\221\017\uffd0\021\040\022" +
    "\033\023\044\024\035\025\041\026\037\027\045\030\042" +
    "\031\043\032\036\033\034\034\046\001\002\000\004\004" +
    "\213\001\002\000\004\017\uffcf\001\002\000\004\002\001" +
    "\001\002\000\004\013\230\001\002\000\072\002\uffd6\003" +
    "\uffd6\007\uffd6\011\uffd6\013\uffd6\015\uffd6\017\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\040\uffd6\041\uffd6" +
    "\044\uffd6\045\uffd6\047\uffd6\050\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\001\002\000\034\003\022\004\014\005\015\006\004" +
    "\012\012\013\227\022\021\037\010\042\006\043\024\046" +
    "\023\052\017\053\011\001\002\000\072\002\uffed\003\uffed" +
    "\007\uffed\011\uffed\013\uffed\015\uffed\017\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\040\uffed\041\uffed\044" +
    "\uffed\045\uffed\047\uffed\050\uffed\054\uffed\055\uffed\056\uffed" +
    "\001\002\000\072\002\uffd5\003\uffd5\007\uffd5\011\uffd5\013" +
    "\uffd5\015\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\040\uffd5\041\uffd5\044\uffd5\045\uffd5\047\uffd5" +
    "\050\uffd5\054\uffd5\055\uffd5\056\uffd5\001\002\000\034\021" +
    "\040\022\033\023\044\024\035\025\041\026\037\027\045" +
    "\030\042\031\043\032\036\033\034\034\046\040\232\001" +
    "\002\000\032\003\022\004\014\005\015\006\004\012\012" +
    "\022\021\037\010\042\006\043\024\046\023\052\017\053" +
    "\011\001\002\000\072\002\ufff4\003\ufff4\007\ufff4\011\ufff4" +
    "\013\ufff4\015\ufff4\017\ufff4\021\040\022\033\023\044\024" +
    "\035\025\041\026\037\027\045\030\042\031\043\032\036" +
    "\033\034\034\046\040\ufff4\041\234\044\ufff4\045\ufff4\047" +
    "\ufff4\050\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000\032" +
    "\003\022\004\014\005\015\006\004\012\012\022\021\037" +
    "\010\042\006\043\024\046\023\052\017\053\011\001\002" +
    "\000\072\002\ufff3\003\ufff3\007\ufff3\011\ufff3\013\ufff3\015" +
    "\ufff3\017\ufff3\021\040\022\033\023\044\024\035\025\041" +
    "\026\037\027\045\030\042\031\043\032\036\033\034\034" +
    "\046\040\ufff3\041\ufff3\044\ufff3\045\ufff3\047\ufff3\050\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\001\002\000\034\021\040\022" +
    "\033\023\044\024\035\025\041\026\037\027\045\030\042" +
    "\031\043\032\036\033\034\034\046\045\237\001\002\000" +
    "\032\003\022\004\014\005\015\006\004\012\012\022\021" +
    "\037\010\042\006\043\024\046\023\052\017\053\011\001" +
    "\002\000\072\002\ufff2\003\ufff2\007\ufff2\011\ufff2\013\ufff2" +
    "\015\ufff2\017\ufff2\021\040\022\033\023\044\024\035\025" +
    "\041\026\037\027\045\030\042\031\043\032\036\033\034" +
    "\034\046\040\ufff2\041\ufff2\044\ufff2\045\ufff2\047\ufff2\050" +
    "\ufff2\054\ufff2\055\ufff2\056\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\016\003\012\004\015\005\006\006\017\007" +
    "\004\015\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\235\004\015\005\006\006\017\007\004\015" +
    "\024\001\001\000\002\001\001\000\016\003\230\004\015" +
    "\005\006\006\017\007\004\015\024\001\001\000\002\001" +
    "\001\000\020\003\136\004\015\005\006\006\017\007\004" +
    "\015\024\017\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\170\004\015\005\006\006" +
    "\017\007\004\015\024\001\001\000\016\003\167\004\015" +
    "\005\006\006\017\007\004\015\024\001\001\000\014\010" +
    "\074\011\073\012\103\013\101\022\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\062\004\015\005" +
    "\006\006\017\007\004\015\024\001\001\000\016\003\031" +
    "\004\015\005\006\006\017\007\004\015\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\061\004\015\005\006\006\017\007\004\015\024\001" +
    "\001\000\016\003\060\004\015\005\006\006\017\007\004" +
    "\015\024\001\001\000\016\003\057\004\015\005\006\006" +
    "\017\007\004\015\024\001\001\000\016\003\056\004\015" +
    "\005\006\006\017\007\004\015\024\001\001\000\016\003" +
    "\055\004\015\005\006\006\017\007\004\015\024\001\001" +
    "\000\016\003\054\004\015\005\006\006\017\007\004\015" +
    "\024\001\001\000\016\003\053\004\015\005\006\006\017" +
    "\007\004\015\024\001\001\000\016\003\052\004\015\005" +
    "\006\006\017\007\004\015\024\001\001\000\016\003\051" +
    "\004\015\005\006\006\017\007\004\015\024\001\001\000" +
    "\016\003\050\004\015\005\006\006\017\007\004\015\024" +
    "\001\001\000\016\003\047\004\015\005\006\006\017\007" +
    "\004\015\024\001\001\000\016\003\046\004\015\005\006" +
    "\006\017\007\004\015\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\066\004\015\005\006\006\017" +
    "\007\004\015\024\001\001\000\002\001\001\000\016\003" +
    "\070\004\015\005\006\006\017\007\004\015\024\001\001" +
    "\000\002\001\001\000\016\003\072\004\015\005\006\006" +
    "\017\007\004\015\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\074\011\073\012\103\013\101\022" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\132\004\015\005\006\006\017\007" +
    "\004\015\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\117\004\015\005\006\006" +
    "\017\007\004\015\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\116\004\015\005\006\006\017\007" +
    "\004\015\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\125\004\015\005\006\006\017\007\004\015" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\124\004\015\005\006\006\017\007\004\015\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\136\004\015\005\006" +
    "\006\017\007\004\015\024\017\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\136" +
    "\004\015\005\006\006\017\007\004\015\024\017\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\147\001\001\000\002\001\001\000\004\021" +
    "\155\001\001\000\016\003\153\004\015\005\006\006\017" +
    "\007\004\015\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\162\004\015" +
    "\005\006\006\017\007\004\015\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\165\004\015\005\006" +
    "\006\017\007\004\015\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\214\001\001\000\016\003\206\004\015\005\006\006" +
    "\017\007\004\015\024\001\001\000\020\003\202\004\015" +
    "\005\006\006\017\007\004\015\024\016\201\001\001\000" +
    "\016\003\177\004\015\005\006\006\017\007\004\015\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\202\004\015\005\006\006\017\007\004\015" +
    "\024\016\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\211\004" +
    "\015\005\006\006\017\007\004\015\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\217\004\015\005\006" +
    "\006\017\007\004\015\024\001\001\000\002\001\001\000" +
    "\004\020\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\167\004" +
    "\015\005\006\006\017\007\004\015\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\232\004\015\005\006\006\017\007\004\015\024\001\001" +
    "\000\002\001\001\000\016\003\234\004\015\005\006\006" +
    "\017\007\004\015\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\237\004\015\005\006\006\017\007" +
    "\004\015\024\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 java_cup.runtime.Symbol tok = lexer.nextToken(); return tok; 
    }

 
  public Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" +  symnames.symnames[current.sym]+ ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public parser(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_declaration ::= FUNCTION ID LPAREN field_list RPAREN COLON ID EQ program 
            {
              Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(nleft,sym(i1),fl,
					new NameTy(i2left,sym(i2)),e,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function_declaration ::= FUNCTION ID LPAREN field_list RPAREN EQ program 
            {
              Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(nleft,sym(i),fl,null,e,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // function_declaration ::= FUNCTION ID LPAREN RPAREN COLON ID EQ program 
            {
              Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(nleft,sym(i1),null,
					new NameTy(i2left,sym(i2)),e,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // function_declaration ::= FUNCTION ID LPAREN RPAREN EQ program 
            {
              Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FunctionDec(nleft,sym(i),null,null,e,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variable_declaration ::= VAR ID COLON ID ASSIGN program 
            {
              Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarDec(nleft,sym(i1),
					new NameTy(i2left,sym(i2)),e); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_declaration ::= VAR ID ASSIGN program 
            {
              Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarDec(nleft,sym(i),null,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // field_list ::= ID COLON ID COMMA field_list 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldList(i1left,sym(i1),sym(i2),fl); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // field_list ::= ID COLON ID 
            {
              FieldList RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldList(i1left,sym(i1),sym(i2),null); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= error program 
            {
              Ty RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= ARRAY OF ID 
            {
              Ty RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayTy(nleft,sym(i)); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= LBRACE field_list RBRACE 
            {
              Ty RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTy(nleft,fl); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= LBRACE RBRACE 
            {
              Ty RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTy(nleft,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= ID 
            {
              Ty RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameTy(ileft,sym(i)); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_declaration ::= TYPE ID EQ type 
            {
              Dec RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TypeDec(nleft,sym(i),t,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= error program 
            {
              Dec RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaration ::= function_declaration 
            {
              Dec RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration ::= variable_declaration 
            {
              Dec RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= type_declaration 
            {
              Dec RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaration_list ::= declaration declaration_list 
            {
              DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DecList(d,dl); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration_list ::= declaration 
            {
              DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DecList(d,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // field_exp_list ::= ID EQ program COMMA field_exp_list 
            {
              FieldExpList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int felleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int felright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FieldExpList fel = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldExpList(ileft,sym(i),e,fel); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*field_exp_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // field_exp_list ::= ID EQ program 
            {
              FieldExpList RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldExpList(ileft,sym(i),e,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*field_exp_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // record_exp ::= ID LBRACE field_exp_list RBRACE 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordExp(ileft,sym(i),fl); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*record_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // record_exp ::= ID LBRACE RBRACE 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RecordExp(ileft,sym(i),null); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*record_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp_seq ::= program SEMICOLON exp_seq 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpList(e,el); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp_seq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp_seq ::= program 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpList(e,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp_seq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paren_exp ::= LPAREN exp_seq RPAREN 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExp(nleft,el); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*paren_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paren_exp ::= LPAREN RPAREN 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExp(nleft,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*paren_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_list ::= program COMMA exp_list 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpList(e,el); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*exp_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_list ::= program 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpList(e,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*exp_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_call ::= ID LPAREN exp_list RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(ileft,sym(i),el); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*function_call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_call ::= ID LPAREN RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExp(ileft,sym(i),null); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*function_call*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bin_op_exp ::= MINUS program 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(nleft,
					new IntExp(nleft,0),OpExp.UMINUS,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bin_op_exp ::= program DIVIDE program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.DIV,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bin_op_exp ::= program TIMES program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.MUL,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bin_op_exp ::= program MINUS program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.MINUS,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bin_op_exp ::= program PLUS program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.PLUS,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bin_op_exp ::= program NEQ program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.NE,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bin_op_exp ::= program GE program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.GE,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bin_op_exp ::= program GT program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.GT,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bin_op_exp ::= program LE program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.LE,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bin_op_exp ::= program LT program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.LT,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bin_op_exp ::= program EQ program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OpExp(e1left,e1,OpExp.EQ,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bin_op_exp ::= program AND program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfExp(e1left,e1,e2,
					new IntExp(e1left,0)); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bin_op_exp ::= program OR program 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfExp(e1left,e1,
					new IntExp(e1left,1),e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*bin_op_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lvalue ::= lvalue LBRACK program RBRACK 
            {
              Var RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var i = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptVar(ileft,i,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lvalue ::= lvalue DOT ID 
            {
              Var RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var i1 = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldVar(i1left,i1,sym(i2)); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lvalue ::= ID LBRACK program RBRACK 
            {
              Var RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptVar(ileft,
					new SimpleVar(ileft,sym(i)),e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lvalue ::= ID DOT ID 
            {
              Var RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FieldVar(i1left,
					new SimpleVar(i1left,sym(i1)),
					sym(i2)); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // program ::= error program 
            {
              Exp RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // program ::= LPAREN error RPAREN 
            {
              Exp RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // program ::= LET declaration_list IN exp_seq END 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LetExp(nleft,dl,
					new SeqExp(elleft,el)); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // program ::= LET declaration_list IN END 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new LetExp(nleft,dl,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // program ::= BREAK 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BreakExp(nleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program ::= FOR ID ASSIGN program TO program DO program 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForExp(nleft,
					new VarDec(ileft,sym(i),null,e1),e2,e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program ::= WHILE program DO program 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new WhileExp(nleft,e1,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program ::= IF program THEN program ELSE program 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfExp(nleft,e1,e2,e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program ::= IF program THEN program 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfExp(nleft,e1,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program ::= ID LBRACK program RBRACK OF program 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayExp(ileft,sym(i),e1,e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= record_exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program ::= paren_exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= ID ASSIGN program 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignExp(ileft,
					new SimpleVar(ileft,sym(i)),e); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program ::= lvalue ASSIGN program 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var i = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignExp(ileft,i,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= function_call 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program ::= bin_op_exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= lvalue 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var i = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarExp(ileft,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= NIL 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NilExp(nleft); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= INT 
            {
              Exp RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer it = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IntExp(itleft,it.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= STRING 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new StringExp(sleft,s); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= ID 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new VarExp(ileft,
					new SimpleVar(ileft,sym(i))); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

