
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jan 13 18:27:51 CST 2010
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import AbsSytree.*;
import util.ErrorMsg;

/** CUP v0.10k generated parser.
  * @version Wed Jan 13 18:27:51 CST 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\006\000\002\004\005\000" +
    "\002\004\006\000\002\004\010\000\002\004\006\000\002" +
    "\004\010\000\002\004\006\000\002\004\012\000\002\004" +
    "\003\000\002\004\007\000\002\005\003\000\002\005\005" +
    "\000\002\005\006\000\002\005\006\000\002\006\003\000" +
    "\002\006\005\000\002\007\002\000\002\007\003\000\002" +
    "\010\003\000\002\010\005\000\002\011\002\000\002\011" +
    "\003\000\002\012\005\000\002\012\007\000\002\013\002" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\004\000\002" +
    "\016\006\000\002\017\003\000\002\017\004\000\002\020" +
    "\003\000\002\020\005\000\002\020\005\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\023\002\000" +
    "\002\023\003\000\002\024\006\000\002\024\010\000\002" +
    "\025\011\000\002\025\013\000\002\026\003\000\002\026" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\070\002\ufffe\011\ufffe\012\ufffe\013\ufffe\015" +
    "\ufffe\017\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe" +
    "\032\ufffe\034\ufffe\036\ufffe\040\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\001\002\000\004\004\207\001" +
    "\002\000\070\002\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd" +
    "\017\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd\032" +
    "\ufffd\034\ufffd\036\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\001\002\000\004\002\206\001\002" +
    "\000\070\002\uffff\011\uffff\012\uffff\013\uffff\015\uffff\017" +
    "\uffff\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff\032\uffff" +
    "\034\uffff\036\uffff\040\uffff\042\uffff\043\uffff\044\uffff\045" +
    "\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff" +
    "\054\uffff\055\uffff\001\002\000\030\004\015\005\005\006" +
    "\011\010\021\014\006\016\012\020\017\021\007\027\004" +
    "\033\014\043\013\001\002\000\030\004\015\005\005\006" +
    "\011\010\021\014\006\016\012\020\017\021\007\027\004" +
    "\033\014\043\013\001\002\000\032\004\015\005\005\006" +
    "\011\010\021\014\006\016\012\020\017\021\007\027\004" +
    "\033\014\034\uffd9\043\013\001\002\000\102\002\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\030\uffe3\032\uffe3\033\150\034\uffe3\035" +
    "\151\036\uffe3\037\147\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000\034" +
    "\002\000\042\035\043\036\044\041\045\037\046\034\047" +
    "\033\050\040\051\030\052\032\053\031\054\027\055\042" +
    "\001\002\000\010\015\071\025\066\026\065\001\002\000" +
    "\076\002\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\017\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\032\ufffc\034" +
    "\ufffc\035\022\036\ufffc\040\ufffc\041\024\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\023\001\002\000\070" +
    "\002\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\032\uffe5\034\uffe5" +
    "\036\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\001\002\000\030\004\015\005\005\006\011\010" +
    "\021\014\006\016\012\020\017\021\007\027\004\033\014" +
    "\043\013\001\002\000\030\004\015\005\005\006\011\010" +
    "\021\014\006\016\012\020\017\021\007\027\004\033\014" +
    "\043\013\001\002\000\004\004\025\001\002\000\076\002" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\030\uffe2\032\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\070\002\uffee" +
    "\011\uffee\012\uffee\013\uffee\015\uffee\017\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\030\uffee\032\uffee\034\uffee\036\uffee" +
    "\040\uffee\042\035\043\036\044\041\045\037\046\034\047" +
    "\033\050\040\051\030\052\032\053\031\054\027\055\042" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\030\004\015\005\005\006\011\010\021\014" +
    "\006\016\012\020\017\021\007\027\004\033\014\043\013" +
    "\001\002\000\070\002\ufff9\011\ufff9\012\ufff9\013\ufff9\015" +
    "\ufff9\017\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\032\ufff9\034\ufff9\036\ufff9\040\ufff9\042\035\043\036\044" +
    "\041\045\037\046\034\047\033\050\040\051\030\052\032" +
    "\053\031\054\027\055\ufff9\001\002\000\070\002\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\015\ufff6\017\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\030\ufff6\032\ufff6\034\ufff6\036\ufff6\040" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\001" +
    "\002\000\054\002\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2" +
    "\017\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\032" +
    "\ufff2\034\ufff2\036\ufff2\040\ufff2\042\035\043\036\044\041" +
    "\045\037\054\ufff2\055\ufff2\001\002\000\070\002\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\015\ufff5\017\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\030\ufff5\032\ufff5\034\ufff5\036\ufff5\040" +
    "\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\001" +
    "\002\000\070\002\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\017\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\030\ufff7\032" +
    "\ufff7\034\ufff7\036\ufff7\040\ufff7\042\ufff7\043\ufff7\044\041" +
    "\045\037\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\001\002\000\070\002\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\015\ufff8\017\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\030\ufff8\032\ufff8\034\ufff8\036\ufff8\040\ufff8" +
    "\042\ufff8\043\ufff8\044\041\045\037\046\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\001\002" +
    "\000\054\002\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\017" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\032\ufff4" +
    "\034\ufff4\036\ufff4\040\ufff4\042\035\043\036\044\041\045" +
    "\037\054\ufff4\055\ufff4\001\002\000\054\002\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\015\ufff3\017\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\030\ufff3\032\ufff3\034\ufff3\036\ufff3\040\ufff3" +
    "\042\035\043\036\044\041\045\037\054\ufff3\055\ufff3\001" +
    "\002\000\054\002\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0" +
    "\017\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\030\ufff0\032" +
    "\ufff0\034\ufff0\036\ufff0\040\ufff0\042\035\043\036\044\041" +
    "\045\037\054\ufff0\055\ufff0\001\002\000\054\002\uffef\011" +
    "\uffef\012\uffef\013\uffef\015\uffef\017\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\030\uffef\032\uffef\034\uffef\036\uffef\040" +
    "\uffef\042\035\043\036\044\041\045\037\054\uffef\055\uffef" +
    "\001\002\000\054\002\ufff1\011\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\017\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1" +
    "\032\ufff1\034\ufff1\036\ufff1\040\ufff1\042\035\043\036\044" +
    "\041\045\037\054\ufff1\055\ufff1\001\002\000\070\002\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\015\ufffa\017\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\030\ufffa\032\ufffa\034\ufffa\036\ufffa" +
    "\040\ufffa\042\035\043\036\044\041\045\037\046\034\047" +
    "\033\050\040\051\030\052\032\053\031\054\ufffa\055\ufffa" +
    "\001\002\000\034\036\060\042\035\043\036\044\041\045" +
    "\037\046\034\047\033\050\040\051\030\052\032\053\031" +
    "\054\027\055\042\001\002\000\076\002\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\015\uffe1\017\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\030\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\001\002\000\012\015\uffd3\017\uffd3\025\066" +
    "\026\uffd3\001\002\000\012\015\071\017\uffd1\025\uffd1\026" +
    "\uffd1\001\002\000\012\015\071\017\135\025\066\026\065" +
    "\001\002\000\012\015\uffbf\017\uffbf\025\uffbf\026\uffbf\001" +
    "\002\000\004\004\126\001\002\000\004\004\114\001\002" +
    "\000\012\015\uffd0\017\uffd0\025\uffd0\026\uffd0\001\002\000" +
    "\012\015\uffcd\017\uffcd\025\uffcd\026\uffcd\001\002\000\004" +
    "\004\073\001\002\000\012\015\uffd2\017\uffd2\025\uffd2\026" +
    "\uffd2\001\002\000\004\033\074\001\002\000\006\004\076" +
    "\034\uffc5\001\002\000\010\030\uffc7\034\uffc7\040\uffc7\001" +
    "\002\000\004\031\112\001\002\000\010\030\110\034\uffc4" +
    "\040\uffc4\001\002\000\004\034\101\001\002\000\006\031" +
    "\103\046\102\001\002\000\030\004\015\005\005\006\011" +
    "\010\021\014\006\016\012\020\017\021\007\027\004\033" +
    "\014\043\013\001\002\000\004\004\104\001\002\000\004" +
    "\046\105\001\002\000\030\004\015\005\005\006\011\010" +
    "\021\014\006\016\012\020\017\021\007\027\004\033\014" +
    "\043\013\001\002\000\042\015\uffc0\017\uffc0\025\uffc0\026" +
    "\uffc0\042\035\043\036\044\041\045\037\046\034\047\033" +
    "\050\040\051\030\052\032\053\031\054\027\055\042\001" +
    "\002\000\042\015\uffc1\017\uffc1\025\uffc1\026\uffc1\042\035" +
    "\043\036\044\041\045\037\046\034\047\033\050\040\051" +
    "\030\052\032\053\031\054\027\055\042\001\002\000\004" +
    "\004\076\001\002\000\010\030\uffc6\034\uffc6\040\uffc6\001" +
    "\002\000\004\004\113\001\002\000\010\030\uffc8\034\uffc8" +
    "\040\uffc8\001\002\000\004\046\115\001\002\000\010\004" +
    "\120\007\121\037\116\001\002\000\006\004\076\040\uffc5" +
    "\001\002\000\012\015\uffce\017\uffce\025\uffce\026\uffce\001" +
    "\002\000\012\015\uffcb\017\uffcb\025\uffcb\026\uffcb\001\002" +
    "\000\004\022\122\001\002\000\004\004\123\001\002\000" +
    "\012\015\uffc9\017\uffc9\025\uffc9\026\uffc9\001\002\000\004" +
    "\040\125\001\002\000\012\015\uffca\017\uffca\025\uffca\026" +
    "\uffca\001\002\000\006\031\127\056\130\001\002\000\004" +
    "\004\132\001\002\000\030\004\015\005\005\006\011\010" +
    "\021\014\006\016\012\020\017\021\007\027\004\033\014" +
    "\043\013\001\002\000\042\015\uffc3\017\uffc3\025\uffc3\026" +
    "\uffc3\042\035\043\036\044\041\045\037\046\034\047\033" +
    "\050\040\051\030\052\032\053\031\054\027\055\042\001" +
    "\002\000\004\056\133\001\002\000\030\004\015\005\005" +
    "\006\011\010\021\014\006\016\012\020\017\021\007\027" +
    "\004\033\014\043\013\001\002\000\042\015\uffc2\017\uffc2" +
    "\025\uffc2\026\uffc2\042\035\043\036\044\041\045\037\046" +
    "\034\047\033\050\040\051\030\052\032\053\031\054\027" +
    "\055\042\001\002\000\032\004\015\005\005\006\011\010" +
    "\021\013\uffd9\014\006\016\012\020\017\021\007\027\004" +
    "\033\014\043\013\001\002\000\012\015\uffcf\017\uffcf\025" +
    "\uffcf\026\uffcf\001\002\000\004\013\144\001\002\000\010" +
    "\013\uffd8\032\142\034\uffd8\001\002\000\040\013\uffdb\032" +
    "\uffdb\034\uffdb\042\035\043\036\044\041\045\037\046\034" +
    "\047\033\050\040\051\030\052\032\053\031\054\027\055" +
    "\042\001\002\000\030\004\015\005\005\006\011\010\021" +
    "\014\006\016\012\020\017\021\007\027\004\033\014\043" +
    "\013\001\002\000\040\013\uffda\032\uffda\034\uffda\042\035" +
    "\043\036\044\041\045\037\046\034\047\033\050\040\051" +
    "\030\052\032\053\031\054\027\055\042\001\002\000\070" +
    "\002\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\032\uffe4\034\uffe4" +
    "\036\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\001\002\000\012\015\uffbe\017\uffbe\025\uffbe\026" +
    "\uffbe\001\002\000\012\015\uffcc\017\uffcc\025\uffcc\026\uffcc" +
    "\001\002\000\006\004\164\040\uffd5\001\002\000\032\004" +
    "\015\005\005\006\011\010\021\014\006\016\012\020\017" +
    "\021\007\027\004\033\014\034\uffdd\043\013\001\002\000" +
    "\030\004\015\005\005\006\011\010\021\014\006\016\012" +
    "\020\017\021\007\027\004\033\014\043\013\001\002\000" +
    "\034\036\153\042\035\043\036\044\041\045\037\046\034" +
    "\047\033\050\040\051\030\052\032\053\031\054\027\055" +
    "\042\001\002\000\100\002\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\015\uffe0\017\uffe0\022\154\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\001\002\000\030\004\015\005\005\006\011\010" +
    "\021\014\006\016\012\020\017\021\007\027\004\033\014" +
    "\043\013\001\002\000\070\002\uffea\011\uffea\012\uffea\013" +
    "\uffea\015\uffea\017\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\030\uffea\032\uffea\034\uffea\036\uffea\040\uffea\042\035\043" +
    "\036\044\041\045\037\046\034\047\033\050\040\051\030" +
    "\052\032\053\031\054\027\055\042\001\002\000\006\030" +
    "\162\034\uffdc\001\002\000\004\034\161\001\002\000\036" +
    "\030\uffdf\034\uffdf\042\035\043\036\044\041\045\037\046" +
    "\034\047\033\050\040\051\030\052\032\053\031\054\027" +
    "\055\042\001\002\000\070\002\uffed\011\uffed\012\uffed\013" +
    "\uffed\015\uffed\017\uffed\023\uffed\024\uffed\025\uffed\026\uffed" +
    "\030\uffed\032\uffed\034\uffed\036\uffed\040\uffed\042\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\053\uffed\054\uffed\055\uffed\001\002\000\030\004" +
    "\015\005\005\006\011\010\021\014\006\016\012\020\017" +
    "\021\007\027\004\033\014\043\013\001\002\000\036\030" +
    "\uffde\034\uffde\042\035\043\036\044\041\045\037\046\034" +
    "\047\033\050\040\051\030\052\032\053\031\054\027\055" +
    "\042\001\002\000\004\046\174\001\002\000\004\040\173" +
    "\001\002\000\006\030\167\040\uffd4\001\002\000\004\004" +
    "\170\001\002\000\004\046\171\001\002\000\030\004\015" +
    "\005\005\006\011\010\021\014\006\016\012\020\017\021" +
    "\007\027\004\033\014\043\013\001\002\000\036\030\uffd6" +
    "\040\uffd6\042\035\043\036\044\041\045\037\046\034\047" +
    "\033\050\040\051\030\052\032\053\031\054\027\055\042" +
    "\001\002\000\070\002\uffeb\011\uffeb\012\uffeb\013\uffeb\015" +
    "\uffeb\017\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb" +
    "\032\uffeb\034\uffeb\036\uffeb\040\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\001\002\000\030\004\015\005" +
    "\005\006\011\010\021\014\006\016\012\020\017\021\007" +
    "\027\004\033\014\043\013\001\002\000\036\030\uffd7\040" +
    "\uffd7\042\035\043\036\044\041\045\037\046\034\047\033" +
    "\050\040\051\030\052\032\053\031\054\027\055\042\001" +
    "\002\000\004\034\177\001\002\000\070\002\uffec\011\uffec" +
    "\012\uffec\013\uffec\015\uffec\017\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\030\uffec\032\uffec\034\uffec\036\uffec\040\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\001\002" +
    "\000\070\002\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\017" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\032\ufffb" +
    "\034\ufffb\036\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\001\002\000\034\023\202\042\035\043" +
    "\036\044\041\045\037\046\034\047\033\050\040\051\030" +
    "\052\032\053\031\054\027\055\042\001\002\000\030\004" +
    "\015\005\005\006\011\010\021\014\006\016\012\020\017" +
    "\021\007\027\004\033\014\043\013\001\002\000\070\002" +
    "\uffe9\011\uffe9\012\204\013\uffe9\015\uffe9\017\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\030\uffe9\032\uffe9\034\uffe9\036" +
    "\uffe9\040\uffe9\042\035\043\036\044\041\045\037\046\034" +
    "\047\033\050\040\051\030\052\032\053\031\054\027\055" +
    "\042\001\002\000\030\004\015\005\005\006\011\010\021" +
    "\014\006\016\012\020\017\021\007\027\004\033\014\043" +
    "\013\001\002\000\070\002\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\015\uffe8\017\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030" +
    "\uffe8\032\uffe8\034\uffe8\036\uffe8\040\uffe8\042\035\043\036" +
    "\044\041\045\037\046\034\047\033\050\040\051\030\052" +
    "\032\053\031\054\027\055\042\001\002\000\004\002\001" +
    "\001\002\000\004\056\210\001\002\000\030\004\015\005" +
    "\005\006\011\010\021\014\006\016\012\020\017\021\007" +
    "\027\004\033\014\043\013\001\002\000\034\024\212\042" +
    "\035\043\036\044\041\045\037\046\034\047\033\050\040" +
    "\051\030\052\032\053\031\054\027\055\042\001\002\000" +
    "\030\004\015\005\005\006\011\010\021\014\006\016\012" +
    "\020\017\021\007\027\004\033\014\043\013\001\002\000" +
    "\034\011\214\042\035\043\036\044\041\045\037\046\034" +
    "\047\033\050\040\051\030\052\032\053\031\054\027\055" +
    "\042\001\002\000\030\004\015\005\005\006\011\010\021" +
    "\014\006\016\012\020\017\021\007\027\004\033\014\043" +
    "\013\001\002\000\070\002\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\015\uffe6\017\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\030" +
    "\uffe6\032\uffe6\034\uffe6\036\uffe6\040\uffe6\042\035\043\036" +
    "\044\041\045\037\046\034\047\033\050\040\051\030\052" +
    "\032\053\031\054\027\055\042\001\002\000\034\011\217" +
    "\042\035\043\036\044\041\045\037\046\034\047\033\050" +
    "\040\051\030\052\032\053\031\054\027\055\042\001\002" +
    "\000\030\004\015\005\005\006\011\010\021\014\006\016" +
    "\012\020\017\021\007\027\004\033\014\043\013\001\002" +
    "\000\070\002\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\017" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\032\uffe7" +
    "\034\uffe7\036\uffe7\040\uffe7\042\035\043\036\044\041\045" +
    "\037\046\034\047\033\050\040\051\030\052\032\053\031" +
    "\054\027\055\042\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\010\003\007\004\015\005\017\001\001\000" +
    "\006\004\215\005\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\200\005\017\001\001\000\006\004\177" +
    "\005\017\001\001\000\012\004\140\005\017\010\137\011" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\066\015\062\016\067\017\060\024\071\025\063\026" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\056\005\017\001\001\000\006\004\025\005\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\055\005\017\001\001\000\006\004\054\005" +
    "\017\001\001\000\006\004\053\005\017\001\001\000\006" +
    "\004\052\005\017\001\001\000\006\004\051\005\017\001" +
    "\001\000\006\004\050\005\017\001\001\000\006\004\047" +
    "\005\017\001\001\000\006\004\046\005\017\001\001\000" +
    "\006\004\045\005\017\001\001\000\006\004\044\005\017" +
    "\001\001\000\006\004\043\005\017\001\001\000\006\004" +
    "\042\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\145" +
    "\001\001\000\004\025\144\001\001\000\016\014\135\016" +
    "\067\017\060\024\071\025\063\026\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\074\022\076\023\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\106\005" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\105\005\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\116\001\001\000\010\021\074\022\076\023\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\130\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\133\005\017\001\001\000\002\001\001\000" +
    "\012\004\140\005\017\010\137\011\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\142\005\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\165\013\164\001\001\000\012\004\157\005\017" +
    "\006\155\007\156\001\001\000\006\004\151\005\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\154" +
    "\005\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\162\005\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\171\005\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\174\005\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\202" +
    "\005\017\001\001\000\002\001\001\000\006\004\204\005" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\210\005\017\001\001\000\002\001" +
    "\001\000\006\004\212\005\017\001\001\000\002\001\001" +
    "\000\006\004\214\005\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\217\005\017\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public void parserPanic(String message, Object info) {

      ErrorMsg.instance.err("Parser panic:"+message+info);
   }

   public void syntax_error(Symbol cur_token){
      parserPanic("Syntax error", cur_token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // func_decl_list ::= func_decl_list func_decl 
            {
              SynFuncDeclList RESULT = null;
		int fdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SynFuncDeclList fdlist = (SynFuncDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynFuncDecl fdecl = (SynFuncDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fdlist.append(fdecl); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*func_decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // func_decl_list ::= func_decl 
            {
              SynFuncDeclList RESULT = null;
		int fdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynFuncDecl fdecl = (SynFuncDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynFuncDeclList(fdecl); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*func_decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // func_decl ::= FUNCTION IDENTIFIER LPARENTHESE opt_type_field_list RPARENTHESE COLON IDENTIFIER EQ expr 
            {
              SynFuncDecl RESULT = null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tyflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tyflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SynTypeFieldList tyfl = (SynTypeFieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynFuncDecl(fname, tyid, tyfl, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*func_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // func_decl ::= FUNCTION IDENTIFIER LPARENTHESE opt_type_field_list RPARENTHESE EQ expr 
            {
              SynFuncDecl RESULT = null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tyflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tyflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SynTypeFieldList tyfl = (SynTypeFieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynFuncDecl(fname, tyfl, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*func_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var_decl ::= VAR IDENTIFIER COLON IDENTIFIER ASSIGN expr 
            {
              SynVarDecl RESULT = null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynVarDecl(vname, tyid, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*var_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var_decl ::= VAR IDENTIFIER ASSIGN expr 
            {
              SynVarDecl RESULT = null;
		int vnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynVarDecl(vname, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*var_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // opt_type_field_list ::= type_field_list 
            {
              SynTypeFieldList RESULT = null;
		int tyflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tyflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynTypeFieldList tyfl = (SynTypeFieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tyfl; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*opt_type_field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opt_type_field_list ::= 
            {
              SynTypeFieldList RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*opt_type_field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type_field_list ::= type_field_list COMMA type_field 
            {
              SynTypeFieldList RESULT = null;
		int tyflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SynTypeFieldList tyfl = (SynTypeFieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tyfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tyfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynTypeField tyf = (SynTypeField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tyfl.append(tyf); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*type_field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type_field_list ::= type_field 
            {
              SynTypeFieldList RESULT = null;
		int tyfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tyfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynTypeField tyf = (SynTypeField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynTypeFieldList(tyf); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*type_field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_field ::= IDENTIFIER COLON IDENTIFIER 
            {
              SynTypeField RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynTypeField(name, tyid); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*type_field*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= ARRAY OF IDENTIFIER 
            {
              AbsSynNode RESULT = null;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynArrayType(new SynTypeID(tyid)); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= LBRACE opt_type_field_list RBRACE 
            {
              AbsSynNode RESULT = null;
		int tyflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tyflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SynTypeFieldList tyfl = (SynTypeFieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SynRecordType(tyfl); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= IDENTIFIER 
            {
              AbsSynNode RESULT = null;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynTypeID(tyid); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_decl_list ::= type_decl_list type_decl 
            {
              SynTypeDeclList RESULT = null;
		int tdlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SynTypeDeclList tdlist = (SynTypeDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynTypeDecl tdecl = (SynTypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tdlist.append(tdecl); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_decl_list ::= type_decl 
            {
              SynTypeDeclList RESULT = null;
		int tdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynTypeDecl tdecl = (SynTypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynTypeDeclList(tdecl); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_decl ::= TYPE IDENTIFIER EQ type 
            {
              SynTypeDecl RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode ty = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynTypeDecl(id, ty); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decl_list ::= decl_list decl 
            {
              SynDeclList RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SynDeclList dl = (SynDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode d = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = dl.append(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decl_list ::= decl 
            {
              SynDeclList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode d = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynDeclList(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decl ::= func_decl_list 
            {
              AbsSynNode RESULT = null;
		int fdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynFuncDeclList fdecl = (SynFuncDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fdecl; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decl ::= var_decl 
            {
              AbsSynNode RESULT = null;
		int vdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynVarDecl vdecl = (SynVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = vdecl; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decl ::= type_decl_list 
            {
              AbsSynNode RESULT = null;
		int tdeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynTypeDeclList tdecl = (SynTypeDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tdecl; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opt_field_list ::= field_list 
            {
              SynFieldList RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynFieldList fl = (SynFieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fl; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*opt_field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opt_field_list ::= 
            {
              SynFieldList RESULT = null;
		 RESULT = (SynFieldList)null; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*opt_field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // field_list ::= field_list COMMA IDENTIFIER EQ expr 
            {
              SynFieldList RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SynFieldList fl = (SynFieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = fl.append(id, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_list ::= IDENTIFIER EQ expr 
            {
              SynFieldList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynFieldList(id, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*field_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opt_expr_seq ::= expr_seq 
            {
              SynExprSeq RESULT = null;
		int eseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynExprSeq eseq = (SynExprSeq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = eseq; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*opt_expr_seq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opt_expr_seq ::= 
            {
              SynExprSeq RESULT = null;
		 RESULT = (SynExprSeq)null; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*opt_expr_seq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_seq ::= expr_seq SEMICOLON expr 
            {
              SynExprSeq RESULT = null;
		int eseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SynExprSeq eseq = (SynExprSeq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = eseq.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_seq ::= expr 
            {
              SynExprSeq RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynExprSeq(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opt_expr_list ::= expr_list 
            {
              SynExprList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SynExprList el = (SynExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = el; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*opt_expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opt_expr_list ::= 
            {
              SynExprList RESULT = null;
		 RESULT = (SynExprList)null; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*opt_expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_list ::= expr_list COMMA expr 
            {
              SynExprList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SynExprList el = (SynExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = el.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_list ::= expr 
            {
              SynExprList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynExprList(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lvalue ::= IDENTIFIER LBRACKET expr RBRACKET 
            {
              AbsSynNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new SynArrayRef(new SynVarRef(id), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lvalue ::= lvalue LBRACKET expr RBRACKET 
            {
              AbsSynNode RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbsSynNode lv = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SynArrayRef(lv, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lvalue ::= lvalue DOT IDENTIFIER 
            {
              AbsSynNode RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode lv = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynRecordRef(lv, id); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lvalue ::= IDENTIFIER 
            {
              AbsSynNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynVarRef(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*lvalue*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= LET decl_list IN opt_expr_seq END 
            {
              AbsSynNode RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SynDeclList decl = (SynDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SynExprSeq eseq = (SynExprSeq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SynAgg(decl, eseq); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= BREAK 
            {
              AbsSynNode RESULT = null;
		 RESULT = new SynBreak(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= FOR IDENTIFIER ASSIGN expr TO expr DO expr 
            {
              AbsSynNode RESULT = null;
		int inameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int inameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String iname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int efromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int efromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbsSynNode efrom = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int etoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int etoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode eto = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynFor(iname, efrom, eto, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= WHILE expr DO expr 
            {
              AbsSynNode RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode cond = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynWhile(cond, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= IF expr THEN expr ELSE expr 
            {
              AbsSynNode RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbsSynNode cond = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode te = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode ee = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynIf(cond, te, ee); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= IF expr THEN expr 
            {
              AbsSynNode RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode cond = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynIf(cond, e, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= IDENTIFIER LBRACKET expr RBRACKET OF expr 
            {
              AbsSynNode RESULT = null;
		int anameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int anameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String aname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbsSynNode index = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode val = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynArray(aname, index, val); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= IDENTIFIER LBRACE opt_field_list RBRACE 
            {
              AbsSynNode RESULT = null;
		int rnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String rname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SynFieldList flist = (SynFieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SynRecord(rname, flist); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LPARENTHESE opt_expr_seq RPARENTHESE 
            {
              AbsSynNode RESULT = null;
		int eseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SynExprSeq eseq = (SynExprSeq)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (eseq == null ? new SynVoid() : eseq); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= IDENTIFIER LPARENTHESE opt_expr_list RPARENTHESE 
            {
              AbsSynNode RESULT = null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String fname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SynExprList elist = (SynExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SynCall(fname, elist); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= lvalue ASSIGN expr 
            {
              AbsSynNode RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode lv = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynAssign(lv, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr GREATEREQ expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.GREATEREQ, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr GREATER expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.GREATER, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr LESSEQ expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.LESSEQ, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr LESS expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.LESS, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr NEQ expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.NEQ, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr EQ expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.EQ, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr DIV expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.DIV, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr MUL expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.MUL, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr SUB expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.SUB, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr ADD expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.ADD, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr OR expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.OR, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr AND expr 
            {
              AbsSynNode RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbsSynNode el = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode er = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynBinaryOp(el, sym.AND, er); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= SUB expr 
            {
              AbsSynNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynSubExpr(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= lvalue 
            {
              AbsSynNode RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode lv = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lv; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= NIL 
            {
              AbsSynNode RESULT = null;
		 RESULT = new SynNil(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= INTEGER 
            {
              AbsSynNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynInteger(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= STRING 
            {
              AbsSynNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SynString(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expr 
            {
              AbsSynNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AbsSynNode e = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbsSynNode start_val = (AbsSynNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

